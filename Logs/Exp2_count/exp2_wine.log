>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 58
 Number of frequent closed itemsets: 12381
 Total time ~: 280 ms
>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 86
 Number of frequent closed itemsets: 12611
 Total time ~: 321 ms
Timeout Reached
Current Minsup[0.75] yields 52392 itemsets.
Current Minsup[0.875] yields 1249 itemsets.
Current Minsup[0.8054064099945373] yields 12381 itemsets.
Top-k minsup for at least 5000 paterns = 0.8054064099945373 or 47
DL of initial theory	: 54616.93128080831
4999	itemsets left after T operation 	: [frozenset({64, 35, 4, 3, 6, 5, 10, 15, 48, 49, 18, 51, -47, 50, -2, 23, 29, 30})]
594	itemsets left after W operation 	: [frozenset({34, 3, 4, 67, 40, 10, 11, 48, 49, 51, 29, 30}), frozenset({2, 5, 7, 9, 12, 13, 15, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 32, 33, 35, 38, 39, 41, 42, 43, 44, 46, 50, 52, 53, 54, 55, 57, 58, 59, 61, -67, 63, 64, 65, 66, -62, -60, -56, -47, -45, -37, -36, -31, -22, -20, -14, -8, -6}), frozenset({5, 6, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 31, 32, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 52, 53, 55, 56, 58, 59, 60, 61, -67, 63, 64, 65, 66, -62, -57, -54, -50, -42, -41, -33, -28, -25, -17, -12, -7, -2}), frozenset({5, 6, 7, 9, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 32, 33, 35, 37, 38, 39, 42, 43, 44, 46, 47, 52, 53, 55, 56, 57, 58, 59, 60, -67, 63, 64, 65, 66, -62, -61, -54, -50, -45, -41, -36, -31, -25, -21, -16, -8, -2}), frozenset({5, 6, 7, 8, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 26, 28, 31, 32, 35, 36, 37, 38, 39, 43, 44, 45, 46, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, -64, 65, 66, -67, -58, -56, -47, -42, -41, -33, -27, -25, -18, -16, -9, -2}), frozenset({2, 5, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 31, 32, 35, 36, 38, 39, 41, 43, 44, 45, 46, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, -65, 66, -67, -58, -56, -47, -42, -37, -33, -28, -23, -17, -12, -7, -6}), frozenset({5, 6, 7, 8, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, 32, 33, 36, 38, 39, 41, 42, 43, 44, 46, 50, 53, 54, 55, 56, 57, 58, 59, 60, -67, 62, 63, 64, -65, 66, -61, -52, -47, -45, -37, -35, -31, -24, -18, -12, -9, -2}), frozenset({5, 6, 8, 9, 12, 13, 14, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 32, 33, 35, 38, 39, 41, 42, 43, 44, 45, 50, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, -65, 66, -67, -60, -54, -47, -46, -37, -36, -31, -23, -18, -15, -7, -2}), frozenset({2, 6, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 32, 35, 36, 37, 38, 39, 43, 44, 45, 46, 50, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, -66, -67, -57, -55, -47, -42, -41, -33, -31, -25, -17, -12, -7, -5}), frozenset({5, 6, 8, 9, 12, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 31, 32, 35, 36, 38, 39, 41, 42, 43, 44, 45, 50, 53, 54, 55, 56, 57, 58, 59, 61, -67, 63, 64, 65, 66, -62, -60, -52, -47, -46, -37, -33, -28, -23, -17, -14, -7, -2})]
0	itemsets left after W operation 	: [frozenset({64, 35, 4, 5, 6, 68, 15, 49, 50, 51, 23, 29, 30}), frozenset({2, 8, 9, 10, 11, 13, 14, 16, 18, 19, 20, 21, 24, 25, 26, 27, 28, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 47, 52, 53, 54, 56, 57, 58, 59, -68, 61, 63, 65, 66, -62, -60, -55, -48, -46, -37, -36, -31, -22, -17, -12, -7, -3}), frozenset({3, 7, 8, 9, 11, 13, 14, 16, 17, 19, 20, 21, 22, 24, 26, 27, 28, 32, 33, 36, 38, 39, 40, 41, 42, 43, 44, 45, 48, 53, 54, 55, 56, 57, 58, 60, 61, 62, -68, 65, 66, -63, -59, -52, -47, -46, -37, -34, -31, -25, -18, -12, -10, -2}), frozenset({48, -47, 18, 3, 10, -68, -2})]
# of frequent itemsets	: 0
Time of DCI Closed		: 0.31278514862060547
Initial DL				: 53743.33344022854
Final DL				: 5229.69285198711
Compression (wrt me)	: 0.9026913197000817
Operator Counters		: {'D': 0, 'W': 2, 'V': 0, 'S': 0, 'R': 0, 'T': 1}
Misle Learning Runtime	: 25.166016101837158

Timeout Reached
Current Minsup[0.75] yields 71095 itemsets.
Current Minsup[0.875] yields 1142 itemsets.
Current Minsup[0.8093476130846616] yields 12611 itemsets.
Top-k minsup for at least 5000 paterns = 0.8093476130846616 or 70
DL of initial theory	: 54616.93128080831
4999	itemsets left after T operation 	: [frozenset({64, 3, 5, 40, 10, 49, 21, 26, 29, 30, 63})]
2724	itemsets left after T operation 	: [frozenset({35, 5, 10, 45, 49, 23, 26, 30})]
0	itemsets left after T operation 	: [frozenset({64, 40, 10, 21, 29, 63})]
# of frequent itemsets	: 0
Time of DCI Closed		: 0.31359386444091797
Initial DL				: 53743.33344022854
Final DL				: 20664.597447182296
Compression (wrt me)	: 0.6154946832584409
Operator Counters		: {'D': 0, 'W': 0, 'V': 0, 'S': 0, 'R': 0, 'T': 3}
Misle Learning Runtime	: 25.865128755569458

Max Score = 0.0; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})"]
Max Score = 0.0; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})"]
Max Score = 0.0; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})"]
Max Score = 0.0; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})"]
Max Score = 0.0; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})"]
Max Score = 0.0; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})"]
Max Score = 0.0; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})"]
Max Score = 0.0; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})"]
Max Score = 0.0; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})"]
Max Score = 0.0; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})"]
Max Score = 0.0; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})"]
Max Score = 0.0; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})"]
Max Score = 0.0; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})"]
Max Score = 0.16666666666666666; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})"]
Max Score = 0.0; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})", "defaultdict(<class 'int'>, {})"]
Max Score = 0.16666666666666666; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})"]
Max Score = 0.29166666666666663; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})"]
Max Score = 0.29166666666666663; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})"]
Max Score = 0.29166666666666663; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})"]
Max Score = 0.29166666666666663; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})"]
Max Score = 0.16666666666666666; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})"]
Max Score = 0.16666666666666666; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})"]
Max Score = 0.16666666666666666; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})", "defaultdict(<class 'int'>, {6: 1})"]
Max Score = 0.29166666666666663; Max Indices = [0, 1, 2, 3, 4, 5, 6, 7]; # failed_clauses_list = ["defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})", "defaultdict(<class 'int'>, {8: 1, 6: 1})"]
Return Code	: 0
CNF-cc Accuracy		: 0.6176470588235294

Dataset				: wine.dat
Metric				: length
Minsups				: [3]
Mistle Accuracy		: [0.9705882352941176]
CNFAlgo Accuracy	: [0.6176470588235294]
Randomized Accuracy	: [0.125]

# Test Examples		: 34
Mistle # Ties		: [(34, 196)]
CNFAlgo # Ties		: [(0, 0)]
