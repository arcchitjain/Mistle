>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 281
 Number of frequent closed itemsets: 9802
 Total time ~: 387 ms
Current Minsup[0.5] yields 3504 itemsets.
Current Minsup[0.25] yields 61814 itemsets.
Current Minsup[0.40865872636715184] yields 9802 itemsets.
Top-k minsup for at least 10000 paterns = 0.40865872636715184 or 115
73  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 17, 19, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -18, -16, -12, -7, -2}), frozenset({2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -20, -16, -14, -11, -3}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -8, -4}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -8, -3}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -20, -16, -13, -7, -2}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -17, -14, -9, -5}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -19, -16, -13, -8, -4}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -9, -5}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -11, -4}), frozenset({2, 3, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -7, -4}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -17, -14, -11, -4}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -14, -9, -5}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -13, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -9, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 16, 18, 20, 22, 23, 25, 27, 29, 31, -30, -28, -26, -24, -21, -19, -17, -12, -8, -2}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -8, -4}), frozenset({2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -9, -6}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -8, -4}), frozenset({2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -7, -4}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -19, -16, -13, -8, -3}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -20, -16, -14, -8, -4}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -14, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -11, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 19, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -18, -16, -12, -8, -2}), frozenset({2, 3, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -7, -4}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -13, -9, -5}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -9, -5}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -12, -8, -2}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -20, -16, -13, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -20, -16, -13, -11, -4}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -14, -7, -2}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -8, -4}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -13, -7, -2}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -8, -4}), frozenset({2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 16, 18, 20, 21, 23, 24, 26, 28, 31, -30, -29, -27, -25, -22, -19, -17, -15, -11, -5}), frozenset({2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -8, -6}), frozenset({2, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -10, -3}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -9, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -12, -8, -2}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 20, 22, 23, 25, 27, 29, 31, -30, -28, -26, -24, -21, -19, -16, -12, -8, -2}), frozenset({2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -8, -6}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -8, -3}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -7, -2}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 22, 24, 26, 29, 31, -30, -28, -27, -25, -23, -19, -17, -13, -8, -3}), frozenset({3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 18, 20, 22, 23, 25, 27, 29, 31, -30, -28, -26, -24, -21, -19, -16, -12, -9, -2}), frozenset({2, 3, 4, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -8, -5}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -13, -8, -3}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -7, -3}), frozenset({3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 25, 27, 29, 30, -31, -28, -26, -24, -21, -20, -16, -12, -9, -2}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -7, -3}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -7, -3}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -17, -14, -9, -4}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -20, -16, -13, -8, -4}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -14, -7, -3}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -17, -14, -9, -4}), frozenset({2, 3, 4, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -8, -5}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -8, -3}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -7, -2}), frozenset({2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 16, 18, 20, 21, 22, 24, 26, 28, 31, -30, -29, -27, -25, -23, -19, -17, -15, -11, -5}), frozenset({2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -14, -9, -6}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -17, -13, -8, -3}), frozenset({2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -8, -5}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -8, -3}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -20, -16, -14, -9, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -12, -8, -2}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -9, -4}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -19, -16, -13, -8, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 25, 27, 29, 31, -30, -28, -26, -24, -21, -20, -16, -12, -8, -2}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 17, 18, 19, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -20, -16, -15, -11, -4}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -9, -5}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -7, -3})}>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 120
 Number of frequent closed itemsets: 9547
 Total time ~: 234 ms

DL of initial theory	: 48444.03252043957
9786	itemsets left after T operation 	: [frozenset({-28, -27, 6, 10, 11, -21, 15, 22, 23, 26, 29})]
9607	itemsets left after T operation 	: [frozenset({2, -28, -27, 7, 12, 18, 22, 26, 29})]
8890	itemsets left after T operation 	: [frozenset({-28, 5, 6, -21, 14, 15, -16, 17, 22, 23, 29})]
4983	itemsets left after T operation 	: [frozenset({-28, 5, -27, 10, 11, 15, 26, 29})]
519	itemsets left after T operation 	: [frozenset({4, -27, 9, 18, 26})]
44	itemsets left after T operation 	: [frozenset({-28, 6, -21, 15, 22, 23, 29})]
14	itemsets left after V operation 	: [frozenset({2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 16, 19, 21, 22, 24, 28, 30, -31, -29, -25, -23, -20, -17, -15, -11, -4}), frozenset({18, 4, -27, 9, 26})]
# of frequent itemsets	: 0
Time of DCI Closed		: 0.30099987983703613
Initial DL				: 157333.08110911513
Final DL				: 16189.126796271914
Compression (wrt me)	: 0.8971028426943201
Operator Counters		: {'D': 0, 'W': 0, 'V': 1, 'S': 0, 'R': 0, 'T': 6}
Misle Learning Runtime	: 8.837762117385864

Current Minsup[0.5] yields 4449 itemsets.
Current Minsup[0.25] yields 58553 itemsets.
Current Minsup[0.42143711259870953] yields 9547 itemsets.
Top-k minsup for at least 10000 paterns = 0.42143711259870953 or 51
73  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 17, 19, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -18, -16, -12, -7, -2}), frozenset({2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -20, -16, -14, -11, -3}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -8, -4}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -8, -3}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -20, -16, -13, -7, -2}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -17, -14, -9, -5}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -19, -16, -13, -8, -4}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -11, -4}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -9, -5}), frozenset({2, 3, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -7, -4}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -14, -9, -5}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -17, -14, -11, -4}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -13, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -9, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 16, 18, 20, 22, 23, 25, 27, 29, 31, -30, -28, -26, -24, -21, -19, -17, -12, -8, -2}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -8, -4}), frozenset({2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -9, -6}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -8, -4}), frozenset({2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -7, -4}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -19, -16, -13, -8, -3}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -20, -16, -14, -8, -4}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -14, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -11, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 19, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -18, -16, -12, -8, -2}), frozenset({2, 3, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -7, -4}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -13, -9, -5}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -9, -5}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -12, -8, -2}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -20, -16, -13, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -20, -16, -13, -11, -4}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -14, -7, -2}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -8, -4}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -13, -7, -2}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -8, -4}), frozenset({2, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -10, -3}), frozenset({2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -8, -6}), frozenset({2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 16, 18, 20, 21, 23, 24, 26, 28, 31, -30, -29, -27, -25, -22, -19, -17, -15, -11, -5}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -9, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -12, -8, -2}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 20, 22, 23, 25, 27, 29, 31, -30, -28, -26, -24, -21, -19, -16, -12, -8, -2}), frozenset({2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -8, -6}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -8, -3}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -7, -2}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 22, 24, 26, 29, 31, -30, -28, -27, -25, -23, -19, -17, -13, -8, -3}), frozenset({3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 18, 20, 22, 23, 25, 27, 29, 31, -30, -28, -26, -24, -21, -19, -16, -12, -9, -2}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -13, -8, -3}), frozenset({2, 3, 4, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -8, -5}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -7, -3}), frozenset({3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 25, 27, 29, 30, -31, -28, -26, -24, -21, -20, -16, -12, -9, -2}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -7, -3}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -7, -3}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -17, -14, -9, -4}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -20, -16, -13, -8, -4}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -14, -7, -3}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -17, -14, -9, -4}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -8, -3}), frozenset({2, 3, 4, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -8, -5}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -7, -2}), frozenset({2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 16, 18, 20, 21, 22, 24, 26, 28, 31, -30, -29, -27, -25, -23, -19, -17, -15, -11, -5}), frozenset({2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -14, -9, -6}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -17, -13, -8, -3}), frozenset({2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -8, -5}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -8, -3}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -20, -16, -14, -9, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -12, -8, -2}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -9, -4}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -19, -16, -13, -8, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 25, 27, 29, 31, -30, -28, -26, -24, -21, -20, -16, -12, -8, -2}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 17, 18, 19, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -20, -16, -15, -11, -4}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -9, -5}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -7, -3})}
DL of initial theory	: 48444.03252043957
9490	itemsets left after W operation 	: [frozenset({32, 2, -28, -27, 10, -21, 12, 18, 22, 23, 26, 29}), frozenset({4, 5, 6, 7, 8, 9, 13, 15, 17, 19, 24, 30, -32, -31, -25, -20, -16, -14, -11, -3}), frozenset({4, 5, 6, 8, 9, 11, 13, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -14, -7, -3}), frozenset({4, 5, 6, 7, 9, 11, 14, 15, 17, 20, 25, 31, -32, -30, -24, -19, -16, -13, -8, -3}), frozenset({3, 4, 5, 8, 9, 11, 13, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -14, -7, -6}), frozenset({4, 5, 6, 7, 9, 11, 14, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -13, -8, -3}), frozenset({3, 4, 5, 7, 8, 9, 13, 15, 17, 20, 24, 30, -32, -31, -25, -19, -16, -14, -11, -6}), frozenset({3, 5, 6, 7, 8, 11, 14, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -13, -9, -4}), frozenset({3, 5, 6, 8, 9, 11, 13, 14, 17, 19, 24, 31, -32, -30, -25, -20, -16, -15, -7, -4}), frozenset({3, 5, 6, 7, 8, 11, 14, 15, 17, 19, 25, 30, -32, -31, -24, -20, -16, -13, -9, -4}), frozenset({3, 5, 6, 7, 8, 11, 14, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -13, -9, -4}), frozenset({4, 5, 6, 8, 9, 11, 14, 15, 17, 20, 25, 31, -32, -30, -24, -19, -16, -13, -7, -3}), frozenset({3, 4, 5, 7, 9, 11, 13, 15, 17, 19, 24, 31, -32, -30, -25, -20, -16, -14, -8, -6}), frozenset({3, 5, 6, 8, 9, 11, 14, 15, 16, 20, 25, 30, -32, -31, -24, -19, -17, -13, -7, -4}), frozenset({3, 4, 6, 7, 8, 11, 14, 15, 16, 20, 24, 31, -32, -30, -25, -19, -17, -13, -9, -5}), frozenset({3, 5, 6, 7, 9, 11, 14, 15, 17, 19, 25, 30, -32, -31, -24, -20, -16, -13, -8, -4}), frozenset({3, 5, 6, 7, 9, 11, 14, 15, 17, 20, 25, 31, -32, -30, -24, -19, -16, -13, -8, -4}), frozenset({3, 5, 6, 7, 8, 11, 13, 14, 16, 19, 25, 31, -32, -30, -24, -20, -17, -15, -9, -4}), frozenset({3, 5, 6, 7, 9, 11, 14, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -13, -8, -4}), frozenset({3, 5, 6, 7, 8, 11, 13, 15, 16, 20, 24, 31, -32, -30, -25, -19, -17, -14, -9, -4}), frozenset({3, 4, 6, 7, 8, 11, 14, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -13, -9, -5}), frozenset({3, 4, 6, 7, 8, 11, 13, 15, 16, 20, 25, 31, -32, -30, -24, -19, -17, -14, -9, -5}), frozenset({3, 4, 6, 7, 9, 11, 14, 15, 16, 19, 24, 31, -32, -30, -25, -20, -17, -13, -8, -5}), frozenset({4, 5, 6, 7, 9, 11, 14, 15, 16, 20, 25, 31, -32, -30, -24, -19, -17, -13, -8, -3}), frozenset({3, 5, 6, 8, 9, 11, 13, 14, 16, 19, 25, 31, -32, -30, -24, -20, -17, -15, -7, -4}), frozenset({3, 5, 6, 8, 9, 11, 13, 15, 16, 19, 24, 31, -32, -30, -25, -20, -17, -14, -7, -4}), frozenset({4, 5, 6, 7, 9, 11, 14, 15, 17, 20, 25, 30, -32, -31, -24, -19, -16, -13, -8, -3}), frozenset({3, 4, 6, 7, 9, 11, 13, 15, 16, 20, 24, 31, -32, -30, -25, -19, -17, -14, -8, -5}), frozenset({3, 4, 6, 7, 8, 9, 13, 15, 17, 20, 24, 30, -32, -31, -25, -19, -16, -14, -11, -5}), frozenset({3, 5, 6, 8, 9, 11, 14, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -13, -7, -4}), frozenset({3, 4, 6, 7, 8, 9, 13, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -14, -11, -5}), frozenset({3, 5, 6, 7, 8, 11, 13, 15, 16, 19, 24, 31, -32, -30, -25, -20, -17, -14, -9, -4}), frozenset({3, 5, 6, 7, 9, 11, 13, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -14, -8, -4}), frozenset({4, 5, 6, 7, 8, 9, 14, 15, 17, 20, 25, 31, -32, -30, -24, -19, -16, -13, -11, -3}), frozenset({3, 5, 6, 7, 9, 11, 13, 15, 17, 19, 24, 30, -32, -31, -25, -20, -16, -14, -8, -4}), frozenset({4, 5, 6, 8, 9, 11, 14, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -13, -7, -3}), frozenset({3, 5, 6, 7, 9, 11, 13, 15, 17, 19, 24, 31, -32, -30, -25, -20, -16, -14, -8, -4}), frozenset({4, 5, 6, 8, 9, 11, 14, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -13, -7, -3}), frozenset({3, 5, 6, 7, 8, 11, 14, 15, 17, 19, 24, 31, -32, -30, -25, -20, -16, -13, -9, -4}), frozenset({3, 5, 6, 7, 9, 11, 14, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -13, -8, -4}), frozenset({3, 5, 6, 7, 8, 11, 13, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -14, -9, -4}), frozenset({4, 5, 6, 8, 9, 11, 13, 15, 17, 20, 25, 31, -32, -30, -24, -19, -16, -14, -7, -3}), frozenset({3, 5, 6, 7, 8, 9, 14, 15, 17, 19, 24, 30, -32, -31, -25, -20, -16, -13, -11, -4}), frozenset({4, 5, 6, 7, 9, 11, 13, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -14, -8, -3}), frozenset({3, 5, 6, 7, 9, 11, 14, 15, 17, 20, 24, 30, -32, -31, -25, -19, -16, -13, -8, -4}), frozenset({3, 4, 6, 7, 8, 11, 13, 15, 16, 20, 24, 30, -32, -31, -25, -19, -17, -14, -9, -5}), frozenset({3, 5, 6, 7, 8, 9, 13, 15, 16, 19, 24, 31, -32, -30, -25, -20, -17, -14, -11, -4}), frozenset({3, 4, 6, 7, 8, 11, 13, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -14, -9, -5}), frozenset({3, 4, 6, 7, 9, 11, 14, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -13, -8, -5}), frozenset({4, 5, 6, 7, 9, 11, 14, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -13, -8, -3}), frozenset({3, 5, 6, 7, 8, 9, 13, 14, 17, 19, 24, 30, -32, -31, -25, -20, -16, -15, -11, -4}), frozenset({3, 5, 6, 7, 8, 9, 14, 15, 17, 19, 25, 30, -32, -31, -24, -20, -16, -13, -11, -4}), frozenset({4, 5, 6, 8, 9, 11, 13, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -14, -7, -3}), frozenset({3, 5, 6, 7, 8, 11, 13, 15, 16, 19, 25, 31, -32, -30, -24, -20, -17, -14, -9, -4}), frozenset({3, 5, 6, 7, 8, 11, 13, 15, 17, 19, 24, 31, -32, -30, -25, -20, -16, -14, -9, -4}), frozenset({3, 4, 5, 7, 8, 11, 13, 15, 16, 20, 24, 31, -32, -30, -25, -19, -17, -14, -9, -6}), frozenset({3, 4, 6, 7, 9, 11, 13, 15, 17, 19, 24, 31, -32, -30, -25, -20, -16, -14, -8, -5}), frozenset({3, 5, 6, 7, 8, 11, 13, 15, 17, 19, 24, 30, -32, -31, -25, -20, -16, -14, -9, -4}), frozenset({3, 5, 6, 7, 8, 11, 13, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -14, -9, -4}), frozenset({3, 4, 6, 7, 8, 9, 14, 15, 17, 19, 25, 30, -32, -31, -24, -20, -16, -13, -11, -5}), frozenset({3, 4, 6, 7, 8, 11, 13, 14, 17, 19, 25, 31, -32, -30, -24, -20, -16, -15, -9, -5}), frozenset({3, 4, 6, 7, 8, 11, 13, 15, 17, 19, 24, 31, -32, -30, -25, -20, -16, -14, -9, -5}), frozenset({3, 5, 6, 7, 8, 9, 13, 15, 16, 20, 24, 31, -32, -30, -25, -19, -17, -14, -11, -4}), frozenset({3, 4, 5, 7, 9, 11, 13, 15, 16, 20, 24, 31, -32, -30, -25, -19, -17, -14, -8, -6}), frozenset({3, 5, 6, 7, 8, 9, 13, 14, 16, 19, 24, 30, -32, -31, -25, -20, -17, -15, -11, -4}), frozenset({3, 4, 5, 7, 8, 9, 13, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -14, -11, -6}), frozenset({3, 4, 6, 7, 9, 11, 14, 15, 17, 20, 25, 31, -32, -30, -24, -19, -16, -13, -8, -5}), frozenset({4, 5, 6, 7, 9, 11, 14, 15, 17, 19, 24, 31, -32, -30, -25, -20, -16, -13, -8, -3}), frozenset({3, 4, 6, 7, 8, 11, 13, 15, 16, 19, 24, 31, -32, -30, -25, -20, -17, -14, -9, -5}), frozenset({3, 5, 6, 8, 9, 11, 13, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -14, -7, -4}), frozenset({3, 5, 6, 7, 8, 9, 13, 15, 17, 19, 24, 31, -32, -30, -25, -20, -16, -14, -11, -4}), frozenset({3, 4, 5, 7, 8, 11, 13, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -14, -9, -6}), frozenset({3, 4, 5, 7, 8, 11, 13, 14, 16, 20, 24, 31, -32, -30, -25, -19, -17, -15, -9, -6}), frozenset({3, 5, 6, 7, 9, 11, 14, 15, 17, 20, 25, 30, -32, -31, -24, -19, -16, -13, -8, -4}), frozenset({3, 4, 6, 7, 8, 11, 14, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -13, -9, -5}), frozenset({3, 5, 6, 8, 9, 11, 14, 15, 17, 20, 25, 31, -32, -30, -24, -19, -16, -13, -7, -4})]
8308	itemsets left after W operation 	: [frozenset({33, -30, 5, 11, 15, 31}), frozenset({3, 4, 6, 8, 9, 10, 13, 14, 17, 19, 20, 22, 23, 25, 26, 29, -33, -28, -27, -24, -21, -18, -16, -12, -7, -2}), frozenset({2, 3, 6, 7, 8, 10, 12, 13, 16, 18, 19, 21, 22, 24, 26, 29, -33, -28, -27, -25, -23, -20, -17, -14, -9, -4}), frozenset({2, 3, 6, 7, 8, 10, 12, 13, 17, 19, 20, 22, 23, 24, 26, 29, -33, -28, -27, -25, -21, -18, -16, -14, -9, -4}), frozenset({3, 4, 6, 7, 9, 10, 13, 14, 17, 18, 19, 22, 23, 25, 26, 29, -33, -28, -27, -24, -21, -20, -16, -12, -8, -2}), frozenset({3, 4, 6, 7, 9, 10, 13, 14, 17, 18, 20, 22, 23, 25, 27, 29, -33, -28, -26, -24, -21, -19, -16, -12, -8, -2}), frozenset({3, 4, 6, 7, 8, 10, 13, 14, 17, 18, 20, 22, 23, 25, 27, 29, -33, -28, -26, -24, -21, -19, -16, -12, -9, -2}), frozenset({3, 4, 6, 8, 9, 10, 12, 14, 17, 18, 19, 22, 23, 25, 26, 29, -33, -28, -27, -24, -21, -20, -16, -13, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 29, -33, -28, -27, -25, -21, -19, -17, -13, -7, -2}), frozenset({3, 4, 6, 7, 9, 10, 13, 14, 16, 18, 20, 22, 23, 25, 27, 29, -33, -28, -26, -24, -21, -19, -17, -12, -8, -2}), frozenset({2, 3, 4, 7, 8, 10, 12, 13, 16, 18, 19, 22, 23, 24, 26, 28, -33, -29, -27, -25, -21, -20, -17, -14, -9, -6}), frozenset({3, 4, 6, 8, 9, 10, 12, 14, 17, 18, 20, 22, 23, 25, 26, 29, -33, -28, -27, -24, -21, -19, -16, -13, -7, -2}), frozenset({3, 4, 6, 7, 9, 10, 13, 14, 17, 19, 20, 22, 23, 24, 26, 29, -33, -28, -27, -25, -21, -18, -16, -12, -8, -2}), frozenset({3, 4, 6, 7, 9, 10, 13, 14, 17, 18, 19, 22, 23, 24, 26, 29, -33, -28, -27, -25, -21, -20, -16, -12, -8, -2}), frozenset({3, 4, 6, 8, 9, 10, 12, 14, 16, 19, 20, 22, 23, 25, 26, 29, -33, -28, -27, -24, -21, -18, -17, -13, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 12, 13, 17, 18, 20, 22, 23, 24, 26, 29, -33, -28, -27, -25, -21, -19, -16, -14, -7, -2}), frozenset({3, 4, 6, 7, 8, 9, 13, 14, 17, 18, 20, 22, 23, 24, 26, 29, -33, -28, -27, -25, -21, -19, -16, -12, -10, -2}), frozenset({2, 3, 4, 7, 8, 9, 12, 14, 17, 18, 20, 22, 23, 24, 26, 29, -33, -28, -27, -25, -21, -19, -16, -13, -10, -6}), frozenset({2, 3, 6, 7, 9, 10, 12, 14, 16, 18, 19, 21, 23, 25, 26, 29, -33, -28, -27, -24, -22, -20, -17, -13, -8, -4}), frozenset({2, 4, 6, 7, 8, 9, 12, 14, 17, 18, 19, 22, 23, 25, 26, 29, -33, -28, -27, -24, -21, -20, -16, -13, -10, -3}), frozenset({3, 4, 6, 7, 9, 10, 13, 14, 17, 18, 20, 22, 23, 25, 26, 29, -33, -28, -27, -24, -21, -19, -16, -12, -8, -2}), frozenset({3, 4, 6, 7, 9, 10, 13, 14, 17, 18, 19, 22, 23, 25, 27, 29, -33, -28, -26, -24, -21, -20, -16, -12, -8, -2}), frozenset({2, 3, 4, 7, 8, 10, 12, 13, 17, 18, 20, 22, 23, 24, 26, 28, -33, -29, -27, -25, -21, -19, -16, -14, -9, -6}), frozenset({2, 4, 6, 7, 9, 10, 12, 14, 16, 18, 20, 21, 22, 24, 26, 29, -33, -28, -27, -25, -23, -19, -17, -13, -8, -3}), frozenset({2, 3, 6, 7, 9, 10, 12, 14, 16, 18, 20, 21, 23, 24, 26, 29, -33, -28, -27, -25, -22, -19, -17, -13, -8, -4}), frozenset({2, 3, 6, 7, 8, 10, 12, 13, 16, 18, 19, 21, 22, 25, 26, 29, -33, -28, -27, -24, -23, -20, -17, -14, -9, -4}), frozenset({4, 6, 8, 9, 13, 17, 20, 24, -33, -32, -25, -19, -16, -14, -7, -3}), frozenset({4, 6, 7, 9, 14, 17, 20, 25, -33, -32, -24, -19, -16, -13, -8, -3}), frozenset({3, 4, 8, 9, 13, 17, 20, 24, -33, -32, -25, -19, -16, -14, -7, -6}), frozenset({4, 6, 7, 9, 14, 17, 19, 25, -33, -32, -24, -20, -16, -13, -8, -3}), frozenset({3, 6, 7, 8, 14, 17, 19, 25, -33, -32, -24, -20, -16, -13, -9, -4}), frozenset({3, 6, 7, 8, 14, 17, 20, 24, -33, -32, -25, -19, -16, -13, -9, -4}), frozenset({4, 6, 8, 9, 14, 17, 20, 25, -33, -32, -24, -19, -16, -13, -7, -3}), frozenset({3, 4, 7, 9, 13, 17, 19, 24, -33, -32, -25, -20, -16, -14, -8, -6}), frozenset({3, 6, 7, 9, 14, 17, 20, 25, -33, -32, -24, -19, -16, -13, -8, -4}), frozenset({3, 6, 7, 9, 14, 17, 19, 25, -33, -32, -24, -20, -16, -13, -8, -4}), frozenset({3, 6, 7, 8, 13, 16, 20, 24, -33, -32, -25, -19, -17, -14, -9, -4}), frozenset({4, 6, 7, 9, 14, 16, 20, 25, -33, -32, -24, -19, -17, -13, -8, -3}), frozenset({3, 6, 8, 9, 13, 16, 19, 24, -33, -32, -25, -20, -17, -14, -7, -4}), frozenset({3, 6, 8, 9, 14, 17, 19, 25, -33, -32, -24, -20, -16, -13, -7, -4}), frozenset({3, 6, 7, 8, 13, 16, 19, 24, -33, -32, -25, -20, -17, -14, -9, -4}), frozenset({3, 6, 7, 9, 13, 17, 19, 25, -33, -32, -24, -20, -16, -14, -8, -4}), frozenset({4, 6, 8, 9, 14, 17, 20, 24, -33, -32, -25, -19, -16, -13, -7, -3}), frozenset({3, 6, 7, 9, 13, 17, 19, 24, -33, -32, -25, -20, -16, -14, -8, -4}), frozenset({4, 6, 8, 9, 14, 17, 19, 25, -33, -32, -24, -20, -16, -13, -7, -3}), frozenset({3, 6, 7, 8, 14, 17, 19, 24, -33, -32, -25, -20, -16, -13, -9, -4}), frozenset({3, 6, 7, 9, 14, 17, 20, 24, -33, -32, -25, -19, -16, -13, -8, -4}), frozenset({3, 6, 7, 8, 13, 17, 20, 24, -33, -32, -25, -19, -16, -14, -9, -4}), frozenset({4, 6, 8, 9, 13, 17, 20, 25, -33, -32, -24, -19, -16, -14, -7, -3}), frozenset({4, 6, 7, 9, 13, 17, 19, 25, -33, -32, -24, -20, -16, -14, -8, -3}), frozenset({4, 6, 7, 9, 14, 17, 20, 24, -33, -32, -25, -19, -16, -13, -8, -3}), frozenset({4, 6, 8, 9, 13, 17, 19, 25, -33, -32, -24, -20, -16, -14, -7, -3}), frozenset({3, 6, 7, 8, 13, 16, 19, 25, -33, -32, -24, -20, -17, -14, -9, -4}), frozenset({3, 6, 7, 8, 13, 17, 19, 24, -33, -32, -25, -20, -16, -14, -9, -4}), frozenset({3, 4, 7, 8, 13, 16, 20, 24, -33, -32, -25, -19, -17, -14, -9, -6}), frozenset({3, 6, 7, 8, 13, 17, 19, 25, -33, -32, -24, -20, -16, -14, -9, -4}), frozenset({3, 4, 7, 9, 13, 16, 20, 24, -33, -32, -25, -19, -17, -14, -8, -6}), frozenset({4, 6, 7, 9, 14, 17, 19, 24, -33, -32, -25, -20, -16, -13, -8, -3}), frozenset({3, 6, 8, 9, 13, 17, 19, 25, -33, -32, -24, -20, -16, -14, -7, -4}), frozenset({3, 4, 7, 8, 13, 17, 20, 24, -33, -32, -25, -19, -16, -14, -9, -6}), frozenset({3, 6, 8, 9, 14, 17, 20, 25, -33, -32, -24, -19, -16, -13, -7, -4})]
6647	itemsets left after W operation 	: [frozenset({34, 3, 6, 7, 13}), frozenset({2, 4, 8, 9, 10, 12, 15, 16, 18, 19, 22, 23, 24, 26, 28, -34, 31, -30, -29, -27, -25, -21, -20, -17, -14, -11, -5}), frozenset({2, 5, 8, 9, 10, 12, 14, 16, 18, 19, 21, 22, 24, 26, 29, 30, -34, -31, -28, -27, -25, -23, -20, -17, -15, -11, -4}), frozenset({4, 5, 8, 10, 11, 14, 15, 17, 18, 19, 22, 23, 25, 27, 29, 30, -34, -31, -28, -26, -24, -21, -20, -16, -12, -9, -2}), frozenset({2, 4, 8, 9, 10, 12, 14, 16, 18, 19, 21, 22, 24, 26, 28, -34, 31, -30, -29, -27, -25, -23, -20, -17, -15, -11, -5}), frozenset({2, 5, 8, 9, 10, 12, 15, 16, 18, 19, 21, 23, 24, 26, 29, -34, 31, -30, -28, -27, -25, -22, -20, -17, -14, -11, -4}), frozenset({2, 5, 8, 9, 10, 12, 14, 16, 18, 19, 22, 23, 24, 26, 28, -34, 31, -30, -29, -27, -25, -21, -20, -17, -15, -11, -4}), frozenset({2, 5, 8, 9, 10, 12, 14, 16, 18, 19, 22, 23, 24, 26, 28, 30, -34, -31, -29, -27, -25, -21, -20, -17, -15, -11, -4}), frozenset({2, 4, 8, 9, 10, 12, 14, 16, 18, 19, 22, 23, 24, 26, 28, -34, 31, -30, -29, -27, -25, -21, -20, -17, -15, -11, -5}), frozenset({2, 5, 8, 9, 10, 12, 14, 16, 18, 20, 21, 22, 24, 26, 28, 30, -34, -31, -29, -27, -25, -23, -19, -17, -15, -11, -4}), frozenset({2, 4, 8, 9, 10, 12, 14, 17, 18, 19, 22, 23, 24, 26, 28, -34, 31, -30, -29, -27, -25, -21, -20, -16, -15, -11, -5}), frozenset({2, 5, 8, 9, 10, 12, 14, 16, 18, 20, 22, 23, 24, 26, 28, 30, -34, -31, -29, -27, -25, -21, -19, -17, -15, -11, -4}), frozenset({2, 4, 8, 9, 10, 12, 14, 16, 18, 20, 21, 22, 24, 26, 28, -34, 31, -30, -29, -27, -25, -23, -19, -17, -15, -11, -5}), frozenset({2, 4, 8, 9, 10, 12, 14, 16, 18, 20, 21, 23, 24, 26, 28, -34, 31, -30, -29, -27, -25, -22, -19, -17, -15, -11, -5}), frozenset({2, 4, 8, 10, 11, 12, 15, 16, 18, 19, 21, 22, 24, 26, 29, -34, 31, -30, -28, -27, -25, -23, -20, -17, -14, -9, -5}), frozenset({2, 4, 8, 9, 11, 12, 15, 17, 18, 19, 22, 23, 24, 26, 29, -34, 31, -30, -28, -27, -25, -21, -20, -16, -14, -10, -5}), frozenset({5, 8, 11, 14, 16, 19, 25, -34, 31, -32, -30, -24, -20, -17, -15, -9, -4}), frozenset({4, 8, 11, 15, 16, 20, 25, -34, 31, -32, -30, -24, -19, -17, -14, -9, -5}), frozenset({4, 9, 11, 15, 16, 20, 24, -34, 31, -32, -30, -25, -19, -17, -14, -8, -5}), frozenset({4, 8, 9, 15, 17, 20, 24, 30, -34, -32, -31, -25, -19, -16, -14, -11, -5}), frozenset({4, 8, 9, 15, 17, 20, 24, -34, 31, -32, -30, -25, -19, -16, -14, -11, -5}), frozenset({5, 9, 11, 15, 17, 19, 24, 30, -34, -32, -31, -25, -20, -16, -14, -8, -4}), frozenset({4, 8, 11, 15, 16, 20, 24, 30, -34, -32, -31, -25, -19, -17, -14, -9, -5}), frozenset({5, 8, 9, 15, 16, 19, 24, -34, 31, -32, -30, -25, -20, -17, -14, -11, -4}), frozenset({4, 8, 11, 15, 17, 20, 24, -34, 31, -32, -30, -25, -19, -16, -14, -9, -5}), frozenset({5, 8, 9, 14, 17, 19, 24, 30, -34, -32, -31, -25, -20, -16, -15, -11, -4}), frozenset({4, 9, 11, 15, 17, 19, 24, -34, 31, -32, -30, -25, -20, -16, -14, -8, -5}), frozenset({5, 8, 11, 15, 17, 19, 24, 30, -34, -32, -31, -25, -20, -16, -14, -9, -4}), frozenset({4, 8, 11, 14, 17, 19, 25, -34, 31, -32, -30, -24, -20, -16, -15, -9, -5}), frozenset({4, 8, 11, 15, 17, 19, 24, -34, 31, -32, -30, -25, -20, -16, -14, -9, -5}), frozenset({5, 8, 9, 15, 16, 20, 24, -34, 31, -32, -30, -25, -19, -17, -14, -11, -4}), frozenset({5, 8, 9, 14, 16, 19, 24, 30, -34, -32, -31, -25, -20, -17, -15, -11, -4}), frozenset({4, 8, 11, 15, 16, 19, 24, -34, 31, -32, -30, -25, -20, -17, -14, -9, -5}), frozenset({5, 8, 9, 15, 17, 19, 24, -34, 31, -32, -30, -25, -20, -16, -14, -11, -4}), frozenset({2, 8, 10, 12, 16, 18, 19, 21, 22, 24, 26, 29, -34, -33, -28, -27, -25, -23, -20, -17, -14, -9, -4}), frozenset({2, 8, 10, 12, 17, 19, 20, 22, 23, 24, 26, 29, -34, -33, -28, -27, -25, -21, -18, -16, -14, -9, -4}), frozenset({4, 9, 10, 14, 17, 18, 19, 22, 23, 25, 26, 29, -34, -33, -28, -27, -24, -21, -20, -16, -12, -8, -2}), frozenset({4, 9, 10, 14, 17, 18, 20, 22, 23, 25, 27, 29, -34, -33, -28, -26, -24, -21, -19, -16, -12, -8, -2}), frozenset({4, 8, 10, 14, 17, 18, 20, 22, 23, 25, 27, 29, -34, -33, -28, -26, -24, -21, -19, -16, -12, -9, -2}), frozenset({4, 9, 10, 14, 16, 18, 20, 22, 23, 25, 27, 29, -34, -33, -28, -26, -24, -21, -19, -17, -12, -8, -2}), frozenset({4, 9, 10, 14, 17, 19, 20, 22, 23, 24, 26, 29, -34, -33, -28, -27, -25, -21, -18, -16, -12, -8, -2}), frozenset({4, 9, 10, 14, 17, 18, 19, 22, 23, 24, 26, 29, -34, -33, -28, -27, -25, -21, -20, -16, -12, -8, -2}), frozenset({4, 8, 9, 14, 17, 18, 20, 22, 23, 24, 26, 29, -34, -33, -28, -27, -25, -21, -19, -16, -12, -10, -2}), frozenset({4, 9, 10, 14, 17, 18, 20, 22, 23, 25, 26, 29, -34, -33, -28, -27, -24, -21, -19, -16, -12, -8, -2}), frozenset({4, 9, 10, 14, 17, 18, 19, 22, 23, 25, 27, 29, -34, -33, -28, -26, -24, -21, -20, -16, -12, -8, -2}), frozenset({2, 8, 10, 12, 16, 18, 19, 21, 22, 25, 26, 29, -34, -33, -28, -27, -24, -23, -20, -17, -14, -9, -4}), frozenset({-32, -25, 8, -19, -17, 16, -14, 20, -9, 24, -4, -34, -33}), frozenset({-32, -25, 8, -20, -17, 16, -14, 19, -9, 24, -4, -34, -33}), frozenset({-32, -24, 9, -20, -16, 17, -14, 19, -8, 25, -4, -34, -33}), frozenset({-32, -25, 9, -20, -16, 17, -14, 19, -8, 24, -4, -34, -33}), frozenset({-32, -25, 8, -19, -16, 17, -14, 20, -9, 24, -4, -34, -33}), frozenset({-32, 8, -24, -20, -17, 16, -14, 19, -9, 25, -4, -34, -33}), frozenset({-32, -25, 8, -20, -16, 17, -14, 19, -9, 24, -4, -34, -33}), frozenset({-32, 8, -24, -20, -16, 17, -14, 19, -9, 25, -4, -34, -33})]
5477	itemsets left after W operation 	: [frozenset({2, 35, -27, -25, 8, 12, 18, 24, 26}), frozenset({3, 4, 5, 7, 9, 10, 13, 14, 16, 19, 21, 22, 28, -35, 31, -30, -29, -23, -20, -17, -15, -11, -6}), frozenset({4, 5, 6, 7, 9, 11, 13, 15, 17, 20, 22, 23, 29, 30, -35, -31, -28, -21, -19, -16, -14, -10, -3}), frozenset({3, 4, 7, 10, 13, 16, 19, 22, 23, 28, -35, -33, -29, -21, -20, -17, -14, -9, -6}), frozenset({3, 4, 7, 9, 14, 17, 20, 22, 23, 29, -35, -33, -28, -21, -19, -16, -13, -10, -6}), frozenset({3, 4, 7, 10, 13, 17, 20, 22, 23, 28, -35, -33, -29, -21, -19, -16, -14, -9, -6}), frozenset({4, 9, 10, 15, 16, 19, 22, 23, 28, -35, -34, 31, -30, -29, -21, -20, -17, -14, -11, -5}), frozenset({5, 9, 10, 14, 16, 19, 21, 22, 29, 30, -34, -35, -31, -28, -23, -20, -17, -15, -11, -4}), frozenset({4, 9, 10, 14, 16, 19, 21, 22, 28, -35, -34, 31, -30, -29, -23, -20, -17, -15, -11, -5}), frozenset({5, 9, 10, 15, 16, 19, 21, 23, 29, -34, 31, -35, -30, -28, -22, -20, -17, -14, -11, -4}), frozenset({5, 9, 10, 14, 16, 19, 22, 23, 28, -35, -34, 31, -30, -29, -21, -20, -17, -15, -11, -4}), frozenset({5, 9, 10, 14, 16, 19, 22, 23, 28, -35, 30, -34, -31, -29, -21, -20, -17, -15, -11, -4}), frozenset({4, 9, 10, 14, 16, 19, 22, 23, 28, -35, -34, 31, -30, -29, -21, -20, -17, -15, -11, -5}), frozenset({5, 9, 10, 14, 16, 20, 21, 22, 28, -35, 30, -34, -31, -29, -23, -19, -17, -15, -11, -4}), frozenset({4, 9, 10, 14, 17, 19, 22, 23, 28, -35, -34, 31, -30, -29, -21, -20, -16, -15, -11, -5}), frozenset({5, 9, 10, 14, 16, 20, 22, 23, 28, -35, 30, -34, -31, -29, -21, -19, -17, -15, -11, -4}), frozenset({4, 9, 10, 14, 16, 20, 21, 22, 28, -35, -34, 31, -30, -29, -23, -19, -17, -15, -11, -5}), frozenset({4, 9, 10, 14, 16, 20, 21, 23, 28, -35, -34, 31, -30, -29, -22, -19, -17, -15, -11, -5}), frozenset({4, 10, 11, 15, 16, 19, 21, 22, 29, -34, 31, -35, -30, -28, -23, -20, -17, -14, -9, -5}), frozenset({4, 9, 11, 15, 17, 19, 22, 23, 29, -34, 31, -35, -30, -28, -21, -20, -16, -14, -10, -5}), frozenset({10, 16, 19, 21, 22, -35, 29, -34, -33, -28, -23, -20, -17, -14, -9, -4})]
3149	itemsets left after W operation 	: [frozenset({-28, 36, -21, -16, 17, 22, 23, 29}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 18, 19, 25, 26, -36, 30, -31, -27, -24, -20, -13, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 13, 14, 19, 20, 25, 26, -36, -33, -27, -24, -18, -12, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 12, 14, 18, 19, 25, 26, -36, -33, -27, -24, -20, -13, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 12, 14, 18, 20, 25, 26, -36, -33, -27, -24, -19, -13, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 12, 13, 18, 20, 24, 26, -36, -33, -27, -25, -19, -14, -7, -2}), frozenset({2, 4, 6, 7, 8, 9, 12, 14, 18, 19, 25, 26, -36, -33, -27, -24, -20, -13, -10, -3}), frozenset({4, 5, 8, 10, 11, 14, 15, 18, 19, 25, 27, -36, 30, -34, -31, -26, -24, -20, -12, -9, -2}), frozenset({2, 8, 10, 12, 19, 20, 24, 26, -36, -34, -33, -27, -25, -18, -14, -9, -4}), frozenset({4, 9, 10, 14, 18, 19, 25, 26, -36, -34, -33, -27, -24, -20, -12, -8, -2}), frozenset({4, 9, 10, 14, 18, 20, 25, 27, -36, -34, -33, -26, -24, -19, -12, -8, -2}), frozenset({4, 8, 10, 14, 18, 20, 25, 27, -36, -34, -33, -26, -24, -19, -12, -9, -2}), frozenset({4, 9, 10, 14, 19, 20, 24, 26, -36, -34, -33, -27, -25, -18, -12, -8, -2}), frozenset({4, 9, 10, 14, 18, 19, 24, 26, -36, -34, -33, -27, -25, -20, -12, -8, -2}), frozenset({4, 8, 9, 14, 18, 20, 24, 26, -36, -34, -33, -27, -25, -19, -12, -10, -2}), frozenset({4, 9, 10, 14, 18, 20, 25, 26, -36, -34, -33, -27, -24, -19, -12, -8, -2}), frozenset({4, 9, 10, 14, 18, 19, 25, 27, -36, -34, -33, -26, -24, -20, -12, -8, -2}), frozenset({4, 5, 6, 7, 9, 11, 13, 15, 20, -36, -35, 30, -31, -19, -14, -10, -3}), frozenset({3, 4, 7, 9, -19, 14, -13, 20, -10, -6, -36, -35, -33}), frozenset({-30, 4, 9, 11, -20, 15, -14, 19, -10, -5, -36, -35, -34, 31})]
2167	itemsets left after W operation 	: [frozenset({9, 37, 6, 14}), frozenset({3, 5, 8, 11, 13, 17, 19, 24, -37, 31, -32, -30, -25, -20, -16, -15, -7, -4}), frozenset({3, 5, 8, 11, 15, 16, 20, 25, -37, 30, -32, -31, -24, -19, -17, -13, -7, -4}), frozenset({3, 5, 7, 11, 15, 17, 19, 25, -37, 30, -32, -31, -24, -20, -16, -13, -8, -4}), frozenset({3, 4, 7, 11, 15, 16, 19, 24, -37, 31, -32, -30, -25, -20, -17, -13, -8, -5}), frozenset({3, 5, 8, 11, 13, 16, 19, 25, -37, 31, -32, -30, -24, -20, -17, -15, -7, -4}), frozenset({4, 5, 7, 11, 15, 17, 20, 25, -37, 30, -32, -31, -24, -19, -16, -13, -8, -3}), frozenset({4, 5, 7, 8, 15, 17, 20, 25, -37, 31, -32, -30, -24, -19, -16, -13, -11, -3}), frozenset({3, 5, 7, 8, 15, 17, 19, 24, -37, 30, -32, -31, -25, -20, -16, -13, -11, -4}), frozenset({3, 5, 7, 11, 15, 17, 20, 24, -37, 30, -32, -31, -25, -19, -16, -13, -8, -4}), frozenset({3, 4, 7, 11, 15, 17, 19, 25, -37, 31, -32, -30, -24, -20, -16, -13, -8, -5}), frozenset({3, 5, 7, 8, 15, 17, 19, 25, -37, 30, -32, -31, -24, -20, -16, -13, -11, -4}), frozenset({3, 4, 7, 8, 15, 17, 19, 25, -37, 30, -32, -31, -24, -20, -16, -13, -11, -5}), frozenset({3, 4, 7, 11, 15, 17, 20, 25, -37, 31, -32, -30, -24, -19, -16, -13, -8, -5}), frozenset({3, 5, 7, 11, 15, 17, 20, 25, -37, 30, -32, -31, -24, -19, -16, -13, -8, -4}), frozenset({3, 4, 8, 10, 12, 16, 18, 20, 22, 23, 24, 26, -37, 29, -33, -28, -27, -25, -21, -19, -17, -13, -7, -2}), frozenset({3, 4, 8, 10, 12, 16, 19, 20, 22, 23, 25, 26, -37, 29, -33, -28, -27, -24, -21, -18, -17, -13, -7, -2}), frozenset({2, 3, 7, 10, 12, 16, 18, 19, 21, 23, 25, 26, -37, 29, -33, -28, -27, -24, -22, -20, -17, -13, -8, -4}), frozenset({2, 4, 7, 10, 12, 16, 18, 20, 21, 22, 24, 26, -37, 29, -33, -28, -27, -25, -23, -19, -17, -13, -8, -3}), frozenset({2, 3, 7, 10, 12, 16, 18, 20, 21, 23, 24, 26, -37, 29, -33, -28, -27, -25, -22, -19, -17, -13, -8, -4}), frozenset({-32, 4, 7, -24, -19, -16, 17, -13, 20, -8, 25, -37, -3, -33}), frozenset({-32, 4, 7, -24, -20, -16, 17, 19, -13, -8, 25, -37, -3, -33}), frozenset({-32, 4, 8, -24, -19, -16, 17, -7, -13, 20, 25, -37, -3, -33}), frozenset({-32, 3, 7, -24, -19, -16, 17, -13, 20, -8, 25, -37, -4, -33}), frozenset({-32, 3, 7, -24, -20, -16, 17, 19, -13, -8, 25, -37, -4, -33}), frozenset({-32, 4, 7, -24, -19, -17, 16, -13, 20, -8, 25, -37, -3, -33}), frozenset({-32, 3, 8, -24, -20, -16, 17, 19, -13, 25, -37, -4, -7, -33}), frozenset({-32, 4, -25, 8, -19, -16, 17, -13, 20, 24, -7, -37, -3, -33}), frozenset({-32, 4, 8, -24, -20, -16, 17, -7, 19, -13, 25, -37, -3, -33}), frozenset({-32, 3, 7, -25, -19, -16, 17, -13, 20, -8, 24, -37, -4, -33}), frozenset({-32, 4, 7, -25, -19, -16, 17, -13, 20, -8, 24, -37, -3, -33}), frozenset({-32, 4, 7, -25, -20, -16, 17, 19, -13, -8, 24, -37, -3, -33}), frozenset({-32, 3, 8, -24, -19, -16, 17, -13, 20, 25, -37, -4, -7, -33}), frozenset({3, 4, 5, 8, 10, 11, 12, 15, 18, 19, 25, 26, -37, -36, 30, -31, -27, -24, -20, -13, -7, -2}), frozenset({3, 4, 8, 10, 13, 19, 20, 25, 26, -37, -36, -33, -27, -24, -18, -12, -7, -2}), frozenset({3, 4, 8, 10, 12, 18, 19, 25, 26, -37, -36, -33, -27, -24, -20, -13, -7, -2}), frozenset({3, 4, 8, 10, 12, 18, 20, 25, 26, -37, -36, -33, -27, -24, -19, -13, -7, -2}), frozenset({2, 4, 7, 8, 12, 18, 19, 25, 26, -37, -36, -33, -27, -24, -20, -13, -10, -3})]
# of frequent itemsets	: 14
Time of DCI Closed		: 0.36606287956237793
13	itemsets left after W operation 	: [frozenset({-32, -16, 38, 17}), frozenset({4, 5, 6, 7, 8, 9, 13, 15, 19, 24, -38, 30, -31, -25, -20, -14, -11, -3}), frozenset({3, 4, 5, 7, 8, 9, 13, 15, 20, 24, -38, 30, -31, -25, -19, -14, -11, -6}), frozenset({3, 5, 6, 7, 8, 11, 14, 15, 19, 25, -38, 30, -31, -24, -20, -13, -9, -4}), frozenset({3, 4, 6, 7, 8, 11, 14, 15, 20, 24, -38, 31, -30, -25, -19, -13, -9, -5}), frozenset({3, 4, 5, 7, 8, 9, 13, 15, 20, 24, -38, 31, -30, -25, -19, -14, -11, -6}), frozenset({3, 4, 6, 7, 8, 11, 14, 15, 19, 25, -38, 31, -30, -24, -20, -13, -9, -5}), frozenset({4, 6, -25, 8, 9, 13, -19, -14, 20, 24, -7, -38, -3, -33}), frozenset({-6, 3, 4, -25, 8, 9, 13, -19, -14, 20, 24, -7, -38, -33}), frozenset({3, 6, 7, 8, -24, -20, 14, 19, -13, -9, 25, -38, -4, -33}), frozenset({3, 6, 7, 8, -25, -19, 14, -13, 20, -9, 24, -38, -4, -33}), frozenset({-6, 3, 4, 7, -25, 9, -20, 13, -14, 19, -8, 24, -38, -33}), frozenset({3, 6, 7, 8, -25, -20, 14, 19, -13, -9, 24, -38, -4, -33}), frozenset({4, 6, 8, 9, -24, 13, -19, -7, -14, 20, 25, -38, -3, -33}), frozenset({4, 6, 7, -24, 9, -20, 13, -14, 19, -8, 25, -38, -3, -33}), frozenset({4, 6, 8, 9, -24, -20, 13, -7, -14, 19, 25, -38, -3, -33}), frozenset({3, 6, 8, 9, -24, -20, 13, -14, 19, 25, -38, -4, -7, -33}), frozenset({-6, 3, 4, 7, 8, -25, 13, -19, -14, 20, -9, 24, -38, -33}), frozenset({-31, 4, -25, 8, 9, -19, 15, -14, 20, -11, 30, 24, -38, -5, -34}), frozenset({-30, 4, -25, 8, 9, -19, 15, -14, 20, -11, 24, -38, -5, -34, 31}), frozenset({-31, 5, -25, 9, 11, -20, 15, -14, 19, 30, -8, 24, -38, -4, -34}), frozenset({-30, 4, -25, 8, 11, -19, 15, -14, 20, -9, 24, -38, -5, -34, 31}), frozenset({-31, 5, -25, 8, 9, -20, 14, -15, 19, -11, 30, 24, -38, -4, -34}), frozenset({-30, 4, -25, 9, 11, -20, 15, -14, 19, -8, 24, -38, -5, -34, 31}), frozenset({-31, 5, -25, 8, 11, -20, 15, -14, 19, 30, -9, 24, -38, -4, -34}), frozenset({-30, 4, 8, -24, 11, -20, 14, -15, 19, -9, 25, -38, -5, -34, 31}), frozenset({-30, 4, -25, 8, 11, -20, 15, -14, 19, -9, 24, -38, -5, -34, 31}), frozenset({-30, 5, -25, 8, 9, -20, 15, -14, 19, -11, 24, -38, -4, -34, 31}), frozenset({-24, 9, -20, -14, 19, -8, 25, -38, -4, -34, -33}), frozenset({-25, 9, -20, -14, 19, -8, 24, -38, -4, -34, -33}), frozenset({-25, 8, -19, -14, 20, -9, 24, -38, -4, -34, -33}), frozenset({-25, 8, -20, -14, 19, -9, 24, -38, -4, -34, -33}), frozenset({8, -24, -20, -14, 19, -9, 25, -38, -4, -34, -33}), frozenset({3, 5, 8, 11, 13, 19, 24, -38, -37, 31, -30, -25, -20, -15, -7, -4}), frozenset({3, 5, 7, 11, 15, 19, 25, -38, -37, 30, -31, -24, -20, -13, -8, -4}), frozenset({4, 5, 7, 11, 15, 20, 25, -38, -37, 30, -31, -24, -19, -13, -8, -3}), frozenset({4, 5, 7, 8, 15, 20, 25, -38, -37, 31, -30, -24, -19, -13, -11, -3}), frozenset({3, 5, 7, 8, 15, 19, 24, -38, -37, 30, -31, -25, -20, -13, -11, -4}), frozenset({3, 5, 7, 11, 15, 20, 24, -38, -37, 30, -31, -25, -19, -13, -8, -4}), frozenset({3, 4, 7, 11, 15, 19, 25, -38, -37, 31, -30, -24, -20, -13, -8, -5}), frozenset({3, 5, 7, 8, 15, 19, 25, -38, -37, 30, -31, -24, -20, -13, -11, -4}), frozenset({3, 4, 7, 8, 15, 19, 25, -38, -37, 30, -31, -24, -20, -13, -11, -5}), frozenset({3, 4, 7, 11, 15, 20, 25, -38, -37, 31, -30, -24, -19, -13, -8, -5}), frozenset({3, 5, 7, 11, 15, 20, 25, -38, -37, 30, -31, -24, -19, -13, -8, -4}), frozenset({4, 7, -24, -19, -13, 20, -8, 25, -38, -37, -3, -33}), frozenset({4, 7, -24, -20, 19, -13, -8, 25, -38, -37, -3, -33}), frozenset({4, 8, -24, -19, -13, 20, -7, -38, -37, -3, 25, -33}), frozenset({3, 7, -24, -19, -13, 20, -8, 25, -38, -37, -4, -33}), frozenset({3, 7, -24, -20, 19, -13, -8, 25, -38, -37, -4, -33}), frozenset({3, 8, -24, -20, 19, -13, 25, -38, -37, -4, -7, -33}), frozenset({4, -25, 8, -19, -13, 20, 24, -7, -38, -37, -3, -33}), frozenset({4, 8, -24, -20, 19, -13, -7, -38, -37, -3, 25, -33}), frozenset({3, -25, 7, -19, -13, 20, -8, 24, -38, -37, -4, -33}), frozenset({4, -25, 7, -19, -13, 20, -8, 24, -38, -37, -3, -33}), frozenset({4, -25, 7, -20, 19, -13, -8, 24, -38, -37, -3, -33}), frozenset({3, 8, -24, -19, -13, 20, 25, -38, -37, -4, -7, -33})]
12	itemsets left after W operation 	: [frozenset({19, -20, 39}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 18, 22, 23, 25, 26, -39, 29, 30, -31, -28, -27, -24, -21, -17, -14, -7, -2}), frozenset({-32, 3, 6, -25, 8, 9, 13, -17, 16, -14, 24, -39, -4, -7, -33}), frozenset({5, 8, 11, 14, 16, -39, 25, -34, 31, -32, -30, -24, -17, -15, -9, -4}), frozenset({5, 8, 9, 15, 16, 24, -39, -34, 31, -32, -30, -25, -17, -14, -11, -4}), frozenset({5, 8, 9, 14, 16, 24, -39, -34, 30, -32, -31, -25, -17, -15, -11, -4}), frozenset({4, 8, 11, 15, 16, 24, -39, -34, 31, -32, -30, -25, -17, -14, -9, -5}), frozenset({2, 8, 10, 12, 16, 18, 21, 22, 25, 26, -39, 29, -34, -33, -28, -27, -24, -23, -17, -14, -9, -4}), frozenset({-32, -25, 8, -17, 16, -14, -9, 24, -39, -4, -34, -33}), frozenset({-32, 8, -24, -17, 16, -14, -34, -9, -39, -4, 25, -33}), frozenset({3, 4, 5, 7, 9, 10, 13, 14, 16, 21, 22, -39, 28, -35, 31, -30, -29, -23, -17, -15, -11, -6}), frozenset({3, 4, 7, 10, 13, 16, 22, 23, -39, 28, -35, -33, -29, -21, -17, -14, -9, -6}), frozenset({4, 9, 10, 15, 16, 22, 23, -39, 28, -35, -34, 31, -30, -29, -21, -17, -14, -11, -5}), frozenset({5, 9, 10, 14, 16, 21, 22, -39, 29, 30, -34, -35, -31, -28, -23, -17, -15, -11, -4}), frozenset({4, 9, 10, 14, 16, 21, 22, -39, 28, -35, -34, 31, -30, -29, -23, -17, -15, -11, -5}), frozenset({5, 9, 10, 15, 16, 21, 23, -39, 29, -34, 31, -35, -30, -28, -22, -17, -14, -11, -4}), frozenset({5, 9, 10, 14, 16, 22, 23, -39, 28, -35, -34, 31, -30, -29, -21, -17, -15, -11, -4}), frozenset({5, 9, 10, 14, 16, 22, 23, -39, 28, -35, 30, -34, -31, -29, -21, -17, -15, -11, -4}), frozenset({4, 9, 10, 14, 16, 22, 23, -39, 28, -35, -34, 31, -30, -29, -21, -17, -15, -11, -5}), frozenset({4, 9, 10, 14, 17, 22, 23, -39, 28, -35, -34, 31, -30, -29, -21, -16, -15, -11, -5}), frozenset({4, 10, 11, 15, 16, 21, 22, -39, 29, -34, 31, -35, -30, -28, -23, -17, -14, -9, -5}), frozenset({-28, -23, 10, -17, 16, -35, -14, 21, 22, -9, -39, -4, 29, -34, -33}), frozenset({4, 5, 8, 10, 11, 14, 15, 18, 25, -39, 27, -36, 30, -34, -31, -26, -24, -12, -9, -2}), frozenset({4, 9, 10, 14, 18, -39, 25, 26, -36, -34, -33, -27, -24, -12, -8, -2}), frozenset({4, 9, 10, 14, 18, 24, -39, 26, -36, -34, -33, -27, -25, -12, -8, -2}), frozenset({4, 9, 10, 14, 18, -39, 25, 27, -36, -34, -33, -26, -24, -12, -8, -2}), frozenset({-30, 4, 9, 11, 15, -14, -10, -39, -5, -36, -35, -34, 31}), frozenset({3, 4, 7, 11, 15, 16, 24, -39, -37, 31, -32, -30, -25, -17, -13, -8, -5}), frozenset({3, 5, 8, 11, 13, 16, 25, -39, -37, 31, -32, -30, -24, -17, -15, -7, -4}), frozenset({2, 3, 7, 10, 12, 16, 18, 21, 23, 25, 26, -37, -39, 29, -33, -28, -27, -24, -22, -17, -13, -8, -4}), frozenset({3, 4, 5, 8, 10, 11, 12, 15, 18, 25, 26, -37, -36, -39, 30, -31, -27, -24, -13, -7, -2}), frozenset({3, 4, 8, 10, 12, 18, 25, 26, -37, -36, -39, -33, -27, -24, -13, -7, -2}), frozenset({2, 4, 7, 8, 12, 18, 25, 26, -37, -36, -39, -33, -27, -24, -13, -10, -3}), frozenset({4, 5, 6, 7, 8, 9, 13, 15, 24, -39, -38, 30, -31, -25, -14, -11, -3}), frozenset({3, 5, 6, 7, 8, 11, 14, 15, 25, -38, -39, 30, -31, -24, -13, -9, -4}), frozenset({3, 4, 6, 7, 8, 11, 14, 15, 25, -38, -39, 31, -30, -24, -13, -9, -5}), frozenset({3, 6, 7, 8, -24, 14, -13, -9, -39, -38, -4, 25, -33}), frozenset({-6, 3, 4, 7, -25, 9, 13, -14, -8, 24, -38, -39, -33}), frozenset({3, 6, 7, 8, -25, 14, -13, -9, 24, -39, -38, -4, -33}), frozenset({4, 6, 7, -24, 9, 13, -14, -8, 25, -38, -39, -3, -33}), frozenset({4, 6, 8, 9, -24, 13, -14, -7, -38, -39, -3, 25, -33}), frozenset({3, 6, 8, 9, -24, 13, -14, -39, -38, -4, -7, 25, -33}), frozenset({-31, 5, -25, 9, 11, 15, -14, 30, 24, -8, -39, -38, -4, -34}), frozenset({-31, 5, -25, 8, 9, 14, -15, -11, 30, 24, -39, -38, -4, -34}), frozenset({-30, 4, -25, 9, 11, 15, -14, -8, 24, -38, -5, -39, -34, 31}), frozenset({-31, 5, -25, 8, 11, 15, -14, 30, -9, 24, -39, -38, -4, -34}), frozenset({-30, 4, 8, -24, 11, 14, -15, -9, 25, -38, -5, -39, -34, 31}), frozenset({-30, 4, -25, 8, 11, 15, -14, -9, 24, -39, -38, -5, -34, 31}), frozenset({-30, 5, -25, 8, 9, 15, -14, -11, 24, -39, -38, -4, -34, 31}), frozenset({-24, 9, -14, -34, -8, -39, -38, -4, 25, -33}), frozenset({-25, 9, -14, -34, -8, -39, -38, -4, 24, -33}), frozenset({-25, 8, -14, -9, 24, -39, -38, -4, -34, -33}), frozenset({8, -24, -14, -34, -9, -39, -38, -4, 25, -33}), frozenset({-30, 3, 5, -25, 8, 11, 13, -15, 24, -39, -38, -37, -4, -7, 31}), frozenset({-31, 3, 5, 7, -24, 11, 15, -13, 30, -8, -39, -38, -37, -4, 25}), frozenset({-31, 3, 5, 7, 8, -25, 15, -13, -11, 24, -39, -38, -37, -4, 30}), frozenset({-30, 3, 4, -37, 7, -24, 11, 15, -13, -8, 25, -38, -5, -39, 31}), frozenset({-31, 3, 5, 7, 8, -24, 15, -13, -11, 30, -39, -38, -37, -4, 25}), frozenset({-31, 3, 4, -37, 7, 8, -24, 15, -13, -11, 25, -38, -5, -39, 30}), frozenset({4, 7, -24, -13, -8, 25, -38, -37, -39, -3, -33}), frozenset({3, 7, -24, -13, -8, -39, -38, -37, -4, 25, -33}), frozenset({3, 8, -24, -13, -39, -38, -37, -4, -7, 25, -33}), frozenset({4, 8, -24, -13, -7, -38, -37, -39, -3, 25, -33}), frozenset({4, -25, 7, -13, -8, 24, -38, -37, -39, -3, -33})]
11	itemsets left after W operation 	: [frozenset({40, 20, -19}), frozenset({2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 18, 21, 22, -40, 25, 26, 29, 30, -31, -28, -27, -24, -23, -17, -14, -10, -3}), frozenset({3, 4, 6, 7, 8, 11, 14, 15, 16, 24, -40, 31, -32, -30, -25, -17, -13, -9, -5}), frozenset({3, 4, 5, 7, 8, 11, 13, 14, 16, 24, -40, 31, -32, -30, -25, -17, -15, -9, -6}), frozenset({-32, 3, 4, 7, 8, -25, 13, -17, 16, -14, -9, -40, 24, -6, -33}), frozenset({-32, 3, 4, 7, -25, 9, 13, -17, 16, -14, -40, -8, 24, -6, -33}), frozenset({4, 8, 11, 15, 16, -40, 25, -34, 31, -32, -30, -24, -17, -14, -9, -5}), frozenset({4, 9, 11, 15, 16, -40, 24, -34, 31, -32, -30, -25, -17, -14, -8, -5}), frozenset({4, 8, 11, 15, 16, -40, 24, -34, 30, -32, -31, -25, -17, -14, -9, -5}), frozenset({5, 8, 9, 15, 16, -40, 24, -34, 31, -32, -30, -25, -17, -14, -11, -4}), frozenset({4, 9, 10, 14, 16, 18, 22, 23, -40, 25, 27, 29, -34, -33, -28, -26, -24, -21, -17, -12, -8, -2}), frozenset({-32, -25, 8, -17, 16, -14, -9, -40, 24, -4, -34, -33}), frozenset({3, 4, 7, 10, 13, 17, 22, 23, -40, 28, -35, -33, -29, -21, -16, -14, -9, -6}), frozenset({5, 9, 10, 14, 16, 21, 22, -40, 28, -35, 30, -34, -31, -29, -23, -17, -15, -11, -4}), frozenset({5, 9, 10, 14, 16, 22, 23, -40, 28, -35, 30, -34, -31, -29, -21, -17, -15, -11, -4}), frozenset({4, 9, 10, 14, 16, 21, 22, -40, 28, -35, -34, 31, -30, -29, -23, -17, -15, -11, -5}), frozenset({4, 9, 10, 14, 16, 21, 23, -40, 28, -35, -34, 31, -30, -29, -22, -17, -15, -11, -5}), frozenset({3, 4, 6, 8, 9, 10, 12, 13, 18, 24, -40, 26, -36, -33, -27, -25, -14, -7, -2}), frozenset({4, 9, 10, 14, 18, -40, 25, 27, -36, -34, -33, -26, -24, -12, -8, -2}), frozenset({4, 8, 10, 14, 18, -40, 25, 27, -36, -34, -33, -26, -24, -12, -9, -2}), frozenset({4, 8, 9, 14, 18, -40, 24, 26, -36, -34, -33, -27, -25, -12, -10, -2}), frozenset({4, 9, 10, 14, 18, -40, 25, 26, -36, -34, -33, -27, -24, -12, -8, -2}), frozenset({4, 5, 6, 7, 9, 11, 13, 15, -40, -36, -35, 30, -31, -14, -10, -3}), frozenset({3, 4, 7, 9, 14, -13, -10, -40, -6, -36, -35, -33}), frozenset({3, 5, 8, 11, 15, 16, -40, 25, -37, 30, -32, -31, -24, -17, -13, -7, -4}), frozenset({3, 4, 8, 10, 12, 16, 18, 22, 23, 24, -40, 26, -37, 29, -33, -28, -27, -25, -21, -17, -13, -7, -2}), frozenset({2, 4, 7, 10, 12, 16, 18, 21, 22, 24, -40, 26, -37, 29, -33, -28, -27, -25, -23, -17, -13, -8, -3}), frozenset({2, 3, 7, 10, 12, 16, 18, 21, 23, 24, -40, 26, -37, 29, -33, -28, -27, -25, -22, -17, -13, -8, -4}), frozenset({-32, 4, 7, -24, -8, -17, 16, -13, -40, 25, -37, -3, -33}), frozenset({3, 4, 8, 10, 12, 18, -40, 25, 26, -37, -36, -33, -27, -24, -13, -7, -2}), frozenset({3, 4, 5, 7, 8, 9, 13, 15, 24, -40, -38, 30, -31, -25, -14, -11, -6}), frozenset({3, 4, 6, 7, 8, 11, 14, 15, 24, -40, -38, 31, -30, -25, -13, -9, -5}), frozenset({3, 4, 5, 7, 8, 9, 13, 15, 24, -40, -38, 31, -30, -25, -14, -11, -6}), frozenset({4, 6, -25, 8, 9, 13, -3, -14, -40, 24, -38, -7, -33}), frozenset({-6, 3, 4, -25, 8, 9, 13, -14, -40, 24, -38, -7, -33}), frozenset({3, 6, 7, 8, -25, 14, -13, -9, -40, 24, -38, -4, -33}), frozenset({4, 6, 8, 9, -24, 13, -14, -40, -7, -38, -3, 25, -33}), frozenset({-6, 3, 4, 7, 8, -25, 13, -14, -9, -40, 24, -38, -33}), frozenset({-31, 4, -25, 8, 9, 15, -14, -11, 30, -40, 24, -38, -5, -34}), frozenset({-30, 4, -25, 8, 9, 15, -14, -11, -40, 24, -38, -5, -34, 31}), frozenset({-30, 4, -25, 8, 11, 15, -14, -9, -40, 24, -38, -5, -34, 31}), frozenset({-25, 8, -14, -9, -40, 24, -38, -4, -34, -33}), frozenset({-31, 4, 5, 7, -24, -8, 11, 15, -13, -40, 25, -38, -37, -3, 30}), frozenset({-30, 4, 5, 7, 8, -24, 15, -13, -11, -40, 25, -38, -37, -3, 31}), frozenset({-31, 3, 5, 7, -25, 11, 15, -13, -40, -8, 24, -38, -37, -4, 30}), frozenset({-30, 3, 4, -37, 7, -24, -8, 11, 15, -13, -40, 25, -38, -5, 31}), frozenset({-31, 3, 5, 7, -24, -8, 11, 15, -13, -40, 25, -38, -37, -4, 30}), frozenset({4, 7, -24, -8, -13, -40, 25, -38, -37, -3, -33}), frozenset({4, 8, -24, -13, -40, -7, -38, -37, -3, 25, -33}), frozenset({3, 7, -24, -8, -13, -40, 25, -38, -37, -4, -33}), frozenset({4, -25, 8, -3, -13, -40, 24, -38, -37, -7, -33}), frozenset({3, -25, 7, -8, -13, -40, 24, -38, -37, -4, -33}), frozenset({4, -25, 7, -8, -13, -40, 24, -38, -37, -3, -33}), frozenset({3, 8, -24, -13, -40, 25, -38, -37, -4, -7, -33})]
10	itemsets left after W operation 	: [frozenset({24, 41, -25}), frozenset({2, 35, -27, 8, 12, 18, -41, 26}), frozenset({2, 8, 10, 12, 19, 20, -41, 26, -36, -34, -33, -27, -18, -14, -9, -4}), frozenset({4, 9, 10, 14, 19, 20, -41, 26, -36, -34, -33, -27, -18, -12, -8, -2}), frozenset({-32, 3, 6, 8, 9, 13, -17, 16, -14, -41, -39, -4, -7, -33}), frozenset({-32, -30, 5, 8, 9, 15, 16, -17, -14, -11, -41, -39, -4, -34, 31}), frozenset({-32, -31, 5, 8, 9, 14, -17, 16, -15, -11, -34, -41, -39, -4, 30}), frozenset({-32, -30, 4, 8, 11, 15, 16, -17, -14, -9, -41, -39, -5, -34, 31}), frozenset({-32, 8, -17, 16, -14, -9, -41, -39, -4, -34, -33}), frozenset({4, -27, 9, 10, 14, 18, -12, -34, -41, -8, -39, 26, -36, -2, -33}), frozenset({3, 4, 7, 11, 15, 16, -41, -39, -37, 31, -32, -30, -17, -13, -8, -5}), frozenset({4, 5, 6, 7, 8, 9, 13, 15, -41, -39, -38, 30, -31, -14, -11, -3}), frozenset({-6, 3, 4, 7, 9, 13, -14, -41, -8, -39, -38, -33}), frozenset({3, 6, 7, 8, 14, -13, -9, -41, -39, -38, -4, -33}), frozenset({-31, 5, 9, 11, 15, -14, 30, -41, -8, -39, -38, -4, -34}), frozenset({-31, 5, 8, 9, 14, -15, 30, -11, -41, -39, -38, -4, -34}), frozenset({-30, 4, 9, 11, 15, -14, -41, -8, -39, -38, -5, -34, 31}), frozenset({-31, 5, 8, 11, 15, -14, -9, 30, -41, -39, -38, -4, -34}), frozenset({-30, 4, 8, 11, 15, -14, -9, -41, -39, -38, -5, -34, 31}), frozenset({-30, 5, 8, 9, 15, -14, -11, -41, -39, -38, -4, -34, 31}), frozenset({9, -14, -41, -8, -39, -38, -4, -34, -33}), frozenset({8, -14, -9, -41, -39, -38, -4, -34, -33}), frozenset({-30, 3, 5, 8, 11, 13, -15, -41, -39, -38, -37, -4, -7, 31}), frozenset({-31, 3, 5, 7, 8, 15, -13, -11, -41, -39, -38, -37, -4, 30}), frozenset({4, 7, -13, -41, -8, -39, -38, -37, -3, -33}), frozenset({3, 4, 6, 7, 8, 11, 14, 15, 16, -41, -40, 31, -32, -30, -17, -13, -9, -5}), frozenset({3, 4, 5, 7, 8, 11, 13, 14, 16, -41, -40, 31, -32, -30, -17, -15, -9, -6}), frozenset({-32, 3, 4, 7, 8, 13, -17, 16, -14, -9, -41, -40, -6, -33}), frozenset({-32, 3, 4, 7, 9, 13, -17, 16, -14, -40, -41, -8, -6, -33}), frozenset({-32, -30, 4, 9, 11, 15, 16, -17, -14, -40, -41, -8, -5, -34, 31}), frozenset({-32, -31, 4, 8, 11, 15, 16, -17, -14, -41, -34, -9, -40, -5, 30}), frozenset({-32, -30, 5, 8, 9, 15, 16, -17, -14, -11, -41, -40, -4, -34, 31}), frozenset({-32, 8, -17, 16, -14, -9, -41, -40, -4, -34, -33}), frozenset({3, 4, 6, 8, 9, 10, 12, 13, 18, -41, -40, 26, -36, -33, -27, -14, -7, -2}), frozenset({4, -27, 8, 9, 14, 18, -12, -34, -10, -41, -40, 26, -36, -2, -33}), frozenset({3, 4, 8, 10, 12, 16, 18, 22, 23, -40, -41, 26, -37, 29, -33, -28, -27, -21, -17, -13, -7, -2}), frozenset({2, 4, 7, 10, 12, 16, 18, 21, 22, -41, -40, 26, -37, 29, -33, -28, -27, -23, -17, -13, -8, -3}), frozenset({2, 3, 7, 10, 12, 16, 18, 21, 23, -40, -41, 26, -37, 29, -33, -28, -27, -22, -17, -13, -8, -4}), frozenset({3, 4, 5, 7, 8, 9, 13, 15, -41, -40, -38, 30, -31, -14, -11, -6}), frozenset({3, 4, 6, 7, 8, 11, 14, 15, -41, -40, -38, 31, -30, -13, -9, -5}), frozenset({3, 4, 5, 7, 8, 9, 13, 15, -41, -40, -38, 31, -30, -14, -11, -6}), frozenset({4, 6, 8, 9, 13, -14, -41, -40, -7, -38, -3, -33}), frozenset({-6, 3, 4, 8, 9, 13, -14, -41, -40, -7, -38, -33}), frozenset({3, 6, 7, 8, 14, -13, -9, -41, -40, -38, -4, -33}), frozenset({-6, 3, 4, 7, 8, 13, -14, -9, -41, -40, -38, -33}), frozenset({-31, 4, 8, 9, 15, -14, 30, -11, -41, -40, -38, -5, -34}), frozenset({-30, 4, 8, 9, 15, -14, -11, -41, -40, -38, -5, -34, 31}), frozenset({-30, 4, 8, 11, 15, -14, -9, -41, -40, -38, -5, -34, 31}), frozenset({8, -14, -9, -41, -40, -38, -4, -34, -33}), frozenset({-31, 3, 5, 7, 11, 15, -13, -40, -41, -8, -38, -37, -4, 30}), frozenset({4, 8, -13, -41, -40, -7, -38, -37, -3, -33}), frozenset({3, 7, -8, -13, -41, -40, -38, -37, -4, -33}), frozenset({4, 7, -8, -13, -41, -40, -38, -37, -3, -33})]
Initial DL				: 157333.08110911513
Final DL				: 24757.51928121354
Compression (wrt me)	: 0.8426426336617442
Operator Counters		: {'D': 0, 'W': 10, 'V': 0, 'S': 0, 'R': 0, 'T': 0}
Misle Learning Runtime	: 129.5581500530243


Max Score = 0.5789682539682539 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 3])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]
Incorrect Prediction at tie level: 0

Max Score = 0.5789682539682539 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 24])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 31, 19])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 3])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 12, 3])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 9, 30])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([11])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 2])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 13])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 8, 3])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.26785714285714285 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 12, 17])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.3111111111111111 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 30])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([3])
Tie Breaking: Level 3

Max Score = 0.37896825396825395 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 20])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.26785714285714285 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 27, 5])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.5789682539682539 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 31])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.26785714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 18])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: 0

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 12])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([13])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 7])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 13])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.3111111111111111 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([14])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 24])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.26785714285714285 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([8])
Tie Breaking: Level 3

Max Score = 0.5789682539682539 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 8])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.26785714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 7])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 12])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 31, 24])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 20])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.37896825396825395 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 8])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.26785714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 2])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 5])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.37896825396825395 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 17])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.45396825396825397 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 14])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 24])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.1111111111111111 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 14, 6])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([18, 9])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 20, 13])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.26785714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 2])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.26785714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 2])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.37896825396825395 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 31])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 2])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 31])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 24])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 18])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([30])
Tie Breaking: Level 3

Max Score = 0.26785714285714285 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([3])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 11])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([3])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 18, 2])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.26785714285714285 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.25396825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking: Level 3

Max Score = 0.26785714285714285 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 19])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 9])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.5789682539682539 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 7])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 16])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 17])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([16])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([18, 19, 7])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 13])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([30])
Tie Breaking: Level 3

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([20])
Tie Breaking: Level 3

Max Score = 0.25396825396825395 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 4])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([13])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 13])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking: Level 3

Max Score = 0.26785714285714285 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 19, 16])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 7])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.5789682539682539 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 13])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.37896825396825395 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 30])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 3])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.26785714285714285 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.25396825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking: Level 3

Max Score = 0.5789682539682539 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 16])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 13])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 30, 31])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.26785714285714285 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 16, 12])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.5789682539682539 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([3])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([30])
Tie Breaking: Level 3

Max Score = 0.5789682539682539 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 3])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 19, 5])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 7])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.5789682539682539 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([25])
Tie Breaking: Level 3

Max Score = 0.2 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 29, 16])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.5789682539682539 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([30])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 4])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: 0

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 2])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 18])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.26785714285714285 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 25, 24])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.5789682539682539 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([3])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([12])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.5789682539682539 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([13])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([13])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([14])
Tie Breaking: Level 3

Max Score = 0.26785714285714285 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([30])
Tie Breaking: Level 3

Max Score = 0.45396825396825397 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 20])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([20])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 12, 8])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.37896825396825395 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 30])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: 0

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 20])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.45396825396825397 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 19])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.5789682539682539 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 19])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.5789682539682539 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 16])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([8])
Tie Breaking: Level 3

Max Score = 0.5789682539682539 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 30])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([3])
Tie Breaking: Level 3

Max Score = 0.25396825396825395 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 8, 4])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking: Level 3

Max Score = 0.5789682539682539 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([13])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.25396825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([8])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([14])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 14])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.37896825396825395 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 19])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 24])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 20, 2])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 12])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 13])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.26785714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 3])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.37896825396825395 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 13, 3])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.26785714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 4])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.5789682539682539 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([3])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.5789682539682539 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 25])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 14, 3])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([20])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 17])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.2 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 21, 6])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 30])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 17, 16])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.25396825396825395 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 17])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([8])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 24])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.37896825396825395 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 16])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 5])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([12])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 8])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([8])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 20, 12])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 19])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 2])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 7])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 2])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.3111111111111111 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 11])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([30])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.2 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 21])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([25])
Tie Breaking: Level 3

Max Score = 0.2361111111111111 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 13])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.37896825396825395 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 19, 4])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 31])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.5789682539682539 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([25])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 14, 8])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 30])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 25])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.125 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 24, 31])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([30])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 12])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 25])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.5789682539682539 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 19])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.3111111111111111 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([15])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([25])
Tie Breaking: Level 3

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([20])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([16])
Tie Breaking: Level 3

Max Score = 0.2 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 19, 31])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.26785714285714285 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 20, 19])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 24, 14])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.26785714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 13])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.1111111111111111 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 19, 11])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 14])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 14, 13])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.2 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 15])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([5])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([13])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.37896825396825395 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([13])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.26785714285714285 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([9])
Tie Breaking: Level 3

Max Score = 0.325 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 17])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 25, 16])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([13])
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking: Level 3

Max Score = 0.26785714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 17])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 12])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.37896825396825395 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 8])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 17])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 8])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.37896825396825395 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 31, 17])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.26785714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([18, 31])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 13])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 2.167583793517054 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 26, 8])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.37896825396825395 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 8])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.4361111111111111 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 30])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 13])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([30])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 24])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([3])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.46785714285714286 tied among 2/8 candidates.
Min Score = 2.167583793517054 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([13])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 2.167583793517054 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 24])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.14957264957264957 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 31])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.6174297924297925 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 26, 28])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.038461538461538464 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 20])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.3634615384615385 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([20])
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.14957264957264957 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([20])
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.14957264957264957 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 16])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.23846153846153847 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 17])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.23846153846153847 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.16346153846153846 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([14])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.6174297924297925 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 8, 20])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.3634615384615385 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.038461538461538464 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 24])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.23846153846153847 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 31])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.4174297924297924 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 21])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.4174297924297924 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([16])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.3634615384615385 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 11])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.14957264957264957 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 25])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.038461538461538464 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 20])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.3813186813186813 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([20])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.4745726495726496 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 11])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.3634615384615385 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 30])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.23846153846153847 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.038461538461538464 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([20])
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.14957264957264957 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([8])
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.3813186813186813 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([30])
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.30631868131868134 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 21, 30])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.6174297924297925 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 14, 13])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.23846153846153847 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([8])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.30631868131868134 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.16346153846153846 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([10])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.3813186813186813 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([14])
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.14957264957264957 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([8])
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.038461538461538464 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([20])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.3634615384615385 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 25])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.14957264957264957 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.038461538461538464 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([14])
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.23846153846153847 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([3])
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.23846153846153847 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 31])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.34957264957264955 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 18])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.23846153846153847 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.16346153846153846 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([14])
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.23846153846153847 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 19])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.14957264957264957 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 14])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]
Return Code	: 0
3 1, 2001, 3002, 4002, 5002, 6002, 7001, 8002, 9002, 10002, 11002, 12002, 13001, 14002, 15002, 16001, 17002, 18002, 19001, 20002, 21001, 22002, 23002, 24001, 25002, 26002, 27001, 28001, 29002, 30001, 31002
45 1, 2001, 3002, 4002, 5002, 6002, 7002, 8001, 9002, 10002, 11002, 12001, 13002, 14002, 15002, 16001, 17002, 18002, 19001, 20002, 21001, 22002, 23002, 24002, 25001, 26002, 27001, 28001, 29002, 30001, 31002
129 1, 2001, 3002, 4002, 5002, 6002, 7001, 8002, 9002, 10002, 11002, 12001, 13002, 14002, 15002, 16001, 17002, 18002, 19002, 20001, 21001, 22002, 23002, 24001, 25002, 26002, 27001, 28001, 29002, 30001, 31002
132 1, 2001, 3002, 4002, 5002, 6002, 7002, 8001, 9002, 10002, 11002, 12001, 13002, 14002, 15002, 16001, 17002, 18002, 19002, 20001, 21001, 22002, 23002, 24001, 25002, 26002, 27001, 28001, 29002, 30001, 31002
134 1, 2002, 3001, 4002, 5002, 6002, 7002, 8001, 9002, 10002, 11002, 12002, 13001, 14002, 15002, 16001, 17002, 18002, 19001, 20002, 21001, 22002, 23002, 24001, 25002, 26002, 27001, 28001, 29002, 30001, 31002
CNF-cc Accuracy		: 0.9055944055944056

Dataset				: flare.dat
Metric				: length
Minsups				: [3]
Mistle Accuracy		: [0.5174825174825175]
CNFAlgo Accuracy	: [0.9055944055944056]
Randomized Accuracy	: [0.125]

# Test Examples		: 286
Mistle # Ties		: [(0, 0)]
CNFAlgo # Ties		: [(5, 10)]
