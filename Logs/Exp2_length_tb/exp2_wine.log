>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 58
 Number of frequent closed itemsets: 12381
 Total time ~: 266 ms
>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 86
 Number of frequent closed itemsets: 12611
 Total time ~: 342 ms
Timeout of 20 seconds reached while mining patterns with minsup = 0.5
Current Minsup[0.75] yields 52392 itemsets.
Current Minsup[0.875] yields 1249 itemsets.
Current Minsup[0.8054064099945373] yields 12381 itemsets.
Top-k minsup for at least 10000 paterns = 0.8054064099945373 or 47
DL of initial theory	: 54616.93128080831
9999	itemsets left after T operation 	: [frozenset({64, 35, 4, 3, 6, 5, 10, 15, 48, 49, 18, 51, -47, 50, -2, 23, 29, 30})]
121	itemsets left after W operation 	: [frozenset({3, 4, 67, 40, 11, 48, 49, 51, 26, 29, 30}), frozenset({2, 5, 7, 9, 10, 12, 13, 15, 16, 17, 18, 19, 21, 23, 24, 25, 27, 28, 32, 33, 34, 35, 38, 39, 41, 42, 43, 44, 46, 50, 52, 53, 54, 55, 57, 58, 59, 61, -67, 63, 64, 65, 66, -62, -60, -56, -47, -45, -37, -36, -31, -22, -20, -14, -8, -6}), frozenset({5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 27, 31, 32, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 52, 53, 55, 56, 58, 59, 60, 61, -67, 63, 64, 65, 66, -62, -57, -54, -50, -42, -41, -33, -28, -25, -17, -12, -7, -2}), frozenset({5, 6, 7, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 27, 28, 32, 33, 34, 35, 37, 38, 39, 42, 43, 44, 46, 47, 52, 53, 55, 56, 57, 58, 59, 60, -67, 63, 64, 65, 66, -62, -61, -54, -50, -45, -41, -36, -31, -25, -21, -16, -8, -2}), frozenset({5, 6, 7, 8, 10, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 28, 31, 32, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, -64, 65, 66, -67, -58, -56, -47, -42, -41, -33, -27, -25, -18, -16, -9, -2}), frozenset({2, 5, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 31, 32, 34, 35, 36, 38, 39, 41, 43, 44, 45, 46, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, -65, 66, -67, -58, -56, -47, -42, -37, -33, -28, -23, -17, -12, -7, -6}), frozenset({5, 6, 7, 8, 10, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 27, 28, 32, 33, 34, 36, 38, 39, 41, 42, 43, 44, 46, 50, 53, 54, 55, 56, 57, 58, 59, 60, -67, 62, 63, 64, -65, 66, -61, -52, -47, -45, -37, -35, -31, -24, -18, -12, -9, -2}), frozenset({5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 19, 20, 21, 22, 24, 25, 27, 28, 32, 33, 34, 35, 38, 39, 41, 42, 43, 44, 45, 50, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, -65, 66, -67, -60, -54, -47, -46, -37, -36, -31, -23, -18, -15, -7, -2}), frozenset({5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 27, 28, 32, 33, 35, 36, 38, 39, 41, 42, 43, 44, 45, 50, 53, 54, 55, 56, 57, 58, 60, 61, 62, -67, 64, 65, 66, -63, -59, -52, -47, -46, -37, -34, -31, -25, -18, -12, -10, -2}), frozenset({2, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 27, 28, 32, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 50, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, -66, -67, -57, -55, -47, -42, -41, -33, -31, -25, -17, -12, -7, -5}), frozenset({5, 6, 8, 9, 10, 12, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 31, 32, 34, 35, 36, 38, 39, 41, 42, 43, 44, 45, 50, 53, 54, 55, 56, 57, 58, 59, 61, -67, 63, 64, 65, 66, -62, -60, -52, -47, -46, -37, -33, -28, -23, -17, -14, -7, -2})]
# of frequent itemsets	: 0
Time of DCI Closed		: 0.30266499519348145
Initial DL				: 53743.33344022854
Final DL				: 5246.777108387836
Compression (wrt me)	: 0.9023734336422746
Operator Counters		: {'D': 0, 'W': 1, 'V': 0, 'S': 0, 'R': 0, 'T': 1}
Misle Learning Runtime	: 26.338785886764526

Timeout of 20 seconds reached while mining patterns with minsup = 0.5
Current Minsup[0.75] yields 71095 itemsets.
Current Minsup[0.875] yields 1142 itemsets.
Current Minsup[0.8093476130846616] yields 12611 itemsets.
Top-k minsup for at least 10000 paterns = 0.8093476130846616 or 70
DL of initial theory	: 54616.93128080831
9999	itemsets left after T operation 	: [frozenset({64, 3, 5, 40, 10, 49, 21, 26, 29, 30, 63})]
7293	itemsets left after T operation 	: [frozenset({35, 5, 10, 45, 49, 23, 26, 30})]
0	itemsets left after T operation 	: [frozenset({64, 40, 10, 21, 29, 63})]
# of frequent itemsets	: 0
Time of DCI Closed		: 0.29889583587646484
Initial DL				: 53743.33344022854
Final DL				: 20664.597447182296
Compression (wrt me)	: 0.6154946832584409
Operator Counters		: {'D': 0, 'W': 0, 'V': 0, 'S': 0, 'R': 0, 'T': 3}
Misle Learning Runtime	: 25.909106969833374


Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([43, 47, 15])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.05555555555555555 tied among 4/8 candidates.
Min Score = 0.125 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 66])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.05555555555555555 tied among 2/8 candidates.
Min Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([52])
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.16666666666666666 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 44, 50])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.05555555555555555 tied among 4/8 candidates.
Min Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([54, 16])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.05555555555555555 tied among 4/8 candidates.
Min Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([37])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.05555555555555555 tied among 4/8 candidates.
Min Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 59])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([61])
Tie Breaking: Level 3

Max Score = 0.05555555555555555 tied among 8/8 candidates.
Min Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([60, 56, 33])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([56, 42, 31])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.05555555555555555 tied among 4/8 candidates.
Min Score = 0.29166666666666663 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([37, 61])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.05555555555555555 tied among 4/8 candidates.
Min Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([27, 60])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.16666666666666666 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 31, 19])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.29166666666666663 tied among 2/8 candidates.
Min Score = 0.1797064047064047 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([39])
Tie Breaking: Level 3

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.1797064047064047 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([33, 15])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.16666666666666666 tied among 8/8 candidates.
Min Score = 0.1797064047064047 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([58, 61, 41])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.1797064047064047 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 39, 18])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.16666666666666666 tied among 4/8 candidates.
Min Score = 0.1797064047064047 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([39, 22])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.16666666666666666 tied among 8/8 candidates.
Min Score = 0.1797064047064047 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([35, 48, 38])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.29166666666666663 tied among 8/8 candidates.
Min Score = 0.1797064047064047 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([27, 33, 20])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.29166666666666663 tied among 8/8 candidates.
Min Score = 0.1797064047064047 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 46, 12])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.29166666666666663 tied among 8/8 candidates.
Min Score = 0.1797064047064047 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([22, 56, 33])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.29166666666666663 tied among 4/8 candidates.
Min Score = 0.1797064047064047 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 2])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.29166666666666663 tied among 8/8 candidates.
Min Score = 0.1797064047064047 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 34, 15])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.29166666666666663 tied among 4/8 candidates.
Min Score = 0.1797064047064047 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([53, 19])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.16666666666666666 tied among 8/8 candidates.
Min Score = 0.1797064047064047 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 57, 38])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.16666666666666666 tied among 8/8 candidates.
Min Score = 0.1797064047064047 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 28, 49])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.29166666666666663 tied among 4/8 candidates.
Min Score = 0.1797064047064047 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 56])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.16666666666666666 tied among 8/8 candidates.
Min Score = 0.1797064047064047 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 65, 17])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.29166666666666663 tied among 8/8 candidates.
Min Score = 0.1797064047064047 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 17, 7])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.29166666666666663 tied among 4/8 candidates.
Min Score = 0.1797064047064047 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([61, 44])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.29166666666666663 tied among 4/8 candidates.
Min Score = 0.1797064047064047 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([27, 34])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.29166666666666663 tied among 4/8 candidates.
Min Score = 0.12415084915084915 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([36, 52])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.29166666666666663 tied among 4/8 candidates.
Min Score = 0.1797064047064047 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([51, 38])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]
Return Code	: 0
CNF-cc Accuracy		: 0.6176470588235294

Dataset				: wine.dat
Metric				: length
Minsups				: [3]
Mistle Accuracy		: [0.6176470588235294]
CNFAlgo Accuracy	: [0.6176470588235294]
Randomized Accuracy	: [0.125]

# Test Examples		: 34
Mistle # Ties		: [(0, 0)]
CNFAlgo # Ties		: [(0, 0)]
