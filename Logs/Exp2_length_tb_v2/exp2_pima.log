>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 66
 Number of frequent closed itemsets: 14600
 Total time ~: 281 ms
>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 86
 Number of frequent closed itemsets: 13811
 Total time ~: 332 ms
Timeout of 20 seconds reached while mining patterns with minsup = 0.5
Current Minsup[0.75] yields 81180 itemsets.
Current Minsup[0.875] yields 1814 itemsets.
Current Minsup[0.8188637755884972] yields 9027 itemsets.
Top-k minsup for at least 10000 paterns = 0.8188637755884972 or 54
26  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, -34, -28, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, -37, -28, -24, -20, -15, -10, -7, -2}), frozenset({3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -11, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -18, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, -37, -28, -24, -20, -15, -10, -6, -2}), frozenset({2, 3, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -4}), frozenset({2, 3, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -9, -4}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -17, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, -33, -31, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -27, -20, -18, -10, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, -33, -29, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 34, 35, 36, 37, -33, -30, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -7, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, -33, -32, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -22, -15, -10, -9, -2}), frozenset({3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -8, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -16, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -19, -10, -6, -2}), frozenset({2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -5}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, -37, -28, -24, -20, -15, -10, -9, -2}), frozenset({2, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -3}), frozenset({2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -9, -3}), frozenset({2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, -34, -28, -24, -20, -15, -10, -6, -5}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, -34, -28, -24, -20, -15, -10, -9, -2})}
DL of initial theory	: 23272.70980539344
9999	itemsets left after T operation 	: [frozenset({35, 36, 8, -20, 14, 21, 22, 23, 29})]
5491	itemsets left after T operation 	: [frozenset({35, 36, 12, 14, 19, 27, 30})]
28	itemsets left after T operation 	: [frozenset({36, 8, -20, 21, 22, 23, 29})]
6	itemsets left after V operation 	: [frozenset({2, 3, 5, 6, 7, 8, 11, 13, 16, 17, 18, 21, 22, 23, 25, 26, -36, 29, 31, 32, 33, 34, -28, 37, -24, -20, -15, -10, -9, -4}), frozenset({35, 19, 36, 30, 27, 12, 14})]
# of frequent itemsets	: 0
Time of DCI Closed		: 0.3103508949279785
Initial DL				: 109019.69407604229
Final DL				: 14457.963014291678
Compression (wrt me)	: 0.8673820988324632
Operator Counters		: {'D': 0, 'W': 0, 'V': 1, 'S': 0, 'R': 0, 'T': 3}
Misle Learning Runtime	: 25.220398902893066

Timeout of 20 seconds reached while mining patterns with minsup = 0.5
Current Minsup[0.75] yields 24719 itemsets.
Current Minsup[0.875] yields 586 itemsets.
Current Minsup[0.780230666462056] yields 10157 itemsets.
Top-k minsup for at least 10000 paterns = 0.780230666462056 or 67
26  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, -34, -28, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, -37, -28, -24, -20, -15, -10, -7, -2}), frozenset({3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -11, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -18, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, -37, -28, -24, -20, -15, -10, -6, -2}), frozenset({2, 3, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -4}), frozenset({2, 3, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -9, -4}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -17, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, -33, -31, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, -33, -29, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -27, -20, -18, -10, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 34, 35, 36, 37, -33, -30, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -7, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, -33, -32, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -22, -15, -10, -9, -2}), frozenset({3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -8, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -16, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -19, -10, -6, -2}), frozenset({2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -5}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, -37, -28, -24, -20, -15, -10, -9, -2}), frozenset({2, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -3}), frozenset({2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -9, -3}), frozenset({2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, -34, -28, -24, -20, -15, -10, -6, -5}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, -34, -28, -24, -20, -15, -10, -9, -2})}
DL of initial theory	: 23272.70980539344
9999	itemsets left after T operation 	: [frozenset({36, 11, 12, 13, 14, 21, -10, 22, 25, 29})]
3753	itemsets left after T operation 	: [frozenset({35, 4, 14, 16, 22, 25, 29, 30})]
21	itemsets left after T operation 	: [frozenset({36, 11, 12, 13, 14, 21, -10, 25})]
0	itemsets left after V operation 	: [frozenset({2, 5, 6, 7, 8, 10, 11, 12, 17, 18, 19, 21, 23, 24, 26, 27, -36, 31, 32, 33, 34, -28, 37, -25, -20, -15, -13, -9, -3}), frozenset({35, 4, 14, 16, 22, 25, 29, 30})]
# of frequent itemsets	: 0
Time of DCI Closed		: 0.3421649932861328
Initial DL				: 109019.69407604229
Final DL				: 11059.25410886604
Compression (wrt me)	: 0.8985572817590911
Operator Counters		: {'D': 0, 'W': 0, 'V': 1, 'S': 0, 'R': 0, 'T': 3}
Misle Learning Runtime	: 24.404627084732056


Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([32])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 17])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 6])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([6])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([34, 18])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 31])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 32])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.07142857142857142 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 27, 37])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 18])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.15948275862068967 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 18, 25])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([18])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([33, 26])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([34, 18])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.07142857142857142 tied among 8/8 candidates.
Min Score = 0.09698275862068965 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([18])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([34, 26])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([32])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([34, 26])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([5])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 7])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 18])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([37, 5])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 28])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.07142857142857142 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 3])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([37])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Tie Breaking: Level 1

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.09698275862068965 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 5])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 32])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.09698275862068965 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 9])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 5])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([34, 32])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 34])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([32, 26])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([6])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 28])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Tie Breaking: Level 1

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Tie Breaking: Level 1

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([32])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([7])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 5])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Tie Breaking: Level 1

Max Score = 0.07142857142857142 tied among 8/8 candidates.
Min Score = 0.09698275862068965 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 22, 8])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([34])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Tie Breaking: Level 1

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Tie Breaking: Level 1

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([6])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([3])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([7])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([5])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 7])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 34])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 34])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.09698275862068965 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 37])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Tie Breaking: Level 1

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([37, 26])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.07142857142857142 tied among 8/8 candidates.
Min Score = 0.09698275862068965 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 26])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.07142857142857142 tied among 2/8 candidates.
Min Score = 0.09698275862068965 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([26])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 26])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 32])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 3])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 5])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 32])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 18])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Tie Breaking: Level 1

Max Score = 0.07142857142857142 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([5])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([9])
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 33, 24])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Tie Breaking: Level 1

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([33])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.09698275862068965 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([34])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.15948275862068967 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([18])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 7])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([37, 26])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 7])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 26, 15])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 5])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 9])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([34])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([15])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Tie Breaking: Level 1

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([34])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([5])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 34])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([6])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Tie Breaking: Level 1

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 28])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([5])
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 2/8 candidates.
Tie Breaking: Level 1

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 34])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 8/8 candidates.
Min Score = 0.034482758620689655 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 28, 3])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.14285714285714285 tied among 4/8 candidates.
Min Score = 0.034482758620689655 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([5])
Tie Breaking: Level 3

Max Score = 0.125 tied among 8/8 candidates.
Min Score = 0.03333333333333333 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 32, 5])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.125 tied among 2/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking: Level 3

Max Score = 0.0625 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([7])
Tie Breaking: Level 3

Max Score = 0.125 tied among 4/8 candidates.
Tie Breaking: Level 1

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking: Level 3

Max Score = 0.125 tied among 2/8 candidates.
Tie Breaking: Level 1

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 32])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 34])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([7])
Tie Breaking: Level 3

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 24])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 5])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.10476190476190475 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 23])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.125 tied among 8/8 candidates.
Min Score = 0.03333333333333333 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 24])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([3])
Tie Breaking: Level 3

Max Score = 0.125 tied among 2/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([6])
Tie Breaking: Level 3

Max Score = 0.125 tied among 8/8 candidates.
Min Score = 0.03333333333333333 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 31])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0625 tied among 4/8 candidates.
Min Score = 0.10476190476190475 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 19])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.125 tied among 8/8 candidates.
Min Score = 0.03333333333333333 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 28])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([37])
Tie Breaking: Level 3

Max Score = 0.125 tied among 8/8 candidates.
Min Score = 0.03333333333333333 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 37, 28])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.125 tied among 2/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([26])
Tie Breaking: Level 3

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 7])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([18, 9])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.125 tied among 2/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([32])
Tie Breaking: Level 3

Max Score = 0.125 tied among 2/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([7])
Tie Breaking: Level 3

Max Score = 0.125 tied among 8/8 candidates.
Min Score = 0.03333333333333333 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 17, 37])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.10476190476190475 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 17])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([26])
Tie Breaking: Level 3

Max Score = 0.125 tied among 4/8 candidates.
Tie Breaking: Level 1

Max Score = 0.125 tied among 2/8 candidates.
Tie Breaking: Level 1

Max Score = 0.0625 tied among 2/8 candidates.
Tie Breaking: Level 1

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([15])
Tie Breaking: Level 3

Max Score = 0.125 tied among 8/8 candidates.
Min Score = 0.10476190476190475 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 18])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 7])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.10476190476190475 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 32])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0625 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking: Level 3

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 17])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 5])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([18])
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3]

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 32])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.125 tied among 2/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([18])
Tie Breaking: Level 3

Max Score = 0.0625 tied among 4/8 candidates.
Min Score = 0.10476190476190475 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 24])
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3]

Max Score = 0.125 tied among 2/8 candidates.
Tie Breaking: Level 1

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([32])
Tie Breaking: Level 3

Max Score = 0.125 tied among 8/8 candidates.
Min Score = 0.03333333333333333 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([33, 15, 6])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 37])
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking: Level 3

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([18])
Tie Breaking: Level 3

Max Score = 0.0625 tied among 2/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([3])
Tie Breaking: Level 3

Max Score = 0.125 tied among 2/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([33])
Tie Breaking: Level 3

Max Score = 0.125 tied among 4/8 candidates.
Min Score = 0.03333333333333333 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([3])
Tie Breaking: Level 3
Return Code	: 0
CNF-cc Accuracy		: 0.91875

Dataset				: pima.dat
Metric				: length
Minsups				: [3]
MF Accuracy			: [(0.89375, 0.63125, 160, 160)]
Mistle Accuracy		: [0.89375]
CNFAlgo Accuracy	: [0.91875]
Randomized Accuracy	: [0.125]

# Test Examples		: 160
Mistle # Ties		: [(0, 0)]
CNFAlgo # Ties		: [(0, 0)]
