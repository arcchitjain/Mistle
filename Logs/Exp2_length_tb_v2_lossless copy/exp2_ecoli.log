>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 11
 Number of frequent closed itemsets: 366
 Total time ~: 24 ms
>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 71
 Number of frequent closed itemsets: 31400
 Total time ~: 310 ms
Current Minsup[0.5] yields 183 itemsets.
Current Minsup[0.25] yields 336 itemsets.
Current Minsup[0.125] yields 355 itemsets.
Top-k minsup for at least 10000 paterns = 0.09090909090909091 or 1
5  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({3, 4, 5, 6, 8, 9, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -7, -2}), frozenset({3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -10, -2}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -11, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -8, -2}), frozenset({3, 4, 5, 6, 7, 8, 9, 10, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -11, -2})}
DL of initial theory	: 9561.90959613437
1	itemsets left after W operation 	: [frozenset({6, 9, 13, 15, 18, 21, 22, 23, 24, 25, 27, 28, -26, -20, -14, -12}), frozenset({3, 4, 5, -28, 7, 8, 10, -17, 16, 19, -11, -2}), frozenset({3, 4, 5, -28, 7, 8, 11, -16, 17, 19, -10, -2}), frozenset({3, 4, 5, -28, 8, 10, 11, -16, 17, 19, -7, -2}), frozenset({3, 4, 5, -28, 8, 10, 11, -19, 16, 17, -7, -2}), frozenset({2, 3, 4, -28, 8, 10, 11, -16, 17, 19, -7, -5}), frozenset({2, 3, 4, -28, 7, 8, 11, -16, 17, 19, -10, -5}), frozenset({3, 4, 5, -28, 7, 10, 11, -16, 17, 19, -8, -2}), frozenset({2, 3, -28, 5, 7, 8, 10, -16, 17, 19, -11, -4}), frozenset({3, 4, 5, -28, 7, 8, 10, -16, 17, 19, -11, -2}), frozenset({2, 4, 5, -28, 8, 10, 11, -16, 17, 19, -7, -3})]
0	itemsets left after W operation 	: [frozenset({6, 9, -20, 13, 15, 18, -14, -12, 21, 22, 23, 25, 27, 29}), frozenset({3, 4, 5, -29, 8, -24, 10, 11, -16, 17, 19, -7, 26, -2}), frozenset({24, -29, 28, -26})]
# of frequent itemsets	: 368
Time of DCI Closed		: 0.31746721267700195
281	itemsets left after W operation 	: [frozenset({-16, 17, 3, 4, 19, 11, 30}), frozenset({-30, -28, 5, -10, 7, 8, -2}), frozenset({-30, -28, 5, 8, -7, 10, -2}), frozenset({2, -30, -28, 8, -7, 10, -5}), frozenset({2, -30, -28, -10, 7, 8, -5}), frozenset({-30, -28, 5, 7, -8, 10, -2}), frozenset({-30, -29, 5, 8, -24, 10, -7, 26, -2})]
33	itemsets left after W operation 	: [frozenset({-28, 5, 8, 10, 31}), frozenset({-31, 3, 4, 7, -17, 16, 19, -11, -2}), frozenset({-31, 3, 4, 11, -19, 16, 17, -7, -2}), frozenset({-31, 2, 3, 7, -16, 17, 19, -11, -4}), frozenset({-31, 3, 4, 7, -16, 17, 19, -11, -2}), frozenset({-31, 2, 4, 11, -16, 17, 19, -7, -3}), frozenset({-31, -30, -7, -2})]
Initial DL				: 32415.119743342657
Final DL				: 1439.68045844962
Compression (wrt me)	: 0.9555861440633642
Operator Counters		: {'D': 0, 'W': 4, 'V': 0, 'S': 0, 'R': 0, 'T': 0}
Misle Learning Runtime	: 1.6837129592895508

Current Minsup[0.5] yields 2444 itemsets.
Current Minsup[0.25] yields 31400 itemsets.
Top-k minsup for at least 10000 paterns = 0.25 or 18
5  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({3, 4, 5, 6, 8, 9, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -7, -2}), frozenset({3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -10, -2}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -11, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -8, -2}), frozenset({3, 4, 5, 6, 7, 8, 9, 10, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -11, -2})}
DL of initial theory	: 9561.90959613437
9709	itemsets left after W operation 	: [frozenset({4, 9, 10, 13, 15, -14, 18, -12, 24, 25, 28}), frozenset({2, 5, 6, 7, 8, 17, 19, 20, 21, 22, 27, -28, -26, -23, -16, -11, -3}), frozenset({2, 5, 6, 7, 11, 16, 19, 20, 21, 22, 26, -28, -27, -23, -17, -8, -3}), frozenset({2, 3, 5, 7, 8, 17, 19, 20, 21, 22, 27, -28, -26, -23, -16, -11, -6}), frozenset({3, 5, 6, 7, 11, 17, 19, 21, 22, 23, 27, -28, -26, -20, -16, -8, -2}), frozenset({3, 5, 6, 7, 8, 17, 19, 20, 21, 23, 26, -28, -27, -22, -16, -11, -2}), frozenset({2, 3, 6, 8, 11, 17, 19, 20, 22, 23, 26, -28, -27, -21, -16, -7, -5}), frozenset({2, 5, 6, 7, 8, 16, 17, 20, 21, 23, 26, -28, -27, -22, -19, -11, -3}), frozenset({2, 3, 6, 7, 8, 17, 19, 20, 21, 22, 26, -28, -27, -23, -16, -11, -5}), frozenset({2, 5, 6, 8, 11, 17, 19, 20, 21, 22, 26, -28, -27, -23, -16, -7, -3}), frozenset({2, 3, 6, 7, 8, 17, 19, 20, 22, 23, 27, -28, -26, -21, -16, -11, -5}), frozenset({2, 3, 6, 7, 8, 16, 17, 20, 22, 23, 27, -28, -26, -21, -19, -11, -5}), frozenset({2, 3, 5, 7, 8, 17, 19, 20, 21, 22, 26, -28, -27, -23, -16, -11, -6}), frozenset({2, 3, 6, 7, 11, 16, 17, 20, 21, 22, 26, -28, -27, -23, -19, -8, -5}), frozenset({3, 5, 6, 7, 8, 17, 19, 21, 22, 23, 27, -28, -26, -20, -16, -11, -2}), frozenset({3, 5, 6, 7, 8, 16, 17, 21, 22, 23, 27, -28, -26, -20, -19, -11, -2}), frozenset({3, 5, 6, 7, 8, 17, 19, 20, 21, 22, 26, -28, -27, -23, -16, -11, -2}), frozenset({3, 5, 6, 8, 11, 17, 19, 20, 22, 23, 26, -28, -27, -21, -16, -7, -2}), frozenset({2, 3, 6, 7, 8, 17, 19, 21, 22, 23, 27, -28, -26, -20, -16, -11, -5}), frozenset({2, 3, 6, 7, 8, 16, 17, 21, 22, 23, 27, -28, -26, -20, -19, -11, -5}), frozenset({2, 3, 6, 7, 11, 16, 19, 20, 21, 22, 26, -28, -27, -23, -17, -8, -5}), frozenset({3, 5, 6, 8, 11, 16, 17, 20, 22, 23, 26, -28, -27, -21, -19, -7, -2}), frozenset({2, 5, 6, 7, 8, 17, 19, 21, 22, 23, 27, -28, -26, -20, -16, -11, -3}), frozenset({3, 5, 6, 8, 11, 16, 19, 20, 21, 22, 26, -28, -27, -23, -17, -7, -2}), frozenset({3, 5, 6, 7, 8, 16, 17, 20, 22, 23, 26, -28, -27, -21, -19, -11, -2}), frozenset({2, 3, 5, 8, 11, 17, 19, 20, 21, 23, 26, -28, -27, -22, -16, -7, -6}), frozenset({2, 3, 5, 7, 11, 17, 19, 20, 21, 22, 26, -28, -27, -23, -16, -8, -6}), frozenset({3, 5, 6, 7, 11, 17, 19, 20, 21, 23, 27, -28, -26, -22, -16, -8, -2}), frozenset({3, 5, 6, 7, 11, 17, 19, 20, 22, 23, 27, -28, -26, -21, -16, -8, -2}), frozenset({2, 3, 5, 7, 8, 16, 17, 21, 22, 23, 27, -28, -26, -20, -19, -11, -6}), frozenset({2, 3, 5, 7, 8, 17, 19, 21, 22, 23, 27, -28, -26, -20, -16, -11, -6}), frozenset({2, 3, 5, 8, 11, 17, 19, 20, 22, 23, 26, -28, -27, -21, -16, -7, -6}), frozenset({2, 3, 5, 8, 11, 16, 17, 20, 21, 22, 26, -28, -27, -23, -19, -7, -6}), frozenset({2, 3, 6, 7, 8, 16, 19, 21, 22, 23, 27, -28, -26, -20, -17, -11, -5}), frozenset({2, 3, 5, 8, 11, 16, 19, 20, 21, 22, 26, -28, -27, -23, -17, -7, -6}), frozenset({2, 3, 5, 8, 11, 17, 19, 20, 21, 22, 26, -28, -27, -23, -16, -7, -6}), frozenset({3, 5, 6, 8, 11, 17, 19, 20, 21, 23, 27, -28, -26, -22, -16, -7, -2}), frozenset({3, 5, 6, 7, 11, 17, 19, 20, 21, 22, 26, -28, -27, -23, -16, -8, -2}), frozenset({3, 5, 6, 7, 11, 16, 17, 20, 21, 22, 26, -28, -27, -23, -19, -8, -2}), frozenset({2, 3, 6, 8, 11, 17, 19, 20, 21, 22, 26, -28, -27, -23, -16, -7, -5}), frozenset({2, 3, 6, 8, 11, 16, 17, 20, 21, 22, 26, -28, -27, -23, -19, -7, -5}), frozenset({2, 3, 6, 7, 11, 16, 17, 21, 22, 23, 27, -28, -26, -20, -19, -8, -5}), frozenset({2, 5, 6, 7, 8, 16, 19, 20, 21, 22, 26, -28, -27, -23, -17, -11, -3}), frozenset({3, 5, 6, 8, 11, 17, 19, 21, 22, 23, 27, -28, -26, -20, -16, -7, -2}), frozenset({2, 5, 6, 7, 11, 17, 19, 20, 21, 23, 27, -28, -26, -22, -16, -8, -3}), frozenset({3, 5, 6, 8, 11, 17, 19, 20, 21, 22, 26, -28, -27, -23, -16, -7, -2}), frozenset({3, 5, 6, 7, 8, 17, 19, 20, 21, 22, 27, -28, -26, -23, -16, -11, -2})]
227	itemsets left after W operation 	: [frozenset({3, 8, 15, 17, -14, 22, 24, 25, 29}), frozenset({2, 5, 6, 7, 9, 10, 13, 16, 18, 21, 23, 27, -29, -26, -20, -19, -12, -11, -4}), frozenset({2, 4, 6, 9, 10, 11, 13, 16, 19, 20, 21, 26, -29, -27, -23, -18, -12, -7, -5}), frozenset({2, 4, 5, 7, 10, 11, 13, 18, 19, 20, 21, 26, -29, -27, -23, -16, -12, -9, -6}), frozenset({2, 4, 6, 9, 10, 11, 12, 18, 19, 20, 21, 26, -29, -27, -23, -16, -13, -7, -5}), frozenset({2, 4, 5, 7, 9, 11, 13, 18, 19, 20, 21, 26, -29, -27, -23, -16, -12, -10, -6}), frozenset({2, 4, 5, 7, 9, 11, 13, 16, 18, 20, 21, 26, -29, -27, -23, -19, -12, -10, -6}), frozenset({2, 4, 6, 9, 10, 11, 12, 18, 19, 20, 23, 27, -29, -26, -21, -16, -13, -7, -5}), frozenset({2, 4, 6, 7, 10, 11, 13, 16, 18, 20, 21, 26, -29, -27, -23, -19, -12, -9, -5}), frozenset({4, 5, 6, 7, 9, 11, 13, 18, 19, 20, 21, 26, -29, -27, -23, -16, -12, -10, -2}), frozenset({2, 5, 6, 9, 10, 11, 13, 16, 18, 20, 23, 26, -29, -27, -21, -19, -12, -7, -4}), frozenset({4, 5, 6, 7, 9, 10, 12, 16, 18, 20, 23, 27, -29, -26, -21, -19, -13, -11, -2}), frozenset({4, 5, 6, 7, 9, 10, 12, 18, 19, 20, 21, 26, -29, -27, -23, -16, -13, -11, -2}), frozenset({2, 4, 6, 9, 10, 11, 12, 18, 19, 21, 23, 27, -29, -26, -20, -16, -13, -7, -5}), frozenset({4, 5, 6, 9, 10, 11, 12, 18, 19, 20, 21, 26, -29, -27, -23, -16, -13, -7, -2}), frozenset({2, 4, 5, 7, 9, 11, 13, 18, 19, 20, 23, 26, -29, -27, -21, -16, -12, -10, -6}), frozenset({2, 4, 5, 9, 10, 11, 13, 16, 19, 20, 21, 26, -29, -27, -23, -18, -12, -7, -6}), frozenset({2, 4, 6, 7, 9, 11, 12, 16, 18, 20, 23, 27, -29, -26, -21, -19, -13, -10, -5}), frozenset({4, 5, 6, 7, 9, 11, 13, 18, 19, 21, 23, 27, -29, -26, -20, -16, -12, -10, -2}), frozenset({2, 4, 6, 7, 10, 11, 13, 18, 19, 20, 23, 26, -29, -27, -21, -16, -12, -9, -5}), frozenset({2, 4, 5, 7, 10, 11, 13, 18, 19, 21, 23, 27, -29, -26, -20, -16, -12, -9, -6}), frozenset({2, 5, 6, 9, 10, 11, 13, 18, 19, 20, 21, 26, -29, -27, -23, -16, -12, -7, -4}), frozenset({4, 5, 6, 9, 10, 11, 13, 16, 19, 20, 21, 26, -29, -27, -23, -18, -12, -7, -2}), frozenset({2, 5, 6, 7, 9, 10, 13, 18, 19, 21, 23, 27, -29, -26, -20, -16, -12, -11, -4})]
# of frequent itemsets	: 863
Time of DCI Closed		: 0.4012937545776367
856	itemsets left after W operation 	: [frozenset({20, -27, 21, -23, 26, 11, 30}), frozenset({2, -30, -28, 5, 6, 7, -17, 16, 19, 22, -8, -3}), frozenset({2, -30, -28, 5, 6, 8, -16, 17, 19, 22, -7, -3}), frozenset({2, 3, -28, -30, 6, 7, -19, 16, 17, 22, -8, -5}), frozenset({2, 3, -28, -30, 6, 7, -17, 16, 19, 22, -8, -5}), frozenset({-30, 3, -28, 5, 6, 8, -17, 16, 19, 22, -7, -2}), frozenset({2, 3, -28, 5, -30, 7, -16, 17, 19, 22, -8, -6}), frozenset({2, 3, -28, 5, -30, 8, -19, 16, 17, 22, -7, -6}), frozenset({2, 3, -28, 5, -30, 8, -17, 16, 19, 22, -7, -6}), frozenset({2, 3, -28, 5, -30, 8, -16, 17, 19, 22, -7, -6}), frozenset({-30, 3, -28, 5, 6, 7, -16, 17, 19, 22, -8, -2}), frozenset({-30, 3, -28, 5, 6, 7, -19, 16, 17, 22, -8, -2}), frozenset({2, 3, -28, -30, 6, 8, -16, 17, 19, 22, -7, -5}), frozenset({2, 3, -28, -30, 6, 8, -19, 16, 17, 22, -7, -5}), frozenset({-30, 3, -28, 5, 6, 8, -16, 17, 19, 22, -7, -2}), frozenset({2, -29, 4, -30, 6, 9, 10, 13, -18, 16, 19, -12, -7, -5}), frozenset({2, -29, 4, 5, -30, 7, 10, 13, -16, 18, 19, -12, -9, -6}), frozenset({2, -29, 4, -30, 6, 9, 10, 12, -16, 18, 19, -13, -7, -5}), frozenset({2, -29, 4, 5, -30, 7, 9, 13, -16, 18, 19, -12, -10, -6}), frozenset({2, -29, 4, 5, -30, 7, 9, 13, -19, 16, 18, -12, -10, -6}), frozenset({2, -29, 4, -30, 6, 7, 10, 13, -19, 16, 18, -12, -9, -5}), frozenset({-30, -29, 4, 5, 6, 7, 9, 13, -16, 18, 19, -12, -10, -2}), frozenset({-30, -29, 4, 5, 6, 9, 10, 12, -16, 18, 19, -13, -7, -2}), frozenset({2, -29, 4, 5, -30, 9, 10, 13, -18, 16, 19, -12, -7, -6}), frozenset({2, -29, -30, 5, 6, 9, 10, 13, -16, 18, 19, -12, -7, -4}), frozenset({-30, -29, 4, 5, 6, 9, 10, 13, -18, 16, 19, -12, -7, -2})]
850	itemsets left after W operation 	: [frozenset({-16, 17, 3, -28, 19, 22, 31}), frozenset({-31, 2, 5, -26, 7, 8, -23, 20, 21, -11, -6, 27}), frozenset({-31, 5, 6, 7, -26, 11, -20, 21, 23, -8, 27, -2}), frozenset({-31, 2, -27, 6, 8, 11, -21, 20, 23, -7, 26, -5}), frozenset({-31, 2, -27, 6, 7, 8, -23, 20, 21, -11, 26, -5}), frozenset({-31, 2, 6, 7, 8, -26, 27, -21, 20, -11, 23, -5}), frozenset({-31, 2, 26, 5, -27, 7, 8, -23, 20, 21, -11, -6}), frozenset({-31, 5, 6, 7, 8, -26, -20, 21, -11, 23, 27, -2}), frozenset({-31, 5, 6, 7, 8, -27, -23, 20, 21, -11, 26, -2}), frozenset({-31, 5, 6, -27, 8, 11, -21, 20, 23, -7, 26, -2}), frozenset({-31, 2, 6, 7, 8, -26, 27, -20, 21, -11, 23, -5}), frozenset({-31, 5, 6, 7, -26, 11, -21, 20, 23, -8, 27, -2}), frozenset({-31, 2, 5, -26, 7, 8, -20, 21, -11, 23, -6, 27}), frozenset({-31, 2, 26, 5, -27, 8, 11, -21, 20, 23, -7, -6}), frozenset({-31, 5, 6, -26, 8, 11, -20, 21, 23, -7, 27, -2}), frozenset({-31, 5, 6, 7, 8, -26, -23, 20, 21, -11, 27, -2}), frozenset({-31, 2, -30, 5, 7, -8, -6}), frozenset({-31, 2, -30, 5, 8, -7, -6}), frozenset({-31, -30, 5, 6, 7, -8, -2}), frozenset({-31, 2, -30, 6, 8, -7, -5}), frozenset({-31, -30, 5, 6, 8, -7, -2})]
844	itemsets left after W operation 	: [frozenset({32, 7, 6, 23, -26, 27}), frozenset({2, 4, 5, 8, 9, 10, 13, 15, 16, 17, 19, 21, 22, 24, 25, -32, -20, -18, -14, -12, -11, -3}), frozenset({-32, 2, 3, -28, 8, -21, -19, 16, 17, 20, -11, 22, -5}), frozenset({-32, 3, -28, 5, 8, -20, -19, 16, 17, 21, 22, -11, -2}), frozenset({-32, 2, 3, -28, 8, -20, -19, 16, 17, 21, 22, -11, -5}), frozenset({-32, 2, -28, 5, 8, -20, -16, 17, 19, 21, 22, -11, -3}), frozenset({-32, 3, -28, 5, -22, 11, -16, 17, 19, 20, 21, -8, -2}), frozenset({-32, 2, 3, -28, 8, -20, -17, 16, 19, 21, 22, -11, -5}), frozenset({-32, 2, 3, -28, 11, -20, -19, 16, 17, 21, 22, -8, -5}), frozenset({-32, 2, -28, 5, -22, 11, -16, 17, 19, 20, 21, -8, -3}), frozenset({-32, 2, -29, 5, 9, 10, -20, 13, -19, 16, 18, -12, 21, -11, -4}), frozenset({-32, -29, 4, 5, 9, 10, -21, 12, -19, 16, 18, -13, 20, -11, -2}), frozenset({-32, 2, -29, 4, 9, 11, 12, -21, -19, 16, 18, -13, 20, -10, -5}), frozenset({-32, -29, 4, 5, 9, 11, -20, 13, -16, 18, 19, -12, 21, -10, -2}), frozenset({-32, 2, -29, 5, 9, 10, -20, 13, -16, 18, 19, -12, 21, -11, -4}), frozenset({-32, -31, 5, 11, -20, 21, -8, -2}), frozenset({-32, -31, 2, 8, -21, 20, -11, -5}), frozenset({-32, -31, 5, 8, -20, 21, -11, -2}), frozenset({-32, -31, 2, 8, -20, 21, -11, -5}), frozenset({-32, -31, 5, 11, -21, 20, -8, -2})]
757	itemsets left after W operation 	: [frozenset({33, 20, 5, -27, 26}), frozenset({3, -28, 6, 7, 8, -22, -16, 17, 19, 21, -11, 23, -2, -33}), frozenset({2, -28, 6, 7, 8, -22, -19, 16, 17, 21, -11, 23, -3, -33}), frozenset({3, -28, 6, 8, 11, -21, -19, 16, 17, 22, 23, -7, -2, -33}), frozenset({3, -28, 6, 7, 8, -21, -19, 16, 17, -11, 22, 23, -2, -33}), frozenset({2, 3, -28, 8, -22, 11, -16, 17, 19, 21, 23, -7, -6, -33}), frozenset({2, -28, 6, 7, 8, -23, -17, 16, 19, 21, 22, -11, -3, -33}), frozenset({-31, 2, 7, 8, -23, 21, -11, -6, -33}), frozenset({2, 6, 9, 10, 11, 13, 16, 18, 23, -33, -29, -21, -19, -12, -7, -4}), frozenset({4, 6, 7, 9, 10, 12, 18, 19, 21, -33, -29, -23, -16, -13, -11, -2}), frozenset({-31, 6, 7, 8, -23, 21, -11, -2, -33}), frozenset({-31, 2, 8, 11, -21, 23, -7, -6, -33}), frozenset({2, 4, 7, 9, 11, 13, 18, 19, 23, -33, -29, -21, -16, -12, -10, -6}), frozenset({-31, 6, 8, 11, -21, 23, -7, -2, -33})]
622	itemsets left after W operation 	: [frozenset({34, 21, -11, 7, 8}), frozenset({2, 3, 4, 5, 9, 10, 12, 15, 17, 18, 19, 22, 23, 24, 26, 27, -34, -25, -20, -16, -14, -13, -6}), frozenset({-31, 2, 5, -26, -23, 20, -6, 27, -34}), frozenset({2, -28, 5, 6, -26, -23, -16, 17, 19, 20, 22, 27, -3, -34}), frozenset({2, 3, -28, 5, -26, -20, -19, 16, 17, 22, 23, -6, 27, -34}), frozenset({-31, 2, -27, 6, -23, 20, 26, -5, -34}), frozenset({-31, 2, 5, -26, -20, 23, -6, 27, -34}), frozenset({-31, 5, 6, -26, -23, 20, -34, 27, -2}), frozenset({3, -28, 6, -22, -16, 17, 19, -2, 23, -34, -33}), frozenset({2, -28, 6, -22, -19, 16, 17, 23, -3, -34, -33}), frozenset({2, -28, 6, -23, -17, 16, 19, 22, -3, -34, -33}), frozenset({-31, 2, -23, -6, -34, -33}), frozenset({-31, 6, -2, -23, -34, -33})]
549	itemsets left after W operation 	: [frozenset({17, 3, -28, 35, 22}), frozenset({2, 5, -26, -20, -19, 16, 23, -6, 27, -35, -34}), frozenset({-32, 2, 8, -21, -19, 16, 20, -11, -5, -35}), frozenset({-32, 5, 8, -20, -19, 16, 21, -11, -35, -2}), frozenset({-32, 2, 8, -20, -19, 16, 21, -11, -5, -35}), frozenset({2, -30, 6, 7, -19, 16, -8, -5, -35}), frozenset({-32, 2, 11, -20, -19, 16, 21, -8, -5, -35}), frozenset({2, -30, 5, 8, -19, 16, -7, -6, -35}), frozenset({-30, 5, 6, 7, -19, 16, -8, -35, -2}), frozenset({2, -30, 6, 8, -19, 16, -7, -5, -35}), frozenset({6, 8, 11, -21, -19, 16, 23, -7, -35, -2, -33}), frozenset({6, 7, 8, -21, -19, 16, -11, 23, -35, -2, -33}), frozenset({-16, 19, -35, 31})]
464	itemsets left after W operation 	: [frozenset({-16, 2, 19, 36}), frozenset({-32, -28, 5, 8, -20, 17, 21, 22, -11, -36, -3}), frozenset({4, 6, 9, 10, 11, 12, 18, 20, 23, 27, -36, -29, -26, -21, -13, -7, -5}), frozenset({4, 6, 9, 10, 11, 12, 18, 21, 23, 27, -36, -29, -26, -20, -13, -7, -5}), frozenset({4, 6, 7, 10, 11, 13, 18, 20, 23, 26, -36, -29, -27, -21, -12, -9, -5}), frozenset({4, 5, 7, 10, 11, 13, 18, 21, 23, 27, -36, -29, -26, -20, -12, -9, -6}), frozenset({-32, -28, 5, -22, 11, 17, 20, 21, -8, -36, -3}), frozenset({-30, -28, 5, 6, 8, 17, 22, -7, -36, -3}), frozenset({-32, -29, 5, 9, 10, -20, 13, -4, 18, -12, 21, -11, -36}), frozenset({-30, -29, 4, 5, 7, 10, 13, 18, -12, -9, -6, -36}), frozenset({-30, -29, 4, 6, 9, 10, 12, 18, -13, -7, -5, -36}), frozenset({-30, -29, 4, 5, 7, 9, 13, 18, -12, -10, -6, -36}), frozenset({3, -28, 8, -22, 11, 17, 21, 23, -7, -6, -36, -33}), frozenset({-29, 4, 7, 9, 11, -21, 13, 18, -12, -10, 23, -6, -36, -33}), frozenset({-30, -29, 5, 6, 9, 10, -4, 13, 18, -12, -7, -36}), frozenset({3, 4, 5, 9, 10, 12, 15, 17, 18, 22, 23, 24, 26, 27, -36, -34, -25, -20, -14, -13, -6}), frozenset({-28, 5, 6, -26, -23, 17, 20, 22, 27, -36, -3, -34})]
416	itemsets left after W operation 	: [frozenset({16, 2, 37}), frozenset({-30, -28, 5, 6, 7, -17, 19, 22, -8, -37, -3}), frozenset({-30, 3, -28, 6, 7, -5, -17, 19, 22, -8, -37}), frozenset({-30, 3, -28, 5, 8, -17, 19, 22, -7, -6, -37}), frozenset({-30, -29, 4, 6, -5, 9, 10, 13, -18, 19, -12, -7, -37}), frozenset({-30, -29, 4, 5, 7, 9, 13, -19, 18, -12, -10, -6, -37}), frozenset({-30, -29, 4, 6, 7, -5, 10, 13, -19, 18, -12, -9, -37}), frozenset({-30, -29, 4, 5, 9, 10, 13, -18, 19, -12, -7, -6, -37}), frozenset({4, 5, 8, 9, 10, 13, 15, 17, 19, 21, 22, 24, 25, -37, -32, -20, -18, -14, -12, -11, -3}), frozenset({-32, 3, -28, -5, 8, -20, -17, 19, 21, 22, -11, -37}), frozenset({-32, -29, 5, 9, 10, -20, 13, -19, 18, -12, 21, -11, -37, -4}), frozenset({-32, -29, 4, -5, 9, 11, 12, -21, -19, 18, -13, 20, -10, -37}), frozenset({-29, 6, 9, 10, 11, -21, 13, -19, 18, -12, 23, -7, -37, -4, -33}), frozenset({-28, 6, -22, -19, 17, 23, -37, -3, -34, -33}), frozenset({-28, 6, -23, -17, 19, 22, -37, -3, -34, -33}), frozenset({5, -26, 27, -20, -19, 23, -6, -37, -35, -34}), frozenset({-32, -5, 8, -21, -19, 20, -11, -37, -35}), frozenset({-32, -5, 8, -20, -19, 21, -11, -37, -35}), frozenset({-30, 6, 7, -5, -19, -8, -37, -35}), frozenset({-32, -5, 11, -20, -19, 21, -8, -37, -35}), frozenset({-30, 5, 8, -19, -7, -6, -37, -35}), frozenset({-30, 6, -5, 8, -19, -7, -37, -35})]
413	itemsets left after W operation 	: [frozenset({18, -29, 38}), frozenset({-30, 4, 5, 6, 7, 9, 13, -16, 19, -12, -10, -38, -2}), frozenset({-30, 4, 5, 6, 9, 10, 12, -16, 19, -13, -7, -38, -2}), frozenset({-32, 4, 5, 9, 10, -21, 12, -19, 16, -13, 20, -11, -38, -2}), frozenset({-32, 4, 5, 9, 11, -20, 13, -16, 19, -12, 21, -10, -38, -2}), frozenset({4, 6, 7, 9, 10, -23, 12, -16, 19, -13, 21, -11, -38, -2, -33}), frozenset({4, 6, 9, 10, 11, 12, 20, 23, -38, 27, -36, -26, -21, -13, -7, -5}), frozenset({4, 6, 9, 10, 11, 12, 21, 23, -38, 27, -36, -26, -20, -13, -7, -5}), frozenset({4, 6, 7, 10, 11, 13, 20, 23, -38, 26, -36, -27, -21, -12, -9, -5}), frozenset({4, 5, 7, 10, 11, 13, 21, 23, -38, 27, -36, -26, -20, -12, -9, -6}), frozenset({-32, 5, 9, 10, -20, 13, -4, -12, 21, -11, -38, -36}), frozenset({-30, -6, 4, 5, 7, 10, 13, -12, -9, -38, -36}), frozenset({-30, 4, 6, 9, 10, 12, -13, -7, -38, -5, -36}), frozenset({-30, -6, 4, 5, 7, 9, 13, -12, -10, -38, -36}), frozenset({-6, 4, 7, 9, 11, -21, 13, -12, -10, 23, -38, -36, -33}), frozenset({-30, 5, 6, 9, 10, -4, 13, -12, -7, -38, -36}), frozenset({-30, -6, 4, 5, 7, 9, 13, -19, -12, -10, -38, -37}), frozenset({-30, 4, 6, 7, -5, 10, 13, -19, -12, -9, -38, -37}), frozenset({-32, 5, 9, 10, -20, 13, -19, -12, 21, -11, -38, -37, -4}), frozenset({-32, 4, -5, 9, 11, 12, -21, -19, -13, 20, -10, -38, -37}), frozenset({6, 9, 10, 11, -21, 13, -19, -12, 23, -7, -38, -37, -4, -33})]
332	itemsets left after W operation 	: [frozenset({-2, 5, 6, 39}), frozenset({3, -28, -26, 8, -22, 11, -16, 17, 19, 20, 21, 23, -7, 27, -39}), frozenset({16, -19, -30, 7, -8, -39, -35}), frozenset({-30, 3, -28, 8, -17, 16, 19, 22, -7, -39}), frozenset({-30, -29, 4, 9, 10, 13, -18, 16, 19, -12, -7, -39}), frozenset({-31, -26, 8, 11, -20, 21, 23, -7, 27, -39}), frozenset({-31, -30, 7, -8, -39}), frozenset({-31, -30, 8, -7, -39}), frozenset({-31, 20, -26, -23, 27, -39, -34}), frozenset({-30, 4, 7, 9, 13, -16, 19, -12, -10, -39, -38}), frozenset({-30, 4, 9, 10, 12, -16, 19, -13, -7, -38, -39})]
331	itemsets left after W operation 	: [frozenset({40, -12, 13}), frozenset({4, 9, 10, 15, -14, 18, -40, 24, 28, 25}), frozenset({-30, -6, 4, 5, 7, 9, -10, -40, -38, -36}), frozenset({-6, 4, 7, 9, 11, -21, -10, 23, -40, -38, -36, -33}), frozenset({-30, 5, 6, 9, 10, -4, -40, -7, -38, -36}), frozenset({-30, -6, 4, 5, 7, 9, -19, -10, -40, -38, -37}), frozenset({-30, 4, 6, 7, -5, 10, -19, -9, -40, -38, -37}), frozenset({-32, 5, 9, 10, -20, -19, 21, -11, -40, -38, -37, -4}), frozenset({6, 9, 10, 11, -21, -19, 23, -40, -7, -38, -37, -4, -33}), frozenset({-30, -29, 4, 6, -5, 9, 10, -18, 19, -40, -7, -37}), frozenset({-30, -29, 4, 5, 9, 10, -18, 19, -40, -7, -6, -37}), frozenset({4, 5, 8, 9, 10, 15, 17, 19, 21, 22, 24, 25, -40, -37, -32, -20, -18, -14, -11, -3}), frozenset({-30, -29, 4, 9, 10, -18, 16, 19, -40, -7, -39}), frozenset({-30, 4, 7, 9, -16, 19, -10, -40, -39, -38}), frozenset({-32, 4, 5, 9, 11, -20, -16, 19, 21, -10, -40, -38, -2}), frozenset({-38, 4, -27, 6, 7, 10, 11, -21, 20, 23, -9, -40, 26, -5, -36}), frozenset({-38, 4, 5, -26, 7, 10, 11, -20, 23, 21, -9, -40, -6, 27, -36}), frozenset({-32, 5, 9, 10, -20, -4, 21, -11, -40, -38, -36}), frozenset({-30, -6, 4, 5, 7, 10, -9, -40, -38, -36})]
326	itemsets left after W operation 	: [frozenset({9, 4, 41}), frozenset({-30, 10, 12, -16, 19, -13, -41, -7, -38, -39}), frozenset({3, 5, 10, 12, 15, 17, 18, 22, 23, 24, -41, 26, 27, -36, -34, -25, -20, -14, -13, -6}), frozenset({10, 15, 18, -14, -41, -40, 24, 28, 25}), frozenset({-30, -6, 5, 7, -10, -41, -40, -38, -36}), frozenset({-6, 7, 11, -21, 23, -10, -41, -40, -38, -36, -33}), frozenset({-30, -6, 5, 7, -19, -10, -41, -40, -38, -37}), frozenset({-30, -29, 6, -5, 10, -18, 19, -41, -40, -7, -37}), frozenset({-30, -29, 5, 10, -18, 19, -41, -40, -7, -6, -37}), frozenset({5, 8, 10, 15, 17, 19, 21, 22, -41, 24, 25, -40, -37, -32, -20, -18, -14, -11, -3}), frozenset({-30, -29, 10, -18, 16, 19, -41, -40, -7, -39}), frozenset({-30, 7, -16, 19, -10, -41, -40, -39, -38}), frozenset({-32, 5, 11, -20, -16, 19, 21, -10, -41, -40, -38, -2}), frozenset({-32, 5, 10, -21, 12, -19, 16, -13, 20, -11, -41, -38, -2}), frozenset({6, 7, -23, 10, 12, -16, 19, -13, 21, -11, -41, -38, -2, -33}), frozenset({6, -26, 27, 10, 11, 12, -21, -13, 20, 23, -41, -7, -38, -5, -36}), frozenset({6, -26, 27, 10, 11, 12, -20, -13, 23, 21, -41, -7, -38, -5, -36}), frozenset({-30, 6, 10, 12, -13, -41, -7, -38, -5, -36}), frozenset({-32, -5, 11, 12, -21, -19, -13, 20, -10, -41, -38, -37})]
294	itemsets left after W operation 	: [frozenset({42, 27, -26, 23}), frozenset({32, -42, 6, 7}), frozenset({5, -20, -19, -42, -6, -37, -35, -34}), frozenset({6, 10, 11, 12, -21, -13, 20, -42, -41, -7, -38, -5, -36}), frozenset({3, -28, 8, -22, 11, -16, 17, 19, 20, 21, -42, -7, -39}), frozenset({-31, 2, 5, -42, -6, -20, -34}), frozenset({6, 10, 11, 12, -20, -13, 21, -42, -41, -7, -38, -5, -36}), frozenset({-31, 8, 11, -20, 21, -42, -39, -7}), frozenset({-38, 4, 5, 7, 10, 11, -20, 21, -42, -9, -40, -6, -36})]
178	itemsets left after W operation 	: [frozenset({19, 43, 3, -28}), frozenset({-30, 6, 7, -5, -17, -43, 22, -8, -37}), frozenset({-30, 5, 8, -17, -43, 22, -7, -6, -37}), frozenset({-32, -5, 8, -20, -17, 21, 22, -11, -43, -37}), frozenset({-32, 5, -22, 11, -16, 17, 20, 21, -43, -8, -2}), frozenset({-30, 8, -17, 16, -43, 22, -39, -7}), frozenset({8, -22, 11, -16, 17, 20, 21, -42, -43, -7, -39}), frozenset({6, -22, -16, 17, -43, -2, 23, -34, -33})]
170	itemsets left after W operation 	: [frozenset({-7, 11, 44, 6}), frozenset({-31, 2, -27, 8, -21, 20, -44, 23, 26, -5}), frozenset({10, -21, 12, -13, 20, -44, -42, -41, -38, -5, -36}), frozenset({10, 12, -20, -13, -44, 21, -42, -41, -38, -5, -36}), frozenset({-31, -44, 23, 8, -21, -2, -33}), frozenset({9, 10, -21, -19, -44, 23, -40, -38, -37, -4, -33}), frozenset({8, -21, -19, 16, -44, 23, -35, -2, -33})]
134	itemsets left after W operation 	: [frozenset({5, 45, 21}), frozenset({-32, -31, -45, -8, 11, -20, -2}), frozenset({-32, -31, -45, -11, 8, -20, -2}), frozenset({-38, 4, 7, 10, 11, -20, -45, -42, -9, -40, -6, -36}), frozenset({-32, -22, 11, -16, 17, -45, 20, -43, -8, -2}), frozenset({-32, 9, 10, -20, -19, -45, -11, -40, -38, -37, -4}), frozenset({-32, 9, 10, -20, -4, -45, -11, -40, -38, -36}), frozenset({-32, 8, -20, -19, 16, -45, -11, -35, -2}), frozenset({-32, -28, 8, -20, 17, -45, -11, 22, -36, -3}), frozenset({-32, -28, -22, 11, 17, -45, 20, -8, -36, -3}), frozenset({8, 10, 15, 17, 19, -45, 22, -41, 24, 25, -40, -37, -32, -20, -18, -14, -11, -3}), frozenset({-32, 11, -20, -16, 19, -45, -10, -41, -40, -38, -2})]
Initial DL				: 32415.119743342657
Final DL				: 6159.087980581221
Compression (wrt me)	: 0.8099933602174596
Operator Counters		: {'D': 0, 'W': 18, 'V': 0, 'S': 0, 'R': 0, 'T': 0}
Misle Learning Runtime	: 4.568659782409668


Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 16, 11])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 24, 22])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 24, 8])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 24, 23])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 15, 26])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 12, 25])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 10, 13])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 26, 23])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 23, 18])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 12, 15])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 14, 13])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 27, 22])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 21, 16])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 26, 8])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 16, 8])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 19, 22])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 12, 15])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 24, 6])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 27, 17])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 15, 22])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 9, 2])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 23, 8])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 20, 27])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 16, 8])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 13, 12])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 27, 16])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 1.9237845487845486 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 15, 6])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 15, 4])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 22, 20])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 19, 6])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 13, 11])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 18, 10])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 12, 21])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 19, 8])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 12, 22])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 26, 2])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 22, 26])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 21, 5])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 11, 16])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 18, 2])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 19, 24])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 17, 23])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 4
Incorrect Prediction at tie level: [3, 3, 4]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 7, 3])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 26, 6])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 22, 2])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 22, 18])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 12, 8])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 4, 26])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 13, 9])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 16, 15])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 25, 17])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 9, 7])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 22, 10])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 21, 5])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 24, 21])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 21, 26])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 24, 5])
Tie Breaking: Level 4
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [4, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 14, 25])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 10, 13])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3
Incorrect Prediction at tie level: [3, 3, 3]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 27, 10])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([22, 13, 10])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 24, 23])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 4
Incorrect Prediction at tie level: [3, 3, 4]

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 22, 25])
Tie Breaking: Level 3
Tie Breaking: Level 3
Tie Breaking: Level 3

Max Score = 0.0 tied among 8/8 candidates.
Min Score = 0.7753968253968253 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 23, 8])
Tie Breaking: Level 3
Tie Breaking: Level 4
Tie Breaking: Level 3

Dataset				: ecoli.dat
Metric				: length
Minsups				: [3]
MF Accuracy			: [(0.7833333333333333, 0.21875, 60, 64)]
Mistle Accuracy		: [0.75]
CNFAlgo Accuracy	: []
Randomized Accuracy	: [0.125]

# Test Examples		: 64
Mistle # Ties		: [(0, 0)]
CNFAlgo # Ties		: []
