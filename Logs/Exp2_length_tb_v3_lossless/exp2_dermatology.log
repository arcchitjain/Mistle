>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 87
 Number of frequent closed itemsets: 17688
 Total time ~: 368 ms
Current Minsup[0.5] yields 17688 itemsets.
Top-k minsup for at least 10000 paterns = 0.5 or 44
1  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({2, 3, 4, 5, 7, 8, 9, 11, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 34, 36, 37, 38, 40, 41, 42, 44, -43, -39, -35, -33, -29, -27, -23, -19, -17, -13, -10, -6})}
DL of initial theory	: 59173.41314872611
9062	itemsets left after W operation 	: [frozenset({2, 4, 5, 7, 8, 11, 15, 26, 28, 30, -33, 32, 31, 34, -29, -27, 45}), frozenset({3, 9, 13, 14, 17, 18, 19, -44, 21, 22, 23, -40, 25, -45, -35, 36, 37, 38, 39, -24, 41, 42, 43, -20, -16, -12, -10, -6}), frozenset({3, 9, 12, 14, 16, 18, -45, 20, 21, 22, -43, 24, 25, -41, -37, 35, 36, 38, 39, 40, -23, 42, 44, -19, -17, -13, -10, -6}), frozenset({3, 10, 12, 14, 16, 18, 19, 20, -43, 22, -45, 24, 25, -40, -35, 36, 37, 38, 39, 41, 42, -23, 44, -21, -17, -13, -9, -6}), frozenset({3, 10, 12, 14, 16, 17, 19, -44, 21, 22, -41, 24, 25, -38, -45, 35, 36, 37, 39, 40, -23, 42, 43, -20, -18, -13, -9, -6}), frozenset({3, 10, 12, 14, 16, 18, 19, 20, 21, -43, 23, 24, -40, -45, -36, 35, 37, 38, 39, -25, 41, 42, -22, 44, -17, -13, -9, -6}), frozenset({3, 10, 12, 14, 16, 17, 19, -45, 21, 22, -43, 24, 25, -41, -37, 35, 36, 38, 39, 40, -23, 42, 44, -20, -18, -13, -9, -6}), frozenset({6, 10, 12, 13, 16, 18, -45, 20, 21, 22, 23, -43, 25, -42, -37, 35, 36, 38, 39, 40, 41, -24, 44, -19, -17, -14, -9, -3}), frozenset({3, 10, 13, 14, 16, 18, -45, 20, 21, 22, -44, 24, 25, -41, -38, 35, 36, 37, 39, 40, -23, 42, 43, -19, -17, -12, -9, -6}), frozenset({3, 10, 12, 14, 16, 18, -45, 20, 21, 22, -43, 24, 25, -39, -36, 35, 37, 38, 40, 41, 42, -23, 44, -19, -17, -13, -9, -6}), frozenset({3, 10, 12, 13, 16, 18, -45, 20, 21, 22, 23, -43, 25, -40, -35, 36, 37, 38, 39, -24, 41, 42, 44, -19, -17, -14, -9, -6}), frozenset({3, 10, 13, 14, 17, 18, -45, 20, 21, 22, -44, 24, 25, -40, -36, 35, 37, 38, 39, 41, 42, 43, -23, -19, -16, -12, -9, -6}), frozenset({3, 9, 12, 13, 16, 18, 19, -44, 21, 22, 23, -41, 25, -45, -37, 35, 36, 38, 39, 40, -24, 42, 43, -20, -17, -14, -10, -6}), frozenset({3, 9, 12, 13, 16, 17, -45, 20, 21, 22, -44, 24, 25, -42, -38, 35, 36, 37, 39, 40, 41, -23, 43, -19, -18, -14, -10, -6}), frozenset({3, 10, 12, 14, 16, 17, -45, 20, 21, 22, 23, -43, 25, -39, -38, 35, 36, 37, 40, 41, 42, -24, 44, -19, -18, -13, -9, -6}), frozenset({3, 9, 12, 13, 16, 18, 19, 20, -43, 22, -45, 24, 25, -39, -37, 35, 36, 38, 40, 41, 42, -23, 44, -21, -17, -14, -10, -6}), frozenset({3, 10, 12, 14, 16, 17, -45, 20, 21, 22, -43, 24, 25, -41, -37, 35, 36, 38, 39, 40, -23, 42, 44, -19, -18, -13, -9, -6}), frozenset({3, 9, 12, 13, 16, 18, 19, 20, -43, 22, 23, -40, 25, -45, -35, 36, 37, 38, 39, -24, 41, 42, -21, 44, -17, -14, -10, -6}), frozenset({3, 10, 12, 14, 16, 18, 19, 20, -44, 22, -41, 24, 25, -45, -37, 35, 36, 38, 39, 40, -23, 42, 43, -21, -17, -13, -9, -6}), frozenset({3, 10, 12, 14, 16, 17, 19, -45, 21, 22, -43, 24, 25, -40, -37, 35, 36, 38, 39, 41, 42, -23, 44, -20, -18, -13, -9, -6}), frozenset({6, 10, 12, 14, 16, 18, -45, 20, 21, 22, -43, 24, 25, -39, -35, 36, 37, 38, 40, 41, 42, -23, 44, -19, -17, -13, -9, -3}), frozenset({3, 10, 13, 14, 16, 18, 19, 20, -43, 22, 23, 24, -39, -45, -35, 36, 37, 38, -25, 40, 41, 42, -21, 44, -17, -12, -9, -6}), frozenset({3, 10, 12, 14, 16, 18, 19, -44, 21, 22, -45, 24, 25, -40, -35, 36, 37, 38, 39, 41, 42, 43, -23, -20, -17, -13, -9, -6}), frozenset({3, 10, 13, 14, 16, 17, -45, 20, 21, 22, 23, -43, 25, -41, -35, 36, 37, 38, 39, 40, -24, 42, 44, -19, -18, -12, -9, -6}), frozenset({3, 9, 12, 14, 16, 18, -45, 20, 21, 22, -44, 24, 25, -42, -38, 35, 36, 37, 39, 40, 41, -23, 43, -19, -17, -13, -10, -6}), frozenset({3, 10, 12, 14, 16, 18, -45, 20, 21, 22, -43, 24, 25, -41, -37, 35, 36, 38, 39, 40, -23, 42, 44, -19, -17, -13, -9, -6}), frozenset({3, 10, 12, 13, 16, 18, 19, -44, 21, 22, -41, 24, 25, -45, -36, 35, 37, 38, 39, 40, -23, 42, 43, -20, -17, -14, -9, -6}), frozenset({3, 9, 12, 14, 16, 18, -45, 20, 21, 22, -43, 24, 25, -42, -38, 35, 36, 37, 39, 40, 41, -23, 44, -19, -17, -13, -10, -6}), frozenset({6, 9, 12, 13, 16, 18, 19, -44, 21, 22, 23, -41, 25, -45, -37, 35, 36, 38, 39, 40, -24, 42, 43, -20, -17, -14, -10, -3}), frozenset({3, 9, 12, 14, 16, 17, 19, 20, -44, 22, -41, 24, 25, -45, -35, 36, 37, 38, 39, 40, -23, 42, 43, -21, -18, -13, -10, -6}), frozenset({6, 10, 12, 14, 16, 18, -45, 20, 21, 22, -44, 24, 25, -41, -37, 35, 36, 38, 39, 40, -23, 42, 43, -19, -17, -13, -9, -3}), frozenset({3, 10, 13, 14, 16, 18, -45, 20, 21, 22, -43, 24, 25, -39, -37, 35, 36, 38, 40, 41, 42, -23, 44, -19, -17, -12, -9, -6}), frozenset({6, 10, 12, 13, 17, 18, 19, 20, -43, 22, 23, -45, 25, -39, -35, 36, 37, 38, 40, 41, 42, -24, 44, -21, -16, -14, -9, -3}), frozenset({3, 10, 12, 13, 16, 18, 19, -45, 21, 22, -43, 24, 25, -41, -37, 35, 36, 38, 39, 40, -23, 42, 44, -20, -17, -14, -9, -6}), frozenset({3, 9, 12, 14, 16, 17, -45, 20, 21, 22, -43, 24, 25, -41, -37, 35, 36, 38, 39, 40, -23, 42, 44, -19, -18, -13, -10, -6}), frozenset({3, 10, 12, 14, 16, 18, 19, -44, 21, 22, 23, -45, 25, -39, -37, 35, 36, 38, 40, 41, 42, 43, -24, -20, -17, -13, -9, -6}), frozenset({3, 9, 12, 13, 16, 18, -45, 20, 21, 22, -44, 24, 25, -41, -37, 35, 36, 38, 39, 40, -23, 42, 43, -19, -17, -14, -10, -6}), frozenset({3, 10, 12, 14, 16, 18, -45, 20, 21, 22, 23, -43, 25, -40, -35, 36, 37, 38, 39, -24, 41, 42, 44, -19, -17, -13, -9, -6}), frozenset({6, 9, 12, 13, 16, 17, -45, 20, 21, 22, 23, -43, 25, -39, -37, 35, 36, 38, 40, 41, 42, -24, 44, -19, -18, -14, -10, -3}), frozenset({6, 9, 12, 14, 16, 18, -45, 20, 21, 22, -44, 24, 25, -40, -35, 36, 37, 38, 39, 41, 42, 43, -23, -19, -17, -13, -10, -3}), frozenset({3, 9, 12, 13, 16, 17, -45, 20, 21, 22, -43, 24, 25, -42, -37, 35, 36, 38, 39, 40, 41, -23, 44, -19, -18, -14, -10, -6}), frozenset({3, 9, 12, 14, 16, 18, 19, 20, -43, 22, 23, 24, -39, -45, -35, 36, 37, 38, -25, 40, 41, 42, -21, 44, -17, -13, -10, -6}), frozenset({3, 10, 12, 14, 16, 18, -45, 20, 21, 22, -43, 24, 25, -41, -38, 35, 36, 37, 39, 40, -23, 42, 44, -19, -17, -13, -9, -6}), frozenset({3, 10, 12, 14, 16, 18, -45, 20, 21, 22, 23, -43, 25, -41, -37, 35, 36, 38, 39, 40, -24, 42, 44, -19, -17, -13, -9, -6}), frozenset({3, 9, 12, 13, 16, 18, -45, 20, 21, 22, 23, -44, 25, -41, -37, 35, 36, 38, 39, 40, -24, 42, 43, -19, -17, -14, -10, -6}), frozenset({3, 9, 12, 14, 16, 18, -45, 20, 21, 22, -43, 24, 25, -39, -35, 36, 37, 38, 40, 41, 42, -23, 44, -19, -17, -13, -10, -6}), frozenset({6, 10, 12, 14, 16, 18, -45, 20, 21, 22, -43, 24, 25, -40, -35, 36, 37, 38, 39, 41, 42, -23, 44, -19, -17, -13, -9, -3}), frozenset({3, 9, 12, 14, 16, 18, 19, 20, 21, -43, -45, 24, 25, -39, -37, 35, 36, 38, 40, 41, 42, -23, 44, -22, -17, -13, -10, -6}), frozenset({3, 10, 12, 14, 16, 18, 19, 20, -43, 22, 23, 24, -40, -45, -37, 35, 36, 38, 39, -25, 41, 42, -21, 44, -17, -13, -9, -6}), frozenset({3, 9, 12, 14, 16, 18, 19, 20, -43, 22, 23, 24, -42, -45, -35, 36, 37, 38, 39, 40, 41, -25, -21, 44, -17, -13, -10, -6}), frozenset({3, 10, 12, 14, 16, 18, 19, 20, -44, 22, 23, 24, -39, -38, -45, 35, 36, 37, -25, 40, 41, 42, 43, -21, -17, -13, -9, -6}), frozenset({3, 10, 12, 13, 16, 18, -45, 20, 21, 22, -43, 24, 25, -39, -37, 35, 36, 38, 40, 41, 42, -23, 44, -19, -17, -14, -9, -6}), frozenset({3, 10, 12, 14, 16, 18, 19, 20, -43, 22, 23, 24, -41, -45, -35, 36, 37, 38, 39, 40, -25, 42, -21, 44, -17, -13, -9, -6}), frozenset({6, 9, 12, 13, 16, 17, -45, 20, 21, 22, -43, 24, 25, -39, -37, 35, 36, 38, 40, 41, 42, -23, 44, -19, -18, -14, -10, -3}), frozenset({3, 10, 12, 14, 16, 18, 19, -45, 21, 22, -43, 24, 25, -41, -37, 35, 36, 38, 39, 40, -23, 42, 44, -20, -17, -13, -9, -6}), frozenset({3, 9, 12, 13, 16, 18, -45, 20, 21, 22, -43, 24, 25, -41, -37, 35, 36, 38, 39, 40, -23, 42, 44, -19, -17, -14, -10, -6}), frozenset({3, 10, 12, 13, 16, 18, 19, 20, -43, 22, 23, -41, 25, -45, -37, 35, 36, 38, 39, 40, -24, 42, -21, 44, -17, -14, -9, -6}), frozenset({3, 10, 12, 13, 16, 18, -45, 20, 21, 22, -43, 24, 25, -42, -37, 35, 36, 38, 39, 40, 41, -23, 44, -19, -17, -14, -9, -6}), frozenset({3, 9, 12, 14, 16, 17, -45, 20, 21, 22, -43, 24, 25, -39, -38, 35, 36, 37, 40, 41, 42, -23, 44, -19, -18, -13, -10, -6}), frozenset({3, 10, 12, 14, 17, 18, -45, 20, 21, 22, -43, 24, 25, -41, -37, 35, 36, 38, 39, 40, -23, 42, 44, -19, -16, -13, -9, -6}), frozenset({3, 9, 12, 14, 16, 17, -45, 20, 21, 22, 23, -43, 25, -41, -36, 35, 37, 38, 39, 40, -24, 42, 44, -19, -18, -13, -10, -6}), frozenset({3, 10, 12, 13, 16, 18, 19, 20, 21, -43, 23, 24, -41, -38, -45, 35, 36, 37, 39, 40, -25, 42, -22, 44, -17, -14, -9, -6}), frozenset({3, 10, 12, 13, 16, 18, -45, 20, 21, 22, -43, 24, 25, -41, -38, 35, 36, 37, 39, 40, -23, 42, 44, -19, -17, -14, -9, -6}), frozenset({3, 10, 12, 14, 16, 18, 19, 20, -44, 22, 23, 24, -41, -45, -37, 35, 36, 38, 39, 40, -25, 42, 43, -21, -17, -13, -9, -6}), frozenset({3, 10, 12, 14, 16, 18, -45, 20, 21, 22, 23, -43, 25, -40, -36, 35, 37, 38, 39, -24, 41, 42, 44, -19, -17, -13, -9, -6}), frozenset({3, 10, 13, 14, 17, 18, -45, 20, 21, 22, 23, -43, 25, -39, -37, 35, 36, 38, 40, 41, 42, -24, 44, -19, -16, -12, -9, -6}), frozenset({3, 9, 12, 14, 16, 18, -45, 20, 21, 22, 23, 24, -43, -41, -38, 35, 36, 37, 39, 40, -25, 42, 44, -19, -17, -13, -10, -6}), frozenset({6, 9, 12, 14, 16, 18, 19, 20, -43, 22, -45, 24, 25, -40, -37, 35, 36, 38, 39, 41, 42, -23, 44, -21, -17, -13, -10, -3}), frozenset({3, 9, 12, 13, 16, 17, 19, 20, 21, -43, 23, 24, -39, -45, -35, 36, 37, 38, -25, 40, 41, 42, -22, 44, -18, -14, -10, -6}), frozenset({3, 9, 12, 14, 16, 18, 19, 20, 21, -44, 23, -40, 25, -45, -36, 35, 37, 38, 39, -24, 41, 42, 43, -22, -17, -13, -10, -6}), frozenset({6, 9, 13, 14, 16, 18, 19, -45, 21, 22, -43, 24, 25, -42, -37, 35, 36, 38, 39, 40, 41, -23, 44, -20, -17, -12, -10, -3})]
2563	itemsets left after W operation 	: [frozenset({3, 4, 7, 11, 15, 25, 28, 30, 31, 32, -33, 34, -29, -27, 38, 42, 46}), frozenset({2, 5, 9, 10, 12, 13, 17, 18, -46, 20, 21, 22, -43, 24, -39, 26, -35, 36, 37, 40, 41, -23, 44, -19, -16, -14, -8, -6}), frozenset({2, 5, 9, 10, 13, 14, 17, 18, 19, -46, 21, 22, 23, -43, -40, 26, -36, 35, 37, 39, -24, 41, 44, -20, -16, -12, -8, -6}), frozenset({2, 5, 9, 10, 12, 14, 16, 18, 19, -44, 21, 22, 23, -41, -46, 26, -37, 35, 36, 39, 40, -24, 43, -20, -17, -13, -8, -6}), frozenset({2, 5, 8, 10, 12, 14, 16, 18, 19, 20, 21, -43, 23, 24, -41, -46, -35, 36, 37, -26, 39, 40, -22, 44, -17, -13, -9, -6}), frozenset({2, 6, 8, 10, 12, 14, 16, 18, 19, 20, 21, -44, -41, 24, -46, 26, -37, 35, 36, 39, 40, -23, -22, 43, -17, -13, -9, -5}), frozenset({2, 5, 8, 10, 12, 13, 16, 17, -46, 19, 20, 21, -43, 23, 24, -40, -37, 35, 36, -26, 39, 41, -22, 44, -18, -14, -9, -6}), frozenset({5, 6, 9, 10, 13, 14, 17, 18, 19, -46, 21, 22, 23, -43, -41, 26, -37, 35, 36, 39, 40, -24, 44, -20, -16, -12, -8, -2}), frozenset({2, 6, 8, 10, 12, 13, 16, 18, 19, -46, 21, 22, -43, 24, -41, 26, -37, 35, 36, 39, 40, -23, 44, -20, -17, -14, -9, -5}), frozenset({2, 6, 9, 10, 12, 14, 16, 18, 19, 20, -43, 22, -41, 24, -46, 26, -37, 35, 36, 39, 40, -23, -21, 44, -17, -13, -8, -5}), frozenset({2, 6, 8, 10, 12, 14, 16, 18, -46, 20, 21, 22, 23, -43, -40, 26, -37, 35, 36, 39, -24, 41, 44, -19, -17, -13, -9, -5}), frozenset({5, 6, 8, 9, 12, 14, 17, 18, 19, -46, 21, 22, -43, 24, -40, 26, -37, 35, 36, 39, 41, -23, 44, -20, -16, -13, -10, -2})]
134	itemsets left after W operation 	: [frozenset({32, 34, -29, -27, 7, 11, 31, 15, 47, 28, 30, -33}), frozenset({2, 3, 5, 6, 8, 10, 12, 14, 16, 18, 20, 21, 22, 24, 25, 26, 35, 36, 37, 40, 41, 42, 44, -47, -43, -39, -38, -23, -19, -17, -13, -9, -4}), frozenset({2, 3, 4, 5, 8, 9, 12, 13, 16, 17, 19, 20, 21, 23, 24, 25, 35, 36, 37, 39, 40, 41, 43, -47, -44, -42, -38, -26, -22, -18, -14, -10, -6}), frozenset({3, 4, 5, 6, 8, 10, 12, 14, 16, 18, 19, 20, 21, 23, 24, 26, 35, 36, 38, 39, 40, 41, 43, -47, -44, -42, -37, -25, -22, -17, -13, -9, -2}), frozenset({-47, 2, 4, 5, 8, 26, 45}), frozenset({-47, 3, 4, 38, 25, 42, 46})]
# of frequent itemsets	: 883
Time of DCI Closed		: 0.38628387451171875
882	itemsets left after W operation 	: [frozenset({16, 48, 3, -45, 22, -6, 12}), frozenset({9, 14, -48, 18, 20, 21, -43, -41, 24, 25, -37, 35, 36, 38, 39, 40, -23, 42, 44, -19, -17, -13, -10}), frozenset({10, 14, -48, 18, 19, 20, -43, 24, 25, -40, -35, 36, 37, 38, 39, 41, 42, -23, 44, -21, -17, -13, -9}), frozenset({10, 14, -48, 17, 19, -44, 21, -41, 24, 25, -38, 35, 36, 37, 39, 40, -23, 42, 43, -20, -18, -13, -9}), frozenset({10, 14, -48, 17, 19, 21, -43, -41, 24, 25, -37, 35, 36, 38, 39, 40, -23, 42, 44, -20, -18, -13, -9}), frozenset({10, 14, -48, 18, 20, 21, -43, 24, 25, -39, -36, 35, 37, 38, 40, 41, 42, -23, 44, -19, -17, -13, -9}), frozenset({10, 13, -48, 18, 20, 21, -43, 23, -40, 25, -35, 36, 37, 38, 39, -24, 41, 42, 44, -19, -17, -14, -9}), frozenset({9, 13, -48, 18, 19, -44, 21, 23, -41, 25, -37, 35, 36, 38, 39, 40, -24, 42, 43, -20, -17, -14, -10}), frozenset({9, 13, -48, 17, 20, 21, -44, -42, 24, 25, -38, 35, 36, 37, 39, 40, 41, -23, 43, -19, -18, -14, -10}), frozenset({10, 14, -48, 17, 20, 21, -43, 23, 25, -39, -38, 35, 36, 37, 40, 41, 42, -24, 44, -19, -18, -13, -9}), frozenset({9, 13, -48, 18, 19, 20, -43, 24, 25, -39, -37, 35, 36, 38, 40, 41, 42, -23, 44, -21, -17, -14, -10}), frozenset({10, 14, -48, 17, 20, 21, -43, -41, 24, 25, -37, 35, 36, 38, 39, 40, -23, 42, 44, -19, -18, -13, -9}), frozenset({9, 13, -48, 18, 19, 20, -43, 23, -40, 25, -35, 36, 37, 38, 39, -24, 41, 42, -21, 44, -17, -14, -10}), frozenset({10, 14, -48, 18, 19, 20, -44, -41, 24, 25, -37, 35, 36, 38, 39, 40, -23, 42, 43, -21, -17, -13, -9}), frozenset({10, 14, -48, 17, 19, 21, -43, 24, 25, -40, -37, 35, 36, 38, 39, 41, 42, -23, 44, -20, -18, -13, -9}), frozenset({10, 14, -48, 18, 19, -44, 21, 24, 25, -40, -35, 36, 37, 38, 39, 41, 42, 43, -23, -20, -17, -13, -9}), frozenset({9, 14, -48, 18, 20, 21, -44, -42, 24, 25, -38, 35, 36, 37, 39, 40, 41, -23, 43, -19, -17, -13, -10}), frozenset({10, 14, -48, 18, 20, 21, -43, -41, 24, 25, -37, 35, 36, 38, 39, 40, -23, 42, 44, -19, -17, -13, -9}), frozenset({10, 13, -48, 18, 19, -44, 21, -41, 24, 25, -36, 35, 37, 38, 39, 40, -23, 42, 43, -20, -17, -14, -9}), frozenset({9, 14, -48, 18, 20, 21, -43, -42, 24, 25, -38, 35, 36, 37, 39, 40, 41, -23, 44, -19, -17, -13, -10}), frozenset({9, 14, -48, 17, 19, 20, -44, -41, 24, 25, -35, 36, 37, 38, 39, 40, -23, 42, 43, -21, -18, -13, -10}), frozenset({10, 13, -48, 18, 19, 21, -43, -41, 24, 25, -37, 35, 36, 38, 39, 40, -23, 42, 44, -20, -17, -14, -9}), frozenset({9, 14, -48, 17, 20, 21, -43, -41, 24, 25, -37, 35, 36, 38, 39, 40, -23, 42, 44, -19, -18, -13, -10}), frozenset({10, 14, -48, 18, 19, -44, 21, 23, 25, -39, -37, 35, 36, 38, 40, 41, 42, 43, -24, -20, -17, -13, -9}), frozenset({9, 13, -48, 18, 20, 21, -44, -41, 24, 25, -37, 35, 36, 38, 39, 40, -23, 42, 43, -19, -17, -14, -10}), frozenset({10, 14, -48, 18, 20, 21, -43, 23, -40, 25, -35, 36, 37, 38, 39, -24, 41, 42, 44, -19, -17, -13, -9}), frozenset({9, 13, -48, 17, 20, 21, -43, -42, 24, 25, -37, 35, 36, 38, 39, 40, 41, -23, 44, -19, -18, -14, -10}), frozenset({9, 14, -48, 18, 19, 20, -43, 23, 24, -39, -35, 36, 37, 38, -25, 40, 41, 42, -21, 44, -17, -13, -10}), frozenset({10, 14, -48, 18, 20, 21, -43, -41, 24, 25, -38, 35, 36, 37, 39, 40, -23, 42, 44, -19, -17, -13, -9}), frozenset({10, 14, -48, 18, 20, 21, -43, 23, -41, 25, -37, 35, 36, 38, 39, 40, -24, 42, 44, -19, -17, -13, -9}), frozenset({9, 13, -48, 18, 20, 21, -44, 23, -41, 25, -37, 35, 36, 38, 39, 40, -24, 42, 43, -19, -17, -14, -10}), frozenset({9, 14, -48, 18, 20, 21, -43, 24, 25, -39, -35, 36, 37, 38, 40, 41, 42, -23, 44, -19, -17, -13, -10}), frozenset({10, 14, -48, 18, 19, 20, -43, 23, 24, -40, -37, 35, 36, 38, 39, -25, 41, 42, -21, 44, -17, -13, -9}), frozenset({9, 14, -48, 18, 19, 20, -43, -42, 23, 24, -35, 36, 37, 38, 39, 40, 41, -25, -21, 44, -17, -13, -10}), frozenset({10, 14, -48, 18, 19, 20, -44, 23, 24, -39, -38, 35, 36, 37, -25, 40, 41, 42, 43, -21, -17, -13, -9}), frozenset({10, 13, -48, 18, 20, 21, -43, 24, 25, -39, -37, 35, 36, 38, 40, 41, 42, -23, 44, -19, -17, -14, -9}), frozenset({10, 14, -48, 18, 19, 20, -43, 23, 24, -41, -35, 36, 37, 38, 39, 40, -25, 42, -21, 44, -17, -13, -9}), frozenset({10, 14, -48, 18, 19, 21, -43, -41, 24, 25, -37, 35, 36, 38, 39, 40, -23, 42, 44, -20, -17, -13, -9}), frozenset({9, 13, -48, 18, 20, 21, -43, -41, 24, 25, -37, 35, 36, 38, 39, 40, -23, 42, 44, -19, -17, -14, -10}), frozenset({10, 13, -48, 18, 19, 20, -43, 23, -41, 25, -37, 35, 36, 38, 39, 40, -24, 42, -21, 44, -17, -14, -9}), frozenset({10, 13, -48, 18, 20, 21, -43, -42, 24, 25, -37, 35, 36, 38, 39, 40, 41, -23, 44, -19, -17, -14, -9}), frozenset({9, 14, -48, 17, 20, 21, -43, 24, 25, -39, -38, 35, 36, 37, 40, 41, 42, -23, 44, -19, -18, -13, -10}), frozenset({9, 14, -48, 17, 20, 21, -43, 23, -41, 25, -36, 35, 37, 38, 39, 40, -24, 42, 44, -19, -18, -13, -10}), frozenset({10, 13, -48, 18, 20, 21, -43, -41, 24, 25, -38, 35, 36, 37, 39, 40, -23, 42, 44, -19, -17, -14, -9}), frozenset({10, 14, -48, 18, 19, 20, -44, 23, 24, -41, -37, 35, 36, 38, 39, 40, -25, 42, 43, -21, -17, -13, -9}), frozenset({10, 14, -48, 18, 20, 21, -43, 23, -40, 25, -36, 35, 37, 38, 39, -24, 41, 42, 44, -19, -17, -13, -9}), frozenset({9, 14, -48, 18, 20, 21, -43, 23, 24, -41, -38, 35, 36, 37, 39, 40, -25, 42, 44, -19, -17, -13, -10})]
861	itemsets left after W operation 	: [frozenset({49, 36, 20, -43, 44}), frozenset({6, 10, 12, 13, -49, 16, 18, -45, 21, 22, 23, -42, 25, -37, 35, 38, 39, 40, 41, -24, -19, -17, -14, -9, -3}), frozenset({6, 10, 12, 14, -49, 16, 18, -45, 21, 22, 24, 25, -39, -35, 37, 38, 40, 41, 42, -23, -19, -17, -13, -9, -3}), frozenset({3, 10, 13, 14, -49, 16, 18, 19, -45, 22, 23, 24, -39, -35, 37, 38, -25, 40, 41, 42, -21, -17, -12, -9, -6}), frozenset({3, 10, 13, 14, -49, 16, 17, -45, 21, 22, 23, -41, 25, -35, 37, 38, 39, 40, -24, 42, -19, -18, -12, -9, -6}), frozenset({3, 10, 13, 14, -49, 16, 18, -45, 21, 22, 24, 25, -39, -37, 35, 38, 40, 41, 42, -23, -19, -17, -12, -9, -6}), frozenset({6, 10, 12, 13, -49, 17, 18, 19, -45, 22, 23, 25, -39, -35, 37, 38, 40, 41, 42, -24, -21, -16, -14, -9, -3}), frozenset({6, 9, 12, 13, -49, 16, 17, -45, 21, 22, 23, 25, -39, -37, 35, 38, 40, 41, 42, -24, -19, -18, -14, -10, -3}), frozenset({6, 10, 12, 14, -49, 16, 18, -45, 21, 22, 24, 25, -40, -35, 37, 38, 39, 41, 42, -23, -19, -17, -13, -9, -3}), frozenset({3, 9, 12, 14, -49, 16, 18, 19, -45, 21, 24, 25, -39, -37, 35, 38, 40, 41, 42, -23, -22, -17, -13, -10, -6}), frozenset({6, 9, 12, 13, -49, 16, 17, -45, 21, 22, 24, 25, -39, -37, 35, 38, 40, 41, 42, -23, -19, -18, -14, -10, -3}), frozenset({3, 10, 12, 14, -49, 17, 18, -45, 21, 22, -41, 24, 25, -37, 35, 38, 39, 40, -23, 42, -19, -16, -13, -9, -6}), frozenset({3, 10, 12, 13, -49, 16, 18, 19, -45, 21, 23, 24, -41, -38, 35, 37, 39, 40, -25, 42, -22, -17, -14, -9, -6}), frozenset({3, 10, 13, 14, -49, 17, 18, -45, 21, 22, 23, 25, -39, -37, 35, 38, 40, 41, 42, -24, -19, -16, -12, -9, -6}), frozenset({6, 9, 12, 14, -49, 16, 18, 19, -45, 22, 24, 25, -40, -37, 35, 38, 39, 41, 42, -23, -21, -17, -13, -10, -3}), frozenset({3, 9, 12, 13, -49, 16, 17, 19, -45, 21, 23, 24, -39, -35, 37, 38, -25, 40, 41, 42, -22, -18, -14, -10, -6}), frozenset({2, 5, 9, 10, 12, 13, -49, 17, 18, -46, 21, 22, 24, -39, 26, -35, 37, 40, 41, -23, -19, -16, -14, -8, -6}), frozenset({2, 5, 8, 10, 12, 14, -49, 16, 18, 19, -46, 21, 23, 24, -41, -35, 37, -26, 39, 40, -22, -17, -13, -9, -6}), frozenset({2, 5, 8, 10, 12, 13, -49, 16, 17, -46, 19, 21, 23, 24, -40, -37, 35, -26, 39, 41, -22, -18, -14, -9, -6}), frozenset({2, 6, 9, 10, 12, 14, -49, 16, 18, 19, -46, 22, -41, 24, 26, -37, 35, 39, 40, -23, -21, -17, -13, -8, -5}), frozenset({2, 6, 8, 10, 12, 14, -49, 16, 18, -46, 21, 22, 23, -40, 26, -37, 35, 39, -24, 41, -19, -17, -13, -9, -5}), frozenset({2, 3, 5, 6, 8, 10, 12, 14, -49, 16, -47, 18, 21, 22, 24, 25, 26, -39, -38, 35, 37, 40, 41, 42, -23, -19, -17, -13, -9, -4}), frozenset({9, 14, -49, -48, 18, 21, -41, 24, 25, -37, 35, 38, 39, 40, -23, 42, -19, -17, -13, -10}), frozenset({10, 14, -49, -48, 18, 19, 24, 25, -40, -35, 37, 38, 39, 41, 42, -23, -21, -17, -13, -9}), frozenset({10, 13, -49, -48, 18, 21, 23, -40, 25, -35, 37, 38, 39, -24, 41, 42, -19, -17, -14, -9}), frozenset({10, 14, -49, -48, 17, 21, 23, 25, -39, -38, 35, 37, 40, 41, 42, -24, -19, -18, -13, -9}), frozenset({9, 13, -49, -48, 18, 19, 24, 25, -39, -37, 35, 38, 40, 41, 42, -23, -21, -17, -14, -10}), frozenset({10, 14, -49, -48, 17, 21, -41, 24, 25, -37, 35, 38, 39, 40, -23, 42, -19, -18, -13, -9}), frozenset({9, 13, -49, -48, 18, 19, 23, -40, 25, -35, 37, 38, 39, -24, 41, 42, -21, -17, -14, -10}), frozenset({10, 14, -49, -48, 18, 21, -41, 24, 25, -37, 35, 38, 39, 40, -23, 42, -19, -17, -13, -9}), frozenset({9, 14, -49, -48, 18, 21, -42, 24, 25, -38, 35, 37, 39, 40, 41, -23, -19, -17, -13, -10}), frozenset({9, 14, -49, -48, 17, 21, -41, 24, 25, -37, 35, 38, 39, 40, -23, 42, -19, -18, -13, -10}), frozenset({10, 14, -49, -48, 18, 21, 23, -40, 25, -35, 37, 38, 39, -24, 41, 42, -19, -17, -13, -9}), frozenset({9, 13, -49, -48, 17, 21, -42, 24, 25, -37, 35, 38, 39, 40, 41, -23, -19, -18, -14, -10}), frozenset({9, 14, -49, -48, 18, 19, 23, 24, -39, -35, 37, 38, -25, 40, 41, 42, -21, -17, -13, -10}), frozenset({10, 14, -49, -48, 18, 21, -41, 24, 25, -38, 35, 37, 39, 40, -23, 42, -19, -17, -13, -9}), frozenset({10, 14, -49, -48, 18, 21, 23, -41, 25, -37, 35, 38, 39, 40, -24, 42, -19, -17, -13, -9}), frozenset({9, 14, -49, -48, 18, 21, 24, 25, -39, -35, 37, 38, 40, 41, 42, -23, -19, -17, -13, -10}), frozenset({10, 14, -49, -48, 18, 19, 23, 24, -40, -37, 35, 38, 39, -25, 41, 42, -21, -17, -13, -9}), frozenset({9, 14, -49, -48, 18, 19, -42, 23, 24, -35, 37, 38, 39, 40, 41, -25, -21, -17, -13, -10}), frozenset({10, 13, -49, -48, 18, 21, 24, 25, -39, -37, 35, 38, 40, 41, 42, -23, -19, -17, -14, -9}), frozenset({10, 14, -49, -48, 18, 19, 23, 24, -41, -35, 37, 38, 39, 40, -25, 42, -21, -17, -13, -9}), frozenset({9, 13, -49, -48, 18, 21, -41, 24, 25, -37, 35, 38, 39, 40, -23, 42, -19, -17, -14, -10}), frozenset({10, 13, -49, -48, 18, 19, 23, -41, 25, -37, 35, 38, 39, 40, -24, 42, -21, -17, -14, -9}), frozenset({10, 13, -49, -48, 18, 21, -42, 24, 25, -37, 35, 38, 39, 40, 41, -23, -19, -17, -14, -9}), frozenset({9, 14, -49, -48, 17, 21, 24, 25, -39, -38, 35, 37, 40, 41, 42, -23, -19, -18, -13, -10}), frozenset({10, 13, -49, -48, 18, 21, -41, 24, 25, -38, 35, 37, 39, 40, -23, 42, -19, -17, -14, -9}), frozenset({9, 14, -49, -48, 18, 21, 23, 24, -41, -38, 35, 37, 39, 40, -25, 42, -19, -17, -13, -10})]
787	itemsets left after W operation 	: [frozenset({40, 50, 35, 21}), frozenset({2, 3, 4, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 25, 26, 28, 29, 31, 32, 34, 36, 38, 39, 41, 44, -50, -43, -42, -37, -33, -30, -27, -24, -20, -16, -12, -8, -5}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 22, 23, 25, 26, 28, 29, 31, 32, 34, 36, 38, 39, 41, 44, -50, -43, -42, -37, -33, -30, -27, -24, -20, -17, -12, -7, -3}), frozenset({3, 10, 13, 14, -50, 16, 18, -45, 20, -44, 22, -41, 24, 25, -38, 36, 37, 39, -23, 42, 43, -19, -17, -12, -9, -6}), frozenset({6, 9, 12, 13, -50, 16, 18, 19, -44, -45, 22, 23, -41, 25, -37, 36, 38, 39, -24, 42, 43, -20, -17, -14, -10, -3}), frozenset({6, 10, 12, 14, -50, 16, 18, -45, 20, -44, 22, -41, 24, 25, -37, 36, 38, 39, -23, 42, 43, -19, -17, -13, -9, -3}), frozenset({6, 9, 13, 14, -50, 16, 18, 19, -45, -43, 22, -42, 24, 25, -37, 36, 38, 39, 41, -23, 44, -20, -17, -12, -10, -3}), frozenset({2, 5, 9, 10, 12, 14, -50, 16, 18, 19, -44, -46, 22, 23, -41, 26, -37, 36, 39, -24, 43, -20, -17, -13, -8, -6}), frozenset({2, 6, 8, 10, 12, 14, -50, 16, 18, 19, 20, -44, -46, -41, 24, 26, -37, 36, 39, -23, -22, 43, -17, -13, -9, -5}), frozenset({5, 6, 9, 10, 13, 14, -50, 17, 18, 19, -46, -43, 22, 23, -41, 26, -37, 36, 39, -24, 44, -20, -16, -12, -8, -2}), frozenset({2, 6, 8, 10, 12, 13, -50, 16, 18, 19, -46, -43, 22, -41, 24, 26, -37, 36, 39, -23, 44, -20, -17, -14, -9, -5}), frozenset({2, 3, 4, 5, 8, 9, 12, 13, -50, 16, 17, -47, 19, 20, -44, -42, 23, 24, 25, -38, 36, 37, -26, 39, 41, -22, 43, -18, -14, -10, -6}), frozenset({3, 4, 5, 6, 8, 10, 12, 14, -50, 16, -47, 18, 19, 20, -44, -42, 23, 24, 26, -37, 36, 38, 39, -25, 41, -22, 43, -17, -13, -9, -2}), frozenset({10, 14, -50, -48, 17, 19, -44, -41, 24, 25, -38, 36, 37, 39, -23, 42, 43, -20, -18, -13, -9}), frozenset({10, 14, -50, -48, 17, 19, -43, -41, 24, 25, -37, 36, 38, 39, -23, 42, 44, -20, -18, -13, -9}), frozenset({10, 14, -50, -48, 18, 20, -43, 24, 25, -39, -36, 37, 38, 41, 42, -23, 44, -19, -17, -13, -9}), frozenset({9, 13, -50, -48, 18, 19, -44, 23, -41, 25, -37, 36, 38, 39, -24, 42, 43, -20, -17, -14, -10}), frozenset({9, 13, -50, -48, 17, 20, -44, -42, 24, 25, -38, 36, 37, 39, 41, -23, 43, -19, -18, -14, -10}), frozenset({9, 14, -50, -48, 18, 20, -44, -42, 24, 25, -38, 36, 37, 39, 41, -23, 43, -19, -17, -13, -10}), frozenset({10, 13, -50, -48, 18, 19, -44, -41, 24, 25, -36, 37, 38, 39, -23, 42, 43, -20, -17, -14, -9}), frozenset({10, 13, -50, -48, 18, 19, -43, -41, 24, 25, -37, 36, 38, 39, -23, 42, 44, -20, -17, -14, -9}), frozenset({10, 14, -50, -48, 18, 19, -44, 23, 25, -39, -37, 36, 38, -24, 41, 42, 43, -20, -17, -13, -9}), frozenset({9, 13, -50, -48, 18, 20, -44, -41, 24, 25, -37, 36, 38, 39, -23, 42, 43, -19, -17, -14, -10}), frozenset({9, 13, -50, -48, 18, 20, -44, 23, -41, 25, -37, 36, 38, 39, -24, 42, 43, -19, -17, -14, -10}), frozenset({10, 14, -50, -48, 18, 19, -43, -41, 24, 25, -37, 36, 38, 39, -23, 42, 44, -20, -17, -13, -9}), frozenset({9, 14, -50, -48, 17, 20, -43, 23, -41, 25, -36, 37, 38, 39, -24, 42, 44, -19, -18, -13, -10}), frozenset({6, 10, 12, 13, -50, -49, 16, 18, -45, 22, 23, -42, 25, -37, 38, 39, -24, 41, -19, -17, -14, -9, -3}), frozenset({3, 10, 13, 14, -49, 16, -50, 18, -45, 22, 24, 25, -39, -37, 38, 41, 42, -23, -19, -17, -12, -9, -6}), frozenset({6, 9, 12, 13, -50, -49, 16, 17, -45, 22, 23, 25, -39, -37, 38, -24, 41, 42, -19, -18, -14, -10, -3}), frozenset({3, 9, 12, 14, -49, 16, -50, 18, 19, -45, 24, 25, -39, -37, 38, 41, 42, -23, -22, -17, -13, -10, -6}), frozenset({6, 9, 12, 13, -50, -49, 16, 17, -45, 22, 24, 25, -39, -37, 38, 41, 42, -23, -19, -18, -14, -10, -3}), frozenset({3, 10, 12, 14, -49, -50, 17, 18, -45, 22, -41, 24, 25, -37, 38, 39, -23, 42, -19, -16, -13, -9, -6}), frozenset({3, 10, 12, 13, -50, -49, 16, 18, 19, -45, 23, 24, -41, -38, 37, 39, -25, 42, -22, -17, -14, -9, -6}), frozenset({3, 10, 13, 14, -49, -50, 17, 18, -45, 22, 23, 25, -39, -37, 38, -24, 41, 42, -19, -16, -12, -9, -6}), frozenset({2, 3, 5, 6, 8, 10, 12, 14, -49, 16, -47, 18, -50, 22, 24, 25, 26, -39, -38, 37, 41, 42, -23, -19, -17, -13, -9, -4}), frozenset({9, 14, -49, -48, -50, 18, -41, 24, 25, -37, 38, 39, -23, 42, -19, -17, -13, -10}), frozenset({10, 14, -49, -48, 17, -50, 23, 25, -39, -38, 37, -24, 41, 42, -19, -18, -13, -9}), frozenset({10, 14, -49, -48, 17, -50, -41, 24, 25, -37, 38, 39, -23, 42, -19, -18, -13, -9}), frozenset({10, 14, -49, -48, -50, 18, -41, 24, 25, -37, 38, 39, -23, 42, -19, -17, -13, -9}), frozenset({9, 14, -49, -48, -50, 18, -42, 24, 25, -38, 37, 39, 41, -23, -19, -17, -13, -10}), frozenset({9, 14, -49, -48, 17, -50, -41, 24, 25, -37, 38, 39, -23, 42, -19, -18, -13, -10}), frozenset({9, 13, -50, -49, -48, 17, -42, 24, 25, -37, 38, 39, 41, -23, -19, -18, -14, -10}), frozenset({10, 14, -49, -48, -50, 18, -41, 24, 25, -38, 37, 39, -23, 42, -19, -17, -13, -9}), frozenset({10, 14, -49, -48, -50, 18, 23, -41, 25, -37, 38, 39, -24, 42, -19, -17, -13, -9}), frozenset({10, 13, -50, -49, -48, 18, 24, 25, -39, -37, 38, 41, 42, -23, -19, -17, -14, -9}), frozenset({9, 13, -50, -49, -48, 18, -41, 24, 25, -37, 38, 39, -23, 42, -19, -17, -14, -10}), frozenset({10, 13, -50, -49, -48, 18, -42, 24, 25, -37, 38, 39, 41, -23, -19, -17, -14, -9}), frozenset({9, 14, -49, -48, 17, -50, 24, 25, -39, -38, 37, 41, 42, -23, -19, -18, -13, -10}), frozenset({10, 13, -50, -49, -48, 18, -41, 24, 25, -38, 37, 39, -23, 42, -19, -17, -14, -9}), frozenset({9, 14, -49, -48, -50, 18, 23, 24, -41, -38, 37, 39, -25, 42, -19, -17, -13, -10})]
670	itemsets left after W operation 	: [frozenset({25, 42, 51, 38}), frozenset({3, 9, 13, 14, -51, 17, 18, 19, -44, 21, 22, 23, -40, -45, -35, 36, 37, 39, -24, 41, 43, -20, -16, -12, -10, -6}), frozenset({3, 10, 13, 14, -51, 17, 18, -45, 20, 21, 22, -44, 24, -40, -36, 35, 37, 39, 41, -23, 43, -19, -16, -12, -9, -6}), frozenset({6, 9, 12, -51, 14, 16, 18, -45, 20, 21, 22, -44, 24, -40, -35, 36, 37, 39, 41, -23, 43, -19, -17, -13, -10, -3}), frozenset({3, 9, 12, -51, 14, 16, 18, 19, 20, 21, -44, 23, -40, -45, -36, 35, 37, 39, -24, 41, -22, 43, -17, -13, -10, -6}), frozenset({-47, 3, 4, -51, 46}), frozenset({10, -51, 14, -48, 18, 19, 20, -44, -41, 24, -37, 35, 36, 39, 40, -23, 43, -21, -17, -13, -9}), frozenset({10, -51, 14, -48, 17, 19, 21, -43, 24, -40, -37, 35, 36, 39, 41, -23, 44, -20, -18, -13, -9}), frozenset({10, -51, 14, -48, 18, 19, -44, 21, 24, -40, -35, 36, 37, 39, 41, -23, 43, -20, -17, -13, -9}), frozenset({9, -51, 14, -48, 17, 19, 20, -44, -41, 24, -35, 36, 37, 39, 40, -23, 43, -21, -18, -13, -10}), frozenset({10, -51, 14, -48, 18, 20, 21, -43, 23, -40, -36, 35, 37, 39, -24, 41, 44, -19, -17, -13, -9}), frozenset({6, 10, 12, -51, 14, -49, 16, 18, -45, 21, 22, 24, -39, -35, 37, 40, 41, -23, -19, -17, -13, -9, -3}), frozenset({3, 10, 13, 14, -49, 16, 17, -51, -45, 21, 22, 23, -41, -35, 37, 39, 40, -24, -19, -18, -12, -9, -6}), frozenset({6, 10, 12, 13, -51, -49, 17, 18, 19, -45, 22, 23, -39, -35, 37, 40, 41, -24, -21, -16, -14, -9, -3}), frozenset({6, 10, 12, -51, 14, -49, 16, 18, -45, 21, 22, 24, -40, -35, 37, 39, 41, -23, -19, -17, -13, -9, -3}), frozenset({6, 9, 12, -51, 14, -49, 16, 18, 19, -45, 22, 24, -40, -37, 35, 39, 41, -23, -21, -17, -13, -10, -3}), frozenset({10, -51, 14, -49, -48, 18, 19, 24, -40, -35, 37, 39, 41, -23, -21, -17, -13, -9}), frozenset({10, 13, -51, -49, -48, 18, 21, 23, -40, -35, 37, 39, -24, 41, -19, -17, -14, -9}), frozenset({9, 13, -51, -49, -48, 18, 19, 24, -39, -37, 35, 40, 41, -23, -21, -17, -14, -10}), frozenset({9, 13, -51, -49, -48, 18, 19, 23, -40, -35, 37, 39, -24, 41, -21, -17, -14, -10}), frozenset({10, -51, 14, -49, -48, 18, 21, 23, -40, -35, 37, 39, -24, 41, -19, -17, -13, -9}), frozenset({9, -51, 14, -49, -48, 18, 21, 24, -39, -35, 37, 40, 41, -23, -19, -17, -13, -10}), frozenset({10, 13, -51, -49, -48, 18, 19, 23, -41, -37, 35, 39, 40, -24, -21, -17, -14, -9}), frozenset({6, 9, 12, 13, -50, -51, 16, 18, 19, -44, -45, 22, 23, -41, -37, 36, 39, -24, 43, -20, -17, -14, -10, -3}), frozenset({6, 10, 12, -51, 14, -50, 16, 18, -45, 20, -44, 22, -41, 24, -37, 36, 39, -23, 43, -19, -17, -13, -9, -3}), frozenset({10, -51, 14, -50, -48, 17, 19, -43, -41, 24, -37, 36, 39, -23, 44, -20, -18, -13, -9}), frozenset({10, -51, 14, -50, -48, 18, 20, -43, 24, -39, -36, 37, 41, -23, 44, -19, -17, -13, -9}), frozenset({9, 13, -50, -51, -48, 18, 19, -44, 23, -41, -37, 36, 39, -24, 43, -20, -17, -14, -10}), frozenset({10, 13, -50, -51, -48, 18, 19, -44, -41, 24, -36, 37, 39, -23, 43, -20, -17, -14, -9}), frozenset({10, 13, -50, -51, -48, 18, 19, -43, -41, 24, -37, 36, 39, -23, 44, -20, -17, -14, -9}), frozenset({10, -51, 14, -50, -48, 18, 19, -44, 23, -39, -37, 36, -24, 41, 43, -20, -17, -13, -9}), frozenset({9, 13, -50, -51, -48, 18, 20, -44, -41, 24, -37, 36, 39, -23, 43, -19, -17, -14, -10}), frozenset({9, 13, -50, -51, -48, 18, 20, -44, 23, -41, -37, 36, 39, -24, 43, -19, -17, -14, -10}), frozenset({10, -51, 14, -50, -48, 18, 19, -43, -41, 24, -37, 36, 39, -23, 44, -20, -17, -13, -9}), frozenset({9, -51, 14, -50, -48, 17, 20, -43, 23, -41, -36, 37, 39, -24, 44, -19, -18, -13, -10}), frozenset({3, 10, 13, 14, -49, 16, -50, 18, -45, -51, 22, 24, -39, -37, 41, -23, -19, -17, -12, -9, -6}), frozenset({6, 9, 12, 13, -50, -49, 16, 17, -51, -45, 22, 23, -39, -37, -24, 41, -19, -18, -14, -10, -3}), frozenset({3, 9, 12, -51, 14, -49, 16, -50, 18, 19, -45, 24, -39, -37, 41, -23, -22, -17, -13, -10, -6}), frozenset({6, 9, 12, 13, -50, -49, 16, 17, -51, -45, 22, 24, -39, -37, 41, -23, -19, -18, -14, -10, -3}), frozenset({3, 10, 12, -51, 14, -49, -50, 17, 18, -45, 22, -41, 24, -37, 39, -23, -19, -16, -13, -9, -6}), frozenset({3, 10, 13, 14, -49, -50, 17, 18, -45, -51, 22, 23, -39, -37, -24, 41, -19, -16, -12, -9, -6}), frozenset({9, -51, 14, -49, -48, -50, 18, -41, 24, -37, 39, -23, -19, -17, -13, -10}), frozenset({10, -51, 14, -49, -48, 17, -50, -41, 24, -37, 39, -23, -19, -18, -13, -9}), frozenset({10, -51, 14, -49, -48, -50, 18, -41, 24, -37, 39, -23, -19, -17, -13, -9}), frozenset({9, -51, 14, -49, -48, 17, -50, -41, 24, -37, 39, -23, -19, -18, -13, -10}), frozenset({10, -51, 14, -49, -48, -50, 18, -41, 23, -37, 39, -24, -19, -17, -13, -9}), frozenset({10, 13, -50, -49, -48, -51, 18, 24, -39, -37, 41, -23, -19, -17, -14, -9}), frozenset({9, 13, -50, -49, -48, -51, 18, -41, 24, -37, 39, -23, -19, -17, -14, -10})]
551	itemsets left after W operation 	: [frozenset({16, 18, 52, 39, 12, -17}), frozenset({3, 10, -52, 14, 19, 20, 21, -43, 23, 24, -40, -45, -36, 35, 37, 38, -25, 41, 42, -22, 44, -13, -9, -6}), frozenset({6, 10, -52, 13, -50, -49, -45, 22, 23, -42, 25, -37, 38, -24, 41, -19, -14, -9, -3}), frozenset({3, 10, -52, 13, -50, -49, 19, -45, -41, 23, 24, -38, 37, -25, 42, -22, -14, -9, -6}), frozenset({6, 9, -52, 13, -50, -51, 19, -44, -45, 22, 23, -41, -37, 36, -24, 43, -20, -14, -10, -3}), frozenset({6, 10, -52, -51, 14, -50, -45, 20, -44, 22, -41, 24, -37, 36, -23, 43, -19, -13, -9, -3}), frozenset({2, 5, 8, 10, -52, 14, -49, -46, 19, 21, 23, 24, -41, -35, 37, -26, 40, -22, -13, -9, -6}), frozenset({2, 6, 9, 10, -52, 14, -49, -46, 19, 22, -41, 24, 26, -37, 35, 40, -23, -21, -13, -8, -5}), frozenset({2, 6, 8, 10, -52, 14, -49, -46, 21, 22, 23, -40, 26, -37, 35, -24, 41, -19, -13, -9, -5}), frozenset({6, 9, -52, -51, 14, -45, 20, 21, 22, -44, 24, -40, -35, 36, 37, 41, -23, 43, -19, -13, -10, -3}), frozenset({3, 9, -52, -51, 14, 19, 20, 21, -44, 23, -40, -45, -36, 35, 37, -24, 41, -22, 43, -13, -10, -6}), frozenset({6, 9, -52, -51, 14, -49, 19, -45, 22, -40, 24, -37, 35, 41, -23, -21, -13, -10, -3}), frozenset({2, 5, 9, 10, -52, 14, -50, -46, 19, -44, 22, 23, -41, 26, -37, 36, -24, 43, -20, -13, -8, -6}), frozenset({2, 6, 8, 10, -52, 14, -50, -46, 19, 20, -44, -41, 24, 26, -37, 36, -23, -22, 43, -13, -9, -5}), frozenset({6, 10, -52, -51, 14, -49, -45, 21, 22, -40, 24, -35, 37, 41, -23, -19, -13, -9, -3}), frozenset({2, 6, 8, 10, -52, 13, -50, -46, 19, -43, 22, -41, 24, 26, -37, 36, -23, 44, -20, -14, -9, -5}), frozenset({3, 4, 5, 6, 8, 10, -52, 14, -50, -47, 19, 20, -44, -42, 23, 24, 26, -37, 36, 38, -25, 41, -22, 43, -13, -9, -2})]
548	itemsets left after W operation 	: [frozenset({10, 53, -9}), frozenset({-53, 14, -48, 18, 19, 20, -44, 23, 24, -39, -38, 35, 36, 37, -25, 40, 41, 42, 43, -21, -17, -13}), frozenset({-53, 14, -48, 18, 19, 20, -44, 23, 24, -41, -37, 35, 36, 38, 39, 40, -25, 42, 43, -21, -17, -13}), frozenset({3, -53, 13, 14, -49, 16, 18, 19, -45, 22, 23, 24, -39, -35, 37, 38, -25, 40, 41, 42, -21, -17, -12, -6}), frozenset({2, 5, 8, -53, 12, 13, -49, 16, 17, -46, 19, 21, 23, 24, -40, -37, 35, -26, 39, 41, -22, -18, -14, -6}), frozenset({-53, 14, -49, -48, 18, 19, 23, 24, -40, -37, 35, 38, 39, -25, 41, 42, -21, -17, -13}), frozenset({-53, 14, -49, -48, 18, 19, 23, 24, -41, -35, 37, 38, 39, 40, -25, 42, -21, -17, -13}), frozenset({3, -53, 13, 14, -50, 16, 18, -45, 20, -44, 22, -41, 24, 25, -38, 36, 37, 39, -23, 42, 43, -19, -17, -12, -6}), frozenset({-53, 14, -50, -48, 17, 19, -44, -41, 24, 25, -38, 36, 37, 39, -23, 42, 43, -20, -18, -13}), frozenset({2, 3, 5, 6, 8, -53, 12, 14, -49, 16, -47, 18, -50, 22, 24, 25, 26, -39, -38, 37, 41, 42, -23, -19, -17, -13, -4}), frozenset({-53, 14, -49, -48, 17, -50, 23, 25, -39, -38, 37, -24, 41, 42, -19, -18, -13}), frozenset({-53, 14, -49, -48, -50, 18, -41, 24, 25, -38, 37, 39, -23, 42, -19, -17, -13}), frozenset({-53, 13, -50, -49, -48, 18, -42, 24, 25, -37, 38, 39, 41, -23, -19, -17, -14}), frozenset({-53, 13, -50, -49, -48, 18, -41, 24, 25, -38, 37, 39, -23, 42, -19, -17, -14}), frozenset({3, -53, 13, 14, -51, 17, 18, -45, 20, 21, 22, -44, 24, -40, -36, 35, 37, 39, 41, -23, 43, -19, -16, -12, -6}), frozenset({-53, -51, 14, -48, 18, 19, 20, -44, -41, 24, -37, 35, 36, 39, 40, -23, 43, -21, -17, -13}), frozenset({-53, -51, 14, -48, 17, 19, 21, -43, 24, -40, -37, 35, 36, 39, 41, -23, 44, -20, -18, -13}), frozenset({-53, -51, 14, -48, 18, 19, -44, 21, 24, -40, -35, 36, 37, 39, 41, -23, 43, -20, -17, -13}), frozenset({-53, -51, 14, -48, 18, 20, 21, -43, 23, -40, -36, 35, 37, 39, -24, 41, 44, -19, -17, -13}), frozenset({6, -53, 12, -51, 14, -49, 16, 18, -45, 21, 22, 24, -39, -35, 37, 40, 41, -23, -19, -17, -13, -3}), frozenset({3, -53, 13, 14, -49, 16, 17, -51, -45, 21, 22, 23, -41, -35, 37, 39, 40, -24, -19, -18, -12, -6}), frozenset({6, -53, 12, 13, -51, -49, 17, 18, 19, -45, 22, 23, -39, -35, 37, 40, 41, -24, -21, -16, -14, -3}), frozenset({-53, -51, 14, -49, -48, 18, 19, 24, -40, -35, 37, 39, 41, -23, -21, -17, -13}), frozenset({-53, 13, -51, -49, -48, 18, 21, 23, -40, -35, 37, 39, -24, 41, -19, -17, -14}), frozenset({-53, -51, 14, -49, -48, 18, 21, 23, -40, -35, 37, 39, -24, 41, -19, -17, -13}), frozenset({-53, 13, -51, -49, -48, 18, 19, 23, -41, -37, 35, 39, 40, -24, -21, -17, -14}), frozenset({-53, -51, 14, -50, -48, 17, 19, -43, -41, 24, -37, 36, 39, -23, 44, -20, -18, -13}), frozenset({-53, -51, 14, -50, -48, 18, 20, -43, 24, -39, -36, 37, 41, -23, 44, -19, -17, -13}), frozenset({-53, 13, -50, -51, -48, 18, 19, -44, -41, 24, -36, 37, 39, -23, 43, -20, -17, -14}), frozenset({-53, 13, -50, -51, -48, 18, 19, -43, -41, 24, -37, 36, 39, -23, 44, -20, -17, -14}), frozenset({-53, -51, 14, -50, -48, 18, 19, -44, 23, -39, -37, 36, -24, 41, 43, -20, -17, -13}), frozenset({-53, -51, 14, -50, -48, 18, 19, -43, -41, 24, -37, 36, 39, -23, 44, -20, -17, -13}), frozenset({3, -53, 13, 14, -49, 16, -50, 18, -45, -51, 22, 24, -39, -37, 41, -23, -19, -17, -12, -6}), frozenset({3, -53, 12, -51, 14, -49, -50, 17, 18, -45, 22, -41, 24, -37, 39, -23, -19, -16, -13, -6}), frozenset({3, -53, 13, 14, -49, -50, 17, 18, -45, -51, 22, 23, -39, -37, -24, 41, -19, -16, -12, -6}), frozenset({39, -23, -53, -51, 14, -49, -48, 17, -50, -19, -18, -13, -41, 24, -37}), frozenset({39, -23, -53, -51, 14, -49, -48, -50, 18, -19, -17, -13, -41, 24, -37}), frozenset({39, -24, -53, -51, 14, -49, -48, -50, 18, -19, -17, -13, -41, 23, -37}), frozenset({41, -23, -53, 13, -50, -49, -48, -51, 18, -19, -17, -14, 24, -39, -37}), frozenset({3, -53, -52, 14, 19, 20, 21, -43, 23, 24, -40, -45, -36, 35, 37, 38, -25, 41, 42, -22, 44, -13, -6}), frozenset({6, -53, -52, 13, -50, -49, -45, 22, 23, -42, 25, -37, 38, -24, 41, -19, -14, -3}), frozenset({3, -53, -52, 13, -50, -49, 19, -45, -41, 23, 24, -38, 37, -25, 42, -22, -14, -6}), frozenset({6, -53, -52, -51, 14, -50, -45, 20, -44, 22, -41, 24, -37, 36, -23, 43, -19, -13, -3}), frozenset({2, 5, 8, -53, -52, 14, -49, -46, 19, 21, 23, 24, -41, -35, 37, -26, 40, -22, -13, -6}), frozenset({2, 6, 8, -53, -52, 14, -49, -46, 21, 22, 23, -40, 26, -37, 35, -24, 41, -19, -13, -5}), frozenset({2, 6, 8, -53, -52, 14, -50, -46, 19, 20, -44, -41, 24, 26, -37, 36, -23, -22, 43, -13, -5}), frozenset({6, -53, -52, -51, 14, -49, -45, 21, 22, -40, 24, -35, 37, 41, -23, -19, -13, -3}), frozenset({2, 6, 8, -53, -52, 13, -50, -46, 19, -43, 22, -41, 24, 26, -37, 36, -23, 44, -20, -14, -5}), frozenset({3, 4, 5, 6, 8, -53, -52, 14, -50, -47, 19, 20, -44, -42, 23, 24, 26, -37, 36, 38, -25, 41, -22, 43, -13, -2})]
528	itemsets left after W operation 	: [frozenset({24, -23, 54}), frozenset({5, 6, 8, 9, -54, 12, 14, 17, 18, 19, -46, 21, 22, -43, -40, 26, -37, 35, 36, 39, 41, 44, -20, -16, -13, -10, -2}), frozenset({2, 5, 9, 10, -54, 12, 13, -49, 17, 18, -46, 21, 22, -39, 26, -35, 37, 40, 41, -19, -16, -14, -8, -6}), frozenset({6, 9, -54, 13, 14, -50, 16, 18, 19, -45, -43, 22, -42, 25, -37, 36, 38, 39, 41, 44, -20, -17, -12, -10, -3}), frozenset({9, -54, 13, -50, -48, 17, 20, -44, -42, 25, -38, 36, 37, 39, 41, 43, -19, -18, -14, -10}), frozenset({9, -54, 14, -50, -48, 18, 20, -44, -42, 25, -38, 36, 37, 39, 41, 43, -19, -17, -13, -10}), frozenset({9, -54, 14, -49, -48, -50, 18, -42, 25, -38, 37, 39, 41, -19, -17, -13, -10}), frozenset({9, -54, 13, -50, -49, -48, 17, -42, 25, -37, 38, 39, 41, -19, -18, -14, -10}), frozenset({9, -54, 14, -49, -48, 17, -50, 25, -39, -38, 37, 41, 42, -19, -18, -13, -10}), frozenset({9, -54, -51, 14, -48, 17, 19, 20, -44, -41, -35, 36, 37, 39, 40, 43, -21, -18, -13, -10}), frozenset({9, -54, 13, -51, -49, -48, 18, 19, -39, -37, 35, 40, 41, -21, -17, -14, -10}), frozenset({9, -54, -51, 14, -49, -48, 18, 21, -39, -35, 37, 40, 41, -19, -17, -13, -10}), frozenset({9, -54, 13, -50, -51, -48, 18, 20, -44, -41, -37, 36, 39, 43, -19, -17, -14, -10}), frozenset({3, 9, -54, 12, -51, 14, -49, 16, -50, 18, 19, -45, -39, -37, 41, -22, -17, -13, -10, -6}), frozenset({6, 9, -54, 12, 13, -50, -49, 16, 17, -51, -45, 22, -39, -37, 41, -19, -18, -14, -10, -3}), frozenset({39, 9, -54, -51, 14, -49, -48, -50, 18, -19, -17, -13, -10, -41, -37}), frozenset({39, 9, -54, -51, 14, -49, -48, 17, -50, -19, -18, -13, -10, -41, -37}), frozenset({39, 9, -54, 13, -50, -49, -48, -51, 18, -19, -17, -14, -10, -41, -37}), frozenset({2, 6, 9, 10, -54, -52, 14, -49, -46, 19, 22, -41, 26, -37, 35, 40, -21, -13, -8, -5}), frozenset({6, 9, -54, -52, -51, 14, -45, 20, 21, 22, -44, -40, -35, 36, 37, 41, 43, -19, -13, -10, -3}), frozenset({6, 9, -54, -52, -51, 14, -49, 19, -45, 22, -40, -37, 35, 41, -21, -13, -10, -3}), frozenset({3, -54, -53, 13, 14, -50, 16, 18, -45, 20, -44, 22, -41, 25, -38, 36, 37, 39, 42, 43, -19, -17, -12, -6}), frozenset({-54, -53, 14, -50, -48, 17, 19, -44, -41, 25, -38, 36, 37, 39, 42, 43, -20, -18, -13}), frozenset({2, 3, 5, 6, 8, -54, -53, 12, 14, -49, 16, -47, 18, -50, 22, 25, 26, -39, -38, 37, 41, 42, -19, -17, -13, -4}), frozenset({-54, -53, 14, -49, -48, -50, 18, -41, 25, -38, 37, 39, 42, -19, -17, -13}), frozenset({-54, -53, 13, -50, -49, -48, 18, -42, 25, -37, 38, 39, 41, -19, -17, -14}), frozenset({-54, -53, 13, -50, -49, -48, 18, -41, 25, -38, 37, 39, 42, -19, -17, -14}), frozenset({3, -54, -53, 13, 14, -51, 17, 18, -45, 20, 21, 22, -44, -40, -36, 35, 37, 39, 41, 43, -19, -16, -12, -6}), frozenset({-54, -53, -51, 14, -48, 18, 19, 20, -44, -41, -37, 35, 36, 39, 40, 43, -21, -17, -13}), frozenset({-54, -53, -51, 14, -48, 17, 19, 21, -43, -40, -37, 35, 36, 39, 41, 44, -20, -18, -13}), frozenset({-54, -53, -51, 14, -48, 18, 19, -44, 21, -40, -35, 36, 37, 39, 41, 43, -20, -17, -13}), frozenset({6, -54, -53, 12, -51, 14, -49, 16, 18, -45, 21, 22, -39, -35, 37, 40, 41, -19, -17, -13, -3}), frozenset({-54, -53, -51, 14, -49, -48, 18, 19, -40, -35, 37, 39, 41, -21, -17, -13}), frozenset({-54, -53, -51, 14, -50, -48, 17, 19, -43, -41, -37, 36, 39, 44, -20, -18, -13}), frozenset({-54, -53, -51, 14, -50, -48, 18, 20, -43, -39, -36, 37, 41, 44, -19, -17, -13}), frozenset({-54, -53, 13, -50, -51, -48, 18, 19, -44, -41, -36, 37, 39, 43, -20, -17, -14}), frozenset({-54, -53, 13, -50, -51, -48, 18, 19, -43, -41, -37, 36, 39, 44, -20, -17, -14}), frozenset({-54, -53, -51, 14, -50, -48, 18, 19, -43, -41, -37, 36, 39, 44, -20, -17, -13}), frozenset({3, -54, -53, 13, 14, -49, 16, -50, 18, -45, -51, 22, -39, -37, 41, -19, -17, -12, -6}), frozenset({3, -54, -53, 12, -51, 14, -49, -50, 17, 18, -45, 22, -41, -37, 39, -19, -16, -13, -6}), frozenset({39, -54, -53, -51, 14, -49, -48, 17, -50, -19, -18, -13, -41, -37}), frozenset({39, -54, -53, -51, 14, -49, -48, -50, 18, -19, -17, -13, -41, -37}), frozenset({41, -54, -53, 13, -50, -49, -48, -51, 18, -19, -17, -14, -39, -37}), frozenset({6, -54, -53, -52, -51, 14, -50, -45, 20, -44, 22, -41, -37, 36, 43, -19, -13, -3}), frozenset({2, 6, 8, -54, -53, -52, 14, -50, -46, 19, 20, -44, -41, 26, -37, 36, -22, 43, -13, -5}), frozenset({6, -54, -53, -52, -51, 14, -49, -45, 21, 22, -40, -35, 37, 41, -19, -13, -3}), frozenset({2, 6, 8, -54, -53, -52, 13, -50, -46, 19, -43, 22, -41, 26, -37, 36, 44, -20, -14, -5})]
451	itemsets left after W operation 	: [frozenset({18, 39, 55}), frozenset({2, 3, 4, 5, 7, 9, 10, 11, 13, 14, 15, 16, 19, 20, 22, 23, 24, 26, 28, 29, 30, 32, 34, 35, 37, 38, 40, 42, 44, -55, -43, -41, -36, -33, -31, -27, -25, -21, -17, -12, -8, -6}), frozenset({2, 5, 9, 10, -55, 13, 14, 17, -46, 19, 21, 22, 23, -43, -40, 26, -36, 35, 37, -24, 41, 44, -20, -16, -12, -8, -6}), frozenset({9, -55, 14, -49, -48, 19, -42, 23, 24, -35, 37, 38, -25, 40, 41, -21, -17, -13, -10}), frozenset({2, 3, 4, 6, 7, 9, 10, 11, 13, 14, 15, 17, 19, 22, 23, 25, 26, 28, 29, 31, 32, 34, 36, 38, 41, 44, -55, -50, -43, -42, -37, -33, -30, -27, -24, -20, -16, -12, -8, -5}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 19, 22, 23, 25, 26, 28, 29, 31, 32, 34, 36, 38, 41, 44, -55, -50, -43, -42, -37, -33, -30, -27, -24, -20, -17, -12, -7, -3}), frozenset({5, 6, 9, 10, -55, 13, 14, -50, 17, -46, 19, -43, 22, 23, -41, 26, -37, 36, -24, 44, -20, -16, -12, -8, -2}), frozenset({9, -55, 14, -49, -48, -50, 23, 24, -41, -38, 37, -25, 42, -19, -17, -13, -10}), frozenset({3, 9, -55, 13, 14, -51, 17, 19, -44, 21, 22, 23, -40, -45, -35, 36, 37, -24, 41, 43, -20, -16, -12, -10, -6}), frozenset({9, -55, 13, -51, -49, -48, 19, 23, -40, -35, 37, -24, 41, -21, -17, -14, -10}), frozenset({9, -55, 13, -50, -51, -48, 19, -44, 23, -41, -37, 36, -24, 43, -20, -17, -14, -10}), frozenset({9, -55, 13, -50, -51, -48, 20, -44, 23, -41, -37, 36, -24, 43, -19, -17, -14, -10}), frozenset({16, 52, -55, 12, -17}), frozenset({-55, -53, 14, -48, 19, 20, -44, 23, 24, -41, -37, 35, 36, 38, -25, 40, 42, 43, -21, -17, -13}), frozenset({-55, -53, 14, -49, -48, 19, 23, 24, -40, -37, 35, 38, -25, 41, 42, -21, -17, -13}), frozenset({-55, -53, 14, -49, -48, 19, 23, 24, -41, -35, 37, 38, -25, 40, 42, -21, -17, -13}), frozenset({-55, -53, -51, 14, -48, 20, 21, -43, 23, -40, -36, 35, 37, -24, 41, 44, -19, -17, -13}), frozenset({-55, -53, 13, -51, -49, -48, 21, 23, -40, -35, 37, -24, 41, -19, -17, -14}), frozenset({-55, -53, -51, 14, -49, -48, 21, 23, -40, -35, 37, -24, 41, -19, -17, -13}), frozenset({-55, -53, 13, -51, -49, -48, 19, -41, 23, -37, 35, 40, -24, -21, -17, -14}), frozenset({-24, -55, -53, -51, 14, -49, -48, -50, -19, -17, -13, -41, 23, -37}), frozenset({5, 6, 8, 9, -54, -55, 12, 14, 17, -46, 19, 21, 22, -43, -40, 26, -37, 35, 36, 41, 44, -20, -16, -13, -10, -2}), frozenset({6, 9, -54, -55, 13, 14, -50, 16, 19, -45, -43, 22, -42, 25, -37, 36, 38, 41, 44, -20, -17, -12, -10, -3}), frozenset({9, -54, -55, 14, -50, -48, 20, -44, -42, 25, -38, 36, 37, 41, 43, -19, -17, -13, -10}), frozenset({9, -54, -55, 14, -49, -48, -50, -42, 25, -38, 37, 41, -19, -17, -13, -10}), frozenset({9, -54, -55, 13, -50, -51, -48, 20, -44, -41, -37, 36, 43, -19, -17, -14, -10}), frozenset({9, -54, -55, -51, 14, -49, -48, -50, -19, -17, -13, -10, -41, -37}), frozenset({9, -54, -55, 13, -50, -49, -48, -51, -19, -17, -14, -10, -41, -37}), frozenset({3, -55, -54, -53, 13, 14, -50, 16, -45, 20, -44, 22, -41, 25, -38, 36, 37, 42, 43, -19, -17, -12, -6}), frozenset({37, -55, -54, -53, 42, -19, 14, -49, -48, -50, -17, -13, -41, 25, -38}), frozenset({38, 41, -54, -53, -55, 13, -50, -49, -48, -19, -17, -14, -42, 25, -37}), frozenset({37, -55, -54, -53, 42, 13, -50, -49, -48, -19, -17, -14, -41, 25, -38}), frozenset({3, -55, -54, -53, 13, 14, -51, 17, -45, 20, 21, 22, -44, -40, -36, 35, 37, 41, 43, -19, -16, -12, -6}), frozenset({-55, -54, -53, -51, 14, -48, 19, 20, -44, -41, -37, 35, 36, 40, 43, -21, -17, -13}), frozenset({-55, -54, -53, -51, 14, -48, 19, -44, 21, -40, -35, 36, 37, 41, 43, -20, -17, -13}), frozenset({37, 41, -54, -53, -21, -51, 14, -49, -48, -17, -55, 19, -13, -40, -35}), frozenset({-55, -54, -53, 13, -50, -51, -48, 19, -44, -41, -36, 37, 43, -20, -17, -14}), frozenset({-55, -54, -53, 13, -50, -51, -48, 19, -43, -41, -37, 36, 44, -20, -17, -14}), frozenset({-55, -54, -53, -51, 14, -50, -48, 19, -43, -41, -37, 36, 44, -20, -17, -13}), frozenset({3, -55, -54, -53, 12, -51, 14, -49, -50, 17, -45, 22, -41, -37, -19, -16, -13, -6}), frozenset({-55, -54, -53, -51, 14, -49, -48, -50, -19, -17, -13, -41, -37})]
429	itemsets left after W operation 	: [frozenset({56, 44, -43, 14}), frozenset({-56, -55, -53, -51, -48, 20, 21, 23, -40, -36, 35, 37, -24, 41, -19, -17, -13}), frozenset({-56, 9, -51, -50, -48, 17, 20, 23, -41, -36, 37, 39, -24, -19, -18, -13, -10}), frozenset({-56, -54, -53, -51, -48, 17, 19, 21, -40, -37, 35, 36, 39, 41, -20, -18, -13}), frozenset({5, 6, 8, 9, -54, -55, 12, -56, 17, -46, 19, 21, 22, -40, 26, -37, 35, 36, 41, -20, -16, -13, -10, -2}), frozenset({36, 39, -56, -54, -53, -20, -51, -50, -18, -48, 17, 19, -13, -41, -37}), frozenset({37, -56, 41, -54, -53, -51, -50, -19, -48, -17, 18, -13, 20, -39, -36}), frozenset({6, -56, 9, -54, -55, 13, -50, 16, 19, -45, 22, -42, 25, -37, 36, 38, 41, -20, -17, -12, -10, -3}), frozenset({36, -56, -55, -54, -53, -20, -51, -50, -17, -48, 19, -13, -41, -37}), frozenset({3, -56, -53, -52, 19, 20, 21, -45, 23, 24, -40, -36, 35, 37, 38, -25, 41, 42, -22, -13, -6}), frozenset({2, 3, 4, 5, 7, 9, 10, 11, 13, 15, 16, 19, 20, 22, 23, 24, 26, 28, 29, 30, 32, 34, 35, 37, 38, 40, 42, -56, -55, -41, -36, -33, -31, -27, -25, -21, -17, -12, -8, -6}), frozenset({2, 5, -56, 9, 10, -55, 13, 17, -46, 19, 21, 22, 23, -40, 26, -36, 35, 37, -24, 41, -20, -16, -12, -8, -6}), frozenset({2, 3, 4, 6, 7, 9, 10, 11, 13, 15, 17, 19, 22, 23, 25, 26, 28, 29, 31, 32, 34, 36, 38, 41, -56, -55, -50, -42, -37, -33, -30, -27, -24, -20, -16, -12, -8, -5}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 13, 15, 16, 19, 22, 23, 25, 26, 28, 29, 31, 32, 34, 36, 38, 41, -56, -55, -50, -42, -37, -33, -30, -27, -24, -20, -17, -12, -7, -3}), frozenset({5, 6, -56, 9, 10, -55, 13, -50, 17, -46, 19, 22, 23, -41, 26, -37, 36, -24, -20, -16, -12, -8, -2})]
296	itemsets left after W operation 	: [frozenset({57, -6, 3, -45}), frozenset({16, 48, 22, -57, 12}), frozenset({-57, 9, 12, 13, -49, 16, 17, 19, 21, 23, 24, -39, -35, 37, 38, -25, 40, 41, 42, -22, -18, -14, -10}), frozenset({-57, 9, -54, 12, -51, 14, -49, 16, -50, 18, 19, -39, -37, 41, -22, -17, -13, -10}), frozenset({-57, -55, -54, -53, 13, 14, -50, 16, 20, -44, 22, -41, 25, -38, 36, 37, 42, 43, -19, -17, -12}), frozenset({-57, 9, -52, -51, 14, 19, 20, 21, -44, 23, -40, -36, 35, 37, -24, 41, -22, 43, -13, -10}), frozenset({-57, -54, -53, 13, 14, -49, 16, -50, 18, -51, 22, -39, -37, 41, -19, -17, -12}), frozenset({-57, -55, -54, -53, 13, 14, -51, 17, 20, 21, 22, -44, -40, -36, 35, 37, 41, 43, -19, -16, -12}), frozenset({-57, -53, 13, 14, -49, 16, 18, 19, 22, 23, 24, -39, -35, 37, 38, -25, 40, 41, 42, -21, -17, -12}), frozenset({-57, -55, -54, -53, 12, -51, 14, -49, -50, 17, 22, -41, -37, -19, -16, -13}), frozenset({-57, -53, 13, 14, -49, 16, 17, -51, 21, 22, 23, -41, -35, 37, 39, 40, -24, -19, -18, -12}), frozenset({-57, -53, 13, 14, -49, -50, 17, 18, -51, 22, 23, -39, -37, -24, 41, -19, -16, -12}), frozenset({-57, 9, -55, 13, 14, -51, 17, 19, -44, 21, 22, 23, -40, -35, 36, 37, -24, 41, 43, -20, -16, -12, -10}), frozenset({-57, -53, -52, 13, -50, -49, 19, 23, -41, 24, -38, 37, -25, 42, -22, -14}), frozenset({-57, -56, -53, -52, 19, 20, 21, 23, 24, -40, -36, 35, 37, 38, -25, 41, 42, -22, -13})]
235	itemsets left after W operation 	: [frozenset({41, 58, 22}), frozenset({6, -58, 9, 12, 13, -50, -49, 16, 17, -51, -45, 23, -39, -37, -24, -19, -18, -14, -10, -3}), frozenset({6, -58, -53, 12, 13, -51, -49, 17, 18, 19, -45, 23, -39, -35, 37, 40, -24, -21, -16, -14, -3}), frozenset({6, -58, -53, -52, 13, -50, -49, -45, -42, 23, 25, -37, 38, -24, -19, -14, -3}), frozenset({2, 6, -58, 8, -53, -52, 14, -49, -46, 21, 23, -40, 26, -37, 35, -24, -19, -13, -5}), frozenset({2, 5, -58, 9, 10, -54, 12, 13, -49, 17, 18, -46, 21, -39, 26, -35, 37, 40, -19, -16, -14, -8, -6}), frozenset({6, -58, 9, -54, 12, 13, -50, -49, 16, 17, -51, -45, -39, -37, -19, -18, -14, -10, -3}), frozenset({6, -58, 9, -54, -52, -51, 14, -45, 20, 21, -44, -40, -35, 36, 37, 43, -19, -13, -10, -3}), frozenset({6, -58, 9, -54, -52, -51, 14, -49, 19, -45, -40, -37, 35, -21, -13, -10, -3}), frozenset({2, 3, 5, 6, -58, 8, -54, -53, 12, 14, -49, 16, -47, 18, -50, 25, 26, -39, -38, 37, 42, -19, -17, -13, -4}), frozenset({6, -58, -54, -53, 12, -51, 14, -49, 16, 18, -45, 21, -39, -35, 37, 40, -19, -17, -13, -3}), frozenset({6, -58, -54, -53, -52, -51, 14, -49, -45, 21, -40, -35, 37, -19, -13, -3}), frozenset({5, 6, -58, 8, 9, -54, -55, 12, -56, 17, -46, 19, 21, -40, 26, -37, 35, 36, -20, -16, -13, -10, -2}), frozenset({6, -58, -56, 9, -54, -55, 13, -50, 16, 19, -45, -42, 25, -37, 36, 38, -20, -17, -12, -10, -3}), frozenset({2, 5, -58, -56, 9, 10, -55, 13, 17, -46, 19, 21, 23, -40, 26, -36, 35, 37, -24, -20, -16, -12, -8, -6}), frozenset({2, 3, 4, 6, 7, 9, 10, 11, 13, 15, 17, 19, 23, 25, 26, 28, 29, 31, 32, 34, 36, 38, -58, -56, -55, -50, -42, -37, -33, -30, -27, -24, -20, -16, -12, -8, -5}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 13, 15, 16, 19, 23, 25, 26, 28, 29, 31, 32, 34, 36, 38, -58, -56, -55, -50, -42, -37, -33, -30, -27, -24, -20, -17, -12, -7, -3}), frozenset({-58, -57, -54, -53, 13, 14, -49, 16, -50, 18, -51, -39, -37, -19, -17, -12}), frozenset({-58, -57, -55, -54, -53, 13, 14, -51, 17, 20, 21, -44, -40, -36, 35, 37, 43, -19, -16, -12}), frozenset({-58, -57, -53, 13, 14, -49, 16, 18, 19, 23, 24, -39, -35, 37, 38, -25, 40, 42, -21, -17, -12}), frozenset({-58, -57, -53, 13, 14, -49, -50, 17, 18, -51, 23, -39, -37, -24, -19, -16, -12}), frozenset({-58, -57, 9, -55, 13, 14, -51, 17, 19, -44, 21, 23, -40, -35, 36, 37, -24, 43, -20, -16, -12, -10})]>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 172
 Number of frequent closed itemsets: 16228
 Total time ~: 412 ms

211	itemsets left after W operation 	: [frozenset({59, 36, 14}), frozenset({-59, -58, -57, 9, -55, 13, -51, 17, 19, -44, 21, 23, -40, -35, 37, -24, 43, -20, -16, -12, -10}), frozenset({-59, -55, -53, -48, 19, 20, -44, 23, 24, -41, -37, 35, 38, -25, 40, 42, 43, -21, -17, -13}), frozenset({-59, -57, -55, -54, -53, 13, -50, 16, 20, -44, 22, -41, 25, -38, 37, 42, 43, -19, -17, -12}), frozenset({2, 5, -59, 9, 10, -52, -50, -46, 19, -44, 22, 23, -41, 26, -37, -24, 43, -20, -13, -8, -6}), frozenset({-59, -53, -48, 18, 19, 20, -44, 23, 24, -39, -38, 35, 37, -25, 40, 41, 42, 43, -21, -17, -13}), frozenset({-59, -53, -51, -50, -48, 18, 19, -44, 23, -39, -37, -24, 41, 43, -20, -17, -13}), frozenset({-59, 9, -54, -55, -50, -48, 20, -44, -42, 25, -38, 37, 41, 43, -19, -17, -13, -10}), frozenset({3, 4, 5, 6, -59, 8, -53, -52, -50, -47, 19, 20, -44, -42, 23, 24, 26, -37, 38, -25, 41, -22, 43, -13, -2}), frozenset({-59, 9, -54, -51, -48, 17, 19, 20, -44, -41, -35, 37, 39, 40, 43, -21, -18, -13, -10}), frozenset({-59, -55, -54, -53, -51, -48, 19, 20, -44, -41, -37, 35, 40, 43, -21, -17, -13}), frozenset({-59, -55, -54, -53, -51, -48, 19, -44, 21, -40, -35, 37, 41, 43, -20, -17, -13}), frozenset({-59, 6, -58, 9, -54, -52, -51, -45, 20, 21, -44, -40, -35, 37, 43, -19, -13, -10, -3}), frozenset({-59, -54, -53, -50, -48, 17, 19, -44, -41, 25, -38, 37, 39, 42, 43, -20, -18, -13}), frozenset({-59, 6, -54, -53, -52, -51, -50, -45, 20, -44, 22, -41, -37, 43, -19, -13, -3}), frozenset({2, -59, 6, 8, -54, -53, -52, -50, -46, 19, 20, -44, -41, 26, -37, -22, 43, -13, -5})]
Initial DL				: 65811.93411125071
Final DL				: 12227.904508228114
Compression (wrt me)	: 0.8141992835591543
Operator Counters		: {'D': 0, 'W': 15, 'V': 0, 'S': 0, 'R': 0, 'T': 0}
Misle Learning Runtime	: 5.571188926696777

Timeout of 20 seconds reached while mining patterns with minsup = 0.5
Current Minsup[0.75] yields 16228 itemsets.
Top-k minsup for at least 10000 paterns = 0.75 or 129
1  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({2, 3, 4, 5, 7, 8, 9, 11, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 34, 36, 37, 38, 40, 41, 42, 44, -43, -39, -35, -33, -29, -27, -23, -19, -17, -13, -10, -6})}
DL of initial theory	: 59173.41314872611
9999	itemsets left after W operation 	: [frozenset({4, 7, -43, -39, -35, 30, 31, 32, -29, 36, 37, 38, 40, 41, 42, 44, 45}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, -45, 24, 25, 26, 28, -33, 34, -27, -23, -22, -18, -12, -9, -6}), frozenset({2, 3, 5, 8, 9, 11, 12, 14, 15, 17, 18, -45, 20, 21, 22, 23, 25, 26, 28, -33, 34, -27, -24, -19, -16, -13, -10, -6}), frozenset({2, 5, 6, 8, 10, 11, 12, 14, 15, 16, 18, -45, 20, 21, 22, 23, 25, 26, 28, -33, 34, -27, -24, -19, -17, -13, -9, -3}), frozenset({2, 5, 6, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, -45, 23, 24, 26, 27, -34, 33, -28, -25, -22, -17, -13, -9, -3}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 16, 17, 18, -45, 20, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -19, -15, -12, -9, -6}), frozenset({2, 3, 6, 8, 10, 11, 12, 14, 15, 17, 18, 19, -45, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -20, -16, -13, -9, -5}), frozenset({2, 5, 6, 9, 10, 11, 13, 14, 16, 17, 18, 19, -45, 21, 22, 23, 24, 25, 28, -33, 34, -27, -26, -20, -15, -12, -8, -3}), frozenset({2, 3, 5, 8, 9, 11, 12, 14, 15, 16, 18, 19, -45, 21, 22, 24, 25, 26, 27, -34, 33, -28, -23, -20, -17, -13, -10, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 13, 15, 16, 18, -45, 20, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -19, -17, -14, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 16, 18, -45, 20, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -19, -17, -12, -9, -6}), frozenset({2, 5, 6, 9, 10, 11, 13, 14, 15, 17, 18, -45, 20, 21, 22, 23, 25, 26, 28, -33, 34, -27, -24, -19, -16, -12, -8, -3}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 16, 17, 19, 20, -45, 22, 23, 24, 26, 27, -34, 33, -28, -25, -21, -18, -13, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, -45, 24, 25, 26, 27, -34, 33, -28, -23, -22, -18, -14, -9, -6}), frozenset({2, 3, 5, 8, 9, 11, 12, 14, 15, 16, 18, 19, 20, -45, 22, 24, 25, 26, 27, -34, 33, -28, -23, -21, -17, -13, -10, -6}), frozenset({2, 3, 6, 8, 9, 11, 12, 14, 15, 16, 18, 19, 20, -45, 22, 24, 25, 26, 27, -33, 34, -28, -23, -21, -17, -13, -10, -5}), frozenset({2, 3, 6, 8, 10, 11, 12, 14, 16, 17, 18, 19, 20, -45, 22, 23, 24, 26, 28, -33, 34, -27, -25, -21, -15, -13, -9, -5}), frozenset({2, 3, 6, 8, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, -45, 23, 24, 26, 27, -34, 33, -28, -25, -22, -17, -12, -9, -5}), frozenset({2, 3, 5, 8, 9, 11, 13, 14, 15, 17, 18, -45, 20, 21, 22, 23, 25, 26, 28, -33, 34, -27, -24, -19, -16, -12, -10, -6}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 16, 18, 19, 20, -45, 22, 24, 25, 26, 27, -34, 33, -28, -23, -21, -17, -12, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 13, 15, 16, 18, 19, 20, -45, 22, 23, 24, 26, 27, -34, 33, -28, -25, -21, -17, -14, -9, -6}), frozenset({2, 3, 5, 8, 9, 11, 12, 13, 15, 16, 18, 19, -45, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -20, -17, -14, -10, -6}), frozenset({2, 3, 6, 8, 10, 11, 13, 14, 15, 17, 18, -45, 20, 21, 22, 23, 25, 26, 28, -33, 34, -27, -24, -19, -16, -12, -9, -5}), frozenset({2, 5, 6, 8, 10, 11, 12, 14, 15, 17, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -16, -13, -9, -3}), frozenset({2, 3, 5, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, -45, 23, 24, 26, 27, -34, 33, -28, -25, -22, -17, -12, -8, -6}), frozenset({2, 3, 5, 8, 9, 11, 12, 14, 15, 16, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -17, -13, -10, -6}), frozenset({2, 3, 5, 6, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -15, -12, -9}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, -45, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -12, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, -45, 23, 24, 25, 27, -34, 33, -28, -26, -22, -17, -12, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 16, 17, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -15, -13, -9, -6}), frozenset({3, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, -45, 20, 21, 22, 23, 25, 26, 28, -33, 34, -27, -24, -19, -16, -12, -9, -2}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 17, 18, 19, -45, 21, 22, 23, 25, 26, 27, -34, 33, -28, -24, -20, -16, -12, -9, -6}), frozenset({2, 5, 6, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, -45, 22, 23, 24, 26, 28, -33, 34, -27, -25, -21, -15, -12, -9, -3}), frozenset({2, 3, 5, 8, 9, 11, 12, 14, 15, 16, 17, 19, 20, -45, 22, 23, 24, 26, 27, -34, 33, -28, -25, -21, -18, -13, -10, -6}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, -45, 23, 24, 26, 27, -34, 33, -28, -25, -22, -16, -12, -9, -6}), frozenset({2, 3, 5, 8, 9, 11, 12, 14, 15, 17, 18, -45, 20, 21, 22, 23, 24, 26, 28, -33, 34, -27, -25, -19, -16, -13, -10, -6}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, -45, 23, 25, 26, 27, -34, 33, -28, -24, -22, -17, -12, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 16, 17, 18, 19, 20, -45, 22, 23, 25, 26, 28, -33, 34, -27, -24, -21, -15, -13, -9, -6}), frozenset({2, 3, 5, 9, 10, 11, 12, 14, 15, 16, 18, 19, -45, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -20, -17, -13, -8, -6}), frozenset({2, 3, 5, 8, 10, 12, 13, 14, 15, 17, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -16, -11, -9, -6}), frozenset({2, 5, 6, 8, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, -45, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -11, -9, -3}), frozenset({2, 3, 5, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, -45, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -11, -8, -6}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 17, 18, -45, 20, 21, 22, 23, 25, 26, 28, -33, 34, -27, -24, -19, -16, -12, -9, -6}), frozenset({2, 3, 5, 8, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, -45, 24, 25, 26, 28, -33, 34, -27, -23, -22, -16, -11, -9, -6}), frozenset({2, 3, 5, 8, 9, 11, 13, 14, 15, 17, 18, 19, 20, -45, 22, 23, 24, 26, 27, -33, 34, -28, -25, -21, -16, -12, -10, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 16, 18, -45, 20, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -19, -17, -13, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 16, 17, 19, -45, 21, 22, 23, 24, 26, 27, -34, 33, -28, -25, -20, -18, -12, -9, -6}), frozenset({2, 3, 5, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, -45, 23, 25, 26, 27, -34, 33, -28, -24, -22, -17, -12, -8, -6}), frozenset({2, 3, 5, 8, 9, 11, 12, 13, 15, 16, 17, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -18, -14, -10, -6}), frozenset({2, 3, 5, 8, 9, 11, 12, 14, 15, 16, 18, 19, 20, -45, 22, 23, 24, 25, 27, -34, 33, -28, -26, -21, -17, -13, -10, -6}), frozenset({2, 3, 5, 9, 10, 11, 13, 14, 16, 17, 18, 19, -45, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -20, -15, -12, -8, -6}), frozenset({2, 5, 6, 8, 10, 11, 13, 14, 16, 17, 18, 19, -45, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -20, -15, -12, -9, -3}), frozenset({2, 3, 5, 9, 10, 11, 13, 14, 15, 17, 18, -45, 20, 21, 22, 23, 24, 26, 28, -33, 34, -27, -25, -19, -16, -12, -8, -6}), frozenset({2, 3, 5, 9, 10, 11, 13, 14, 16, 17, 18, 19, -45, 21, 22, 23, 24, 25, 28, -33, 34, -27, -26, -20, -15, -12, -8, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, -45, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -13, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -15, -12, -9, -6}), frozenset({2, 3, 6, 8, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, -45, 23, 24, 26, 27, -34, 33, -28, -25, -22, -18, -13, -9, -5}), frozenset({3, 5, 6, 8, 9, 11, 12, 14, 16, 17, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -15, -13, -10, -2}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 17, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -16, -13, -9, -6}), frozenset({2, 3, 6, 8, 10, 11, 12, 14, 15, 16, 18, 19, -45, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -20, -17, -13, -9, -5}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, -45, 23, 24, 26, 27, -34, 33, -28, -25, -22, -17, -12, -9, -6}), frozenset({2, 3, 6, 8, 9, 11, 12, 14, 15, 17, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -16, -13, -10, -5}), frozenset({2, 5, 6, 8, 10, 11, 13, 14, 15, 16, 18, 19, 20, -45, 22, 23, 25, 26, 28, -33, 34, -27, -24, -21, -17, -12, -9, -3}), frozenset({2, 5, 6, 8, 10, 11, 12, 13, 15, 17, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -16, -14, -9, -3}), frozenset({2, 3, 5, 8, 9, 11, 12, 13, 15, 16, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -17, -14, -10, -6}), frozenset({2, 3, 5, 8, 9, 11, 12, 14, 15, 16, 18, 19, -45, 21, 22, 23, 24, 25, 27, -34, 33, -28, -26, -20, -17, -13, -10, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, -45, 22, 23, 25, 26, 27, -34, 33, -28, -24, -21, -17, -13, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, -45, 23, 24, 25, 27, -34, 33, -28, -26, -22, -18, -13, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 16, 18, -45, 20, 21, 22, 23, 24, 26, 28, -33, 34, -27, -25, -19, -17, -12, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 16, 17, 19, -45, 21, 22, 24, 25, 26, 27, -34, 33, -28, -23, -20, -18, -13, -9, -6}), frozenset({3, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, -45, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -20, -16, -12, -9, -2}), frozenset({2, 3, 5, 8, 9, 11, 12, 14, 15, 16, 18, 19, 20, 21, -45, 23, 24, 25, 27, -34, 33, -28, -26, -22, -17, -13, -10, -6}), frozenset({2, 3, 5, 8, 9, 11, 12, 14, 16, 17, 18, 19, 20, 21, -45, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -13, -10, -6}), frozenset({2, 3, 5, 8, 9, 11, 13, 14, 16, 17, 18, 19, -45, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -20, -15, -12, -10, -6}), frozenset({2, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, -45, 20, 21, 22, 23, 25, 26, 28, -33, 34, -27, -24, -19, -16, -12, -9, -3}), frozenset({2, 3, 5, 9, 10, 11, 13, 14, 15, 16, 18, -45, 20, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -19, -17, -12, -8, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, -45, 23, 25, 26, 27, -34, 33, -28, -24, -22, -17, -13, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 16, 18, 19, -45, 21, 22, 23, 25, 26, 28, -34, 33, -27, -24, -20, -17, -12, -9, -6}), frozenset({2, 3, 5, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, -45, 24, 25, 26, 28, -33, 34, -27, -23, -22, -17, -12, -8, -6}), frozenset({2, 5, 6, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, -45, 23, 24, 26, 27, -34, 33, -28, -25, -22, -16, -12, -9, -3}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 16, 18, 19, -45, 21, 22, 23, 24, 26, 28, -33, 34, -27, -25, -20, -17, -13, -9, -6}), frozenset({2, 3, 5, 8, 9, 11, 12, 14, 15, 16, 17, 19, 20, 21, -45, 23, 25, 26, 27, -34, 33, -28, -24, -22, -18, -13, -10, -6}), frozenset({2, 5, 6, 9, 10, 11, 13, 14, 15, 17, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -16, -12, -8, -3}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, -45, 24, 25, 26, 28, -33, 34, -27, -23, -22, -16, -13, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 16, 18, 19, 20, -45, 22, 23, 24, 26, 27, -34, 33, -28, -25, -21, -17, -12, -9, -6}), frozenset({2, 3, 5, 6, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, -45, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -12, -8}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 17, 18, -45, 20, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -19, -16, -13, -9, -6}), frozenset({2, 5, 6, 8, 10, 11, 12, 14, 15, 17, 18, 19, 20, -45, 22, 23, 24, 26, 28, -33, 34, -27, -25, -21, -16, -13, -9, -3}), frozenset({2, 3, 5, 8, 9, 11, 12, 14, 15, 16, 18, -45, 20, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -19, -17, -13, -10, -6}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, -45, 23, 24, 25, 28, -33, 34, -27, -26, -22, -16, -12, -9, -6}), frozenset({2, 3, 5, 6, 8, 10, 11, 13, 14, 16, 17, 18, -45, 20, 21, 22, 23, 24, 26, 28, -33, 34, -27, -25, -19, -15, -12, -9}), frozenset({2, 3, 6, 8, 10, 11, 13, 14, 15, 16, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -17, -12, -9, -5}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 16, 18, 19, -45, 21, 22, 23, 25, 26, 28, -33, 34, -27, -24, -20, -17, -12, -9, -6}), frozenset({2, 5, 6, 8, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, -45, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -13, -9, -3}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, -45, 24, 25, 26, 27, -34, 33, -28, -23, -22, -16, -12, -9, -6}), frozenset({2, 5, 6, 8, 10, 11, 12, 14, 15, 16, 18, -45, 20, 21, 22, 23, 24, 26, 28, -33, 34, -27, -25, -19, -17, -13, -9, -3}), frozenset({2, 5, 6, 8, 9, 11, 12, 14, 15, 16, 18, 19, 20, -45, 22, 24, 25, 26, 27, -34, 33, -28, -23, -21, -17, -13, -10, -3}), frozenset({2, 3, 5, 8, 9, 11, 12, 13, 15, 16, 18, 19, 20, -45, 22, 24, 25, 26, 27, -34, 33, -28, -23, -21, -17, -14, -10, -6}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, -45, 22, 23, 24, 26, 27, -34, 33, -28, -25, -21, -16, -12, -9, -6}), frozenset({2, 5, 6, 8, 9, 11, 12, 14, 16, 17, 18, 19, 20, 21, -45, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -13, -10, -3}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 16, 18, -45, 20, 21, 22, 23, 24, 26, 28, -33, 34, -27, -25, -19, -17, -13, -9, -6}), frozenset({2, 3, 5, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, -45, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -14, -10, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, -45, 23, 24, 26, 27, -34, 33, -28, -25, -22, -17, -13, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -16, -12, -9, -6}), frozenset({2, 3, 5, 9, 10, 11, 13, 14, 15, 17, 18, -45, 20, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -19, -16, -12, -8, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 16, 17, 19, 20, -45, 22, 23, 25, 26, 27, -34, 33, -28, -24, -21, -18, -13, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 16, 18, -45, 20, 21, 22, 23, 25, 26, 28, -33, 34, -27, -24, -19, -17, -13, -9, -6}), frozenset({2, 3, 5, 8, 10, 12, 13, 14, 15, 17, 18, -45, 20, 21, 22, 24, 25, 26, 27, -34, 33, -28, -23, -19, -16, -11, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 16, 17, 18, -45, 20, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -19, -15, -13, -9, -6}), frozenset({2, 3, 5, 9, 10, 11, 12, 14, 15, 16, 18, -45, 20, 21, 22, 23, 25, 26, 28, -33, 34, -27, -24, -19, -17, -13, -8, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, -45, 22, 24, 25, 26, 27, -34, 33, -28, -23, -21, -17, -13, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, -45, 23, 25, 26, 27, -34, 33, -28, -24, -22, -18, -13, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 13, 15, 16, 18, 19, 20, 21, -45, 23, 24, 25, 27, -34, 33, -28, -26, -22, -17, -14, -9, -6}), frozenset({2, 3, 5, 9, 10, 11, 12, 14, 15, 17, 18, 19, -45, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -20, -16, -13, -8, -6}), frozenset({2, 3, 5, 9, 10, 11, 13, 14, 15, 17, 18, 19, -45, 21, 22, 23, 25, 26, 28, -34, 33, -27, -24, -20, -16, -12, -8, -6}), frozenset({2, 3, 5, 9, 10, 11, 13, 14, 15, 17, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -16, -12, -8, -6}), frozenset({2, 5, 6, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -15, -12, -9, -3}), frozenset({2, 3, 5, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, -45, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -13, -8, -6}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 16, 18, 19, -45, 21, 22, 24, 25, 26, 27, -34, 33, -28, -23, -20, -17, -12, -9, -6}), frozenset({2, 3, 5, 8, 9, 11, 12, 14, 15, 17, 18, -45, 20, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -19, -16, -13, -10, -6}), frozenset({2, 5, 6, 8, 9, 11, 12, 14, 16, 17, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -15, -13, -10, -3}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, -45, 24, 25, 26, 27, -34, 33, -28, -23, -22, -18, -13, -9, -6}), frozenset({3, 5, 6, 8, 9, 11, 12, 14, 15, 16, 18, 19, -45, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -20, -17, -13, -10, -2}), frozenset({2, 3, 5, 8, 10, 11, 12, 13, 15, 16, 18, 19, -45, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -20, -17, -14, -9, -6}), frozenset({2, 3, 6, 9, 10, 11, 13, 14, 15, 17, 18, -45, 20, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -19, -16, -12, -8, -5}), frozenset({2, 3, 5, 8, 10, 11, 13, 14, 15, 16, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -17, -12, -9, -6}), frozenset({2, 3, 5, 9, 10, 11, 13, 14, 16, 17, 18, 19, -45, 21, 22, 23, 25, 26, 28, -33, 34, -27, -24, -20, -15, -12, -8, -6}), frozenset({2, 5, 6, 9, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, -45, 24, 25, 26, 28, -33, 34, -27, -23, -22, -17, -13, -8, -3}), frozenset({3, 5, 6, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -15, -12, -9, -2}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 17, 18, -45, 20, 21, 22, 23, 25, 26, 28, -33, 34, -27, -24, -19, -16, -13, -9, -6}), frozenset({2, 3, 5, 8, 10, 11, 12, 14, 15, 16, 18, 19, -45, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -20, -17, -13, -9, -6})]
7705	itemsets left after W operation 	: [frozenset({4, 5, 38, 7, 42, 11, 46, 18, 26}), frozenset({2, 3, 8, 9, 12, 14, 16, 17, 19, 20, 22, 24, 25, 28, 30, 31, 32, 34, 36, 37, 40, 41, 43, -46, -44, -39, -35, -33, -29, -27, -23, -21, -15, -13, -10, -6}), frozenset({2, 3, 9, 10, 13, 14, 15, 17, 19, 20, 21, 24, 25, 28, 29, 31, 32, 34, 36, 37, 40, 41, 44, -46, -43, -39, -35, -33, -30, -27, -23, -22, -16, -12, -8, -6}), frozenset({2, 3, 9, 10, 12, 14, 15, 17, 19, 21, 22, 24, 25, 28, 30, 31, 32, 34, 36, 37, 39, 41, 44, -46, -43, -40, -35, -33, -29, -27, -23, -20, -16, -13, -8, -6}), frozenset({2, 6, 8, 10, 12, 14, 16, 17, 19, 21, 22, 24, 25, 28, 29, 30, 32, 34, 35, 36, 40, 41, 44, -46, -43, -39, -37, -33, -31, -27, -23, -20, -15, -13, -9, -3}), frozenset({3, 6, 8, 10, 13, 14, 15, 17, 19, 20, 22, 24, 25, 28, 29, 30, 31, 34, 35, 37, 39, 40, 44, -46, -43, -41, -36, -33, -32, -27, -23, -21, -16, -12, -9, -2}), frozenset({3, 6, 8, 10, 12, 14, 15, 17, 20, 21, 22, 24, 25, 28, 29, 30, 32, 34, 35, 36, 40, 41, 44, -46, -43, -39, -37, -33, -31, -27, -23, -19, -16, -13, -9, -2}), frozenset({2, 6, 8, 9, 12, 13, 15, 17, 19, 20, 22, 24, 25, 28, 30, 31, 32, 34, 36, 37, 39, 41, 44, -46, -43, -40, -35, -33, -29, -27, -23, -21, -16, -14, -10, -3}), frozenset({2, 6, 8, 10, 13, 14, 15, 17, 19, 20, 21, 24, 25, 28, 29, 31, 32, 34, 36, 37, 40, 41, 44, -46, -43, -39, -35, -33, -30, -27, -23, -22, -16, -12, -9, -3}), frozenset({3, 6, 8, 10, 12, 14, 15, 17, 20, 21, 22, 24, 25, 28, 29, 30, 31, 34, 35, 36, 40, 41, 43, -46, -44, -39, -37, -33, -32, -27, -23, -19, -16, -13, -9, -2}), frozenset({2, 3, 8, 9, 12, 14, 16, 17, 19, 21, 22, 24, 25, 28, 30, 31, 32, 34, 36, 37, 39, 41, 44, -46, -43, -40, -35, -33, -29, -27, -23, -20, -15, -13, -10, -6}), frozenset({3, 6, 8, 10, 12, 14, 15, 16, 20, 21, 22, 24, 25, 28, 29, 30, 32, 34, 35, 36, 40, 41, 44, -46, -43, -39, -37, -33, -31, -27, -23, -19, -17, -13, -9, -2}), frozenset({3, 6, 9, 10, 13, 14, 16, 17, 19, 21, 22, 24, 25, 28, 29, 30, 31, 34, 35, 37, 40, 41, 44, -46, -43, -39, -36, -33, -32, -27, -23, -20, -15, -12, -8, -2}), frozenset({2, 3, 8, 9, 12, 14, 16, 17, 19, 20, 22, 24, 25, 28, 30, 31, 32, 34, 36, 37, 39, 40, 44, -46, -43, -41, -35, -33, -29, -27, -23, -21, -15, -13, -10, -6}), frozenset({2, 3, 8, 10, 13, 14, 15, 16, 19, 20, 22, 24, 25, 27, 30, 31, 32, 34, 36, 37, 39, 41, 44, -46, -43, -40, -35, -33, -29, -28, -23, -21, -17, -12, -9, -6}), frozenset({3, 6, 8, 9, 12, 14, 15, 16, 20, 21, 22, 24, 25, 28, 29, 30, 31, 34, 35, 37, 40, 41, 43, -46, -44, -39, -36, -33, -32, -27, -23, -19, -17, -13, -10, -2}), frozenset({2, 3, 6, 8, 10, 13, 14, 15, 16, 19, 20, 21, 23, 24, 27, 30, 31, 32, 33, 36, 37, 40, 41, 43, -46, -44, -39, -35, -34, -29, -28, -25, -22, -17, -12, -9}), frozenset({3, 6, 8, 10, 12, 14, 15, 16, 20, 21, 22, 24, 25, 28, 29, 31, 32, 34, 35, 37, 40, 41, 43, -46, -44, -39, -36, -33, -30, -27, -23, -19, -17, -13, -9, -2}), frozenset({3, 6, 8, 10, 12, 14, 15, 17, 19, 21, 22, 24, 25, 28, 29, 31, 32, 34, 35, 37, 39, 41, 43, -46, -44, -40, -36, -33, -30, -27, -23, -20, -16, -13, -9, -2}), frozenset({2, 3, 8, 9, 13, 14, 15, 16, 19, 20, 21, 24, 25, 27, 30, 31, 32, 34, 36, 37, 39, 41, 44, -46, -43, -40, -35, -33, -29, -28, -23, -22, -17, -12, -10, -6}), frozenset({3, 6, 8, 10, 12, 14, 15, 17, 20, 21, 22, 24, 25, 28, 29, 30, 32, 34, 35, 36, 40, 41, 43, -46, -44, -39, -37, -33, -31, -27, -23, -19, -16, -13, -9, -2}), frozenset({3, 6, 8, 9, 12, 14, 16, 17, 19, 21, 22, 24, 25, 28, 29, 30, 32, 34, 35, 37, 40, 41, 43, -46, -44, -39, -36, -33, -31, -27, -23, -20, -15, -13, -10, -2}), frozenset({3, 6, 8, 10, 12, 14, 15, 16, 19, 21, 22, 24, 25, 28, 29, 30, 32, 34, 35, 36, 39, 40, 43, -46, -44, -41, -37, -33, -31, -27, -23, -20, -17, -13, -9, -2}), frozenset({2, 6, 9, 10, 13, 14, 16, 17, 19, 20, 22, 24, 25, 28, 29, 31, 32, 34, 36, 37, 40, 41, 44, -46, -43, -39, -35, -33, -30, -27, -23, -21, -15, -12, -8, -3}), frozenset({2, 3, 6, 9, 10, 13, 14, 16, 17, 19, 20, 22, 24, 25, 28, 30, 31, 32, 34, 35, 37, 40, 41, 44, -46, -43, -39, -36, -33, -29, -27, -23, -21, -15, -12, -8}), frozenset({3, 6, 8, 10, 12, 14, 15, 17, 19, 21, 22, 24, 25, 28, 29, 30, 32, 34, 36, 37, 40, 41, 44, -46, -43, -39, -35, -33, -31, -27, -23, -20, -16, -13, -9, -2}), frozenset({2, 6, 8, 10, 12, 14, 15, 17, 19, 21, 22, 24, 25, 28, 30, 31, 32, 34, 35, 37, 40, 41, 44, -46, -43, -39, -36, -33, -29, -27, -23, -20, -16, -13, -9, -3}), frozenset({2, 3, 8, 10, 12, 14, 16, 17, 19, 20, 22, 24, 25, 28, 29, 31, 32, 34, 36, 37, 40, 41, 44, -46, -43, -39, -35, -33, -30, -27, -23, -21, -15, -13, -9, -6}), frozenset({2, 6, 8, 10, 12, 14, 15, 16, 19, 20, 21, 24, 25, 28, 29, 31, 32, 34, 36, 37, 40, 41, 44, -46, -43, -39, -35, -33, -30, -27, -23, -22, -17, -13, -9, -3}), frozenset({2, 3, 9, 10, 13, 14, 15, 16, 19, 20, 22, 24, 25, 28, 30, 31, 32, 34, 35, 37, 40, 41, 44, -46, -43, -39, -36, -33, -29, -27, -23, -21, -17, -12, -8, -6}), frozenset({2, 3, 8, 9, 12, 14, 15, 17, 19, 20, 21, 24, 25, 28, 30, 31, 32, 34, 36, 37, 40, 41, 43, -46, -44, -39, -35, -33, -29, -27, -23, -22, -16, -13, -10, -6}), frozenset({2, 3, 8, 10, 12, 13, 16, 17, 19, 20, 21, 24, 25, 28, 30, 31, 32, 34, 36, 37, 39, 40, 44, -46, -43, -41, -35, -33, -29, -27, -23, -22, -15, -14, -9, -6}), frozenset({3, 6, 8, 9, 12, 14, 16, 17, 20, 21, 22, 24, 25, 28, 29, 30, 32, 34, 35, 36, 39, 40, 44, -46, -43, -41, -37, -33, -31, -27, -23, -19, -15, -13, -10, -2}), frozenset({2, 3, 9, 10, 13, 14, 16, 17, 19, 21, 22, 24, 25, 28, 29, 30, 32, 34, 36, 37, 40, 41, 44, -46, -43, -39, -35, -33, -31, -27, -23, -20, -15, -12, -8, -6}), frozenset({3, 6, 8, 10, 12, 14, 15, 17, 19, 21, 22, 24, 25, 28, 29, 30, 32, 34, 35, 36, 40, 41, 43, -46, -44, -39, -37, -33, -31, -27, -23, -20, -16, -13, -9, -2})]
# of frequent itemsets	: 17
Time of DCI Closed		: 0.3472778797149658
16	itemsets left after W operation 	: [frozenset({2, 14, 47}), frozenset({3, 5, 6, 7, 8, 10, 11, 12, 15, 17, 18, 19, 21, 22, 24, 25, 26, 28, 30, 31, 32, 34, 36, 37, 38, 40, 41, 42, 44, -47, -43, -39, -35, -33, -29, -27, -23, -20, -16, -13, -9, -4}), frozenset({3, 4, 5, 8, 9, 10, 11, 13, 16, 17, 18, 19, 20, 22, 24, 25, 26, 28, 30, 31, 32, 34, 36, 37, 38, 40, 41, 42, 44, -47, -43, -39, -35, -33, -29, -27, -23, -21, -15, -12, -7, -6}), frozenset({3, 4, 6, 7, 9, 10, 11, 13, 16, 17, 18, 19, 21, 22, 24, 25, 26, 28, 29, 30, 32, 34, 36, 37, 38, 40, 41, 42, 44, -47, -43, -39, -35, -33, -31, -27, -23, -20, -15, -12, -8, -5}), frozenset({3, 5, 6, 7, 8, 10, 11, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 30, 31, 32, 34, 35, 36, 38, 40, 41, 42, 44, -47, -43, -39, -37, -33, -29, -28, -26, -22, -18, -12, -9, -4}), frozenset({3, 4, 5, 8, 9, 10, 12, 13, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 44, -47, -43, -39, -35, -34, -29, -27, -23, -19, -15, -11, -7, -6}), frozenset({3, 4, 5, 8, 9, 10, 11, 13, 16, 17, 18, 19, 20, 21, 24, 25, 26, 28, 30, 31, 32, 34, 36, 37, 38, 40, 41, 42, 44, -47, -43, -39, -35, -33, -29, -27, -23, -22, -15, -12, -7, -6}), frozenset({3, 5, 8, 10, 11, 13, 15, 16, 17, -47, 19, 20, 21, -45, 24, 25, 26, 28, -33, 34, -27, -23, -22, -18, -12, -9, -6}), frozenset({3, 5, 8, 9, 11, 12, 15, 17, 18, -45, 20, 21, 22, 23, -47, 25, 26, 28, -33, 34, -27, -24, -19, -16, -13, -10, -6}), frozenset({5, 6, 8, 10, 11, 12, 15, 16, -47, 18, -45, 20, 21, 22, 23, 25, 26, 28, -33, 34, -27, -24, -19, -17, -13, -9, -3}), frozenset({5, 6, 8, 10, 11, 12, 15, 16, -47, 18, 19, 20, 21, -45, 23, 24, 26, 27, -34, 33, -28, -25, -22, -17, -13, -9, -3}), frozenset({3, 5, 8, 10, 11, 13, 16, 17, 18, -45, 20, 21, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -19, -15, -12, -9, -6}), frozenset({3, 6, 8, 10, 11, 12, 15, 17, 18, 19, -45, 21, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -20, -16, -13, -9, -5}), frozenset({5, 6, 9, 10, 11, 13, 16, 17, 18, 19, -45, 21, 22, 23, 24, 25, -47, 28, -33, 34, -27, -26, -20, -15, -12, -8, -3}), frozenset({3, 5, 8, 9, 11, 12, 15, 16, -47, 18, 19, -45, 21, 22, 24, 25, 26, 27, -34, 33, -28, -23, -20, -17, -13, -10, -6}), frozenset({3, 5, 8, 10, 11, 13, 15, 16, -47, 18, -45, 20, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -19, -17, -12, -9, -6}), frozenset({5, 6, 9, 10, 11, 13, 15, 17, 18, -45, 20, 21, 22, 23, -47, 25, 26, 28, -33, 34, -27, -24, -19, -16, -12, -8, -3}), frozenset({3, 5, 8, 10, 11, 12, 15, 16, 17, -47, 19, 20, -45, 22, 23, 24, 26, 27, -34, 33, -28, -25, -21, -18, -13, -9, -6}), frozenset({3, 5, 8, 9, 11, 12, 15, 16, -47, 18, 19, 20, -45, 22, 24, 25, 26, 27, -34, 33, -28, -23, -21, -17, -13, -10, -6}), frozenset({3, 6, 8, 9, 11, 12, 15, 16, -47, 18, 19, 20, -45, 22, 24, 25, 26, 27, -33, 34, -28, -23, -21, -17, -13, -10, -5}), frozenset({3, 6, 8, 10, 11, 12, 16, 17, 18, 19, 20, -45, 22, 23, 24, -47, 26, 28, -33, 34, -27, -25, -21, -15, -13, -9, -5}), frozenset({3, 6, 8, 10, 11, 13, 15, 16, -47, 18, 19, 20, 21, -45, 23, 24, 26, 27, -34, 33, -28, -25, -22, -17, -12, -9, -5}), frozenset({3, 5, 8, 9, 11, 13, 15, 17, 18, -45, 20, 21, 22, 23, -47, 25, 26, 28, -33, 34, -27, -24, -19, -16, -12, -10, -6}), frozenset({3, 5, 8, 10, 11, 13, 15, 16, -47, 18, 19, 20, -45, 22, 24, 25, 26, 27, -34, 33, -28, -23, -21, -17, -12, -9, -6}), frozenset({3, 6, 8, 10, 11, 13, 15, 17, 18, -45, 20, 21, 22, 23, -47, 25, 26, 28, -33, 34, -27, -24, -19, -16, -12, -9, -5}), frozenset({5, 6, 8, 10, 11, 12, 15, 17, 18, 19, 20, -45, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -21, -16, -13, -9, -3}), frozenset({3, 5, 9, 10, 11, 13, 15, 16, -47, 18, 19, 20, 21, -45, 23, 24, 26, 27, -34, 33, -28, -25, -22, -17, -12, -8, -6}), frozenset({3, 5, 8, 9, 11, 12, 15, 16, -47, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -17, -13, -10, -6}), frozenset({3, 5, 6, 8, 10, 11, 13, 16, 17, 18, 19, 20, -45, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -21, -15, -12, -9}), frozenset({3, 5, 8, 10, 11, 13, 16, 17, 18, 19, 20, 21, -45, -47, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -12, -9, -6}), frozenset({3, 5, 8, 10, 11, 13, 15, 16, -47, 18, 19, 20, 21, -45, 23, 24, 25, 27, -34, 33, -28, -26, -22, -17, -12, -9, -6}), frozenset({3, 5, 8, 10, 11, 12, 16, 17, 18, 19, 20, -45, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -21, -15, -13, -9, -6}), frozenset({3, 5, 8, 10, 11, 13, 15, 17, 18, 19, -45, 21, 22, 23, -47, 25, 26, 27, -34, 33, -28, -24, -20, -16, -12, -9, -6}), frozenset({5, 6, 8, 10, 11, 13, 16, 17, 18, 19, 20, -45, 22, 23, 24, -47, 26, 28, -33, 34, -27, -25, -21, -15, -12, -9, -3}), frozenset({3, 5, 8, 9, 11, 12, 15, 16, 17, -47, 19, 20, -45, 22, 23, 24, 26, 27, -34, 33, -28, -25, -21, -18, -13, -10, -6}), frozenset({3, 5, 8, 10, 11, 13, 15, 17, 18, 19, 20, 21, -45, 23, 24, -47, 26, 27, -34, 33, -28, -25, -22, -16, -12, -9, -6}), frozenset({3, 5, 8, 9, 11, 12, 15, 17, 18, -45, 20, 21, 22, 23, 24, -47, 26, 28, -33, 34, -27, -25, -19, -16, -13, -10, -6}), frozenset({3, 5, 8, 10, 11, 13, 15, 16, -47, 18, 19, 20, 21, -45, 23, 25, 26, 27, -34, 33, -28, -24, -22, -17, -12, -9, -6}), frozenset({3, 5, 8, 10, 11, 12, 16, 17, 18, 19, 20, -45, 22, 23, -47, 25, 26, 28, -33, 34, -27, -24, -21, -15, -13, -9, -6}), frozenset({3, 5, 9, 10, 11, 12, 15, 16, -47, 18, 19, -45, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -20, -17, -13, -8, -6}), frozenset({3, 5, 8, 10, 12, 13, 15, 17, 18, 19, 20, -45, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -21, -16, -11, -9, -6}), frozenset({5, 6, 8, 10, 12, 13, 16, 17, 18, 19, 20, 21, -45, -47, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -11, -9, -3}), frozenset({3, 5, 9, 10, 12, 13, 16, 17, 18, 19, 20, 21, -45, -47, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -11, -8, -6}), frozenset({3, 5, 8, 10, 11, 13, 15, 17, 18, -45, 20, 21, 22, 23, -47, 25, 26, 28, -33, 34, -27, -24, -19, -16, -12, -9, -6}), frozenset({3, 5, 8, 10, 12, 13, 15, 17, 18, 19, 20, 21, -45, -47, 24, 25, 26, 28, -33, 34, -27, -23, -22, -16, -11, -9, -6}), frozenset({3, 5, 8, 9, 11, 13, 15, 17, 18, 19, 20, -45, 22, 23, 24, -47, 26, 27, -33, 34, -28, -25, -21, -16, -12, -10, -6}), frozenset({3, 5, 8, 10, 11, 12, 15, 16, -47, 18, -45, 20, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -19, -17, -13, -9, -6}), frozenset({3, 5, 8, 10, 11, 13, 15, 16, 17, -47, 19, -45, 21, 22, 23, 24, 26, 27, -34, 33, -28, -25, -20, -18, -12, -9, -6}), frozenset({3, 5, 9, 10, 11, 13, 15, 16, -47, 18, 19, 20, 21, -45, 23, 25, 26, 27, -34, 33, -28, -24, -22, -17, -12, -8, -6}), frozenset({3, 5, 8, 9, 11, 12, 15, 16, -47, 18, 19, 20, -45, 22, 23, 24, 25, 27, -34, 33, -28, -26, -21, -17, -13, -10, -6}), frozenset({3, 5, 9, 10, 11, 13, 16, 17, 18, 19, -45, 21, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -20, -15, -12, -8, -6}), frozenset({5, 6, 8, 10, 11, 13, 16, 17, 18, 19, -45, 21, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -20, -15, -12, -9, -3}), frozenset({3, 5, 9, 10, 11, 13, 15, 17, 18, -45, 20, 21, 22, 23, 24, -47, 26, 28, -33, 34, -27, -25, -19, -16, -12, -8, -6}), frozenset({3, 5, 9, 10, 11, 13, 16, 17, 18, 19, -45, 21, 22, 23, 24, 25, -47, 28, -33, 34, -27, -26, -20, -15, -12, -8, -6}), frozenset({3, 5, 8, 10, 11, 12, 16, 17, 18, 19, 20, 21, -45, -47, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -13, -9, -6}), frozenset({3, 5, 8, 10, 11, 13, 16, 17, 18, 19, 20, -45, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -21, -15, -12, -9, -6}), frozenset({3, 6, 8, 10, 11, 12, 15, 16, 17, -47, 19, 20, 21, -45, 23, 24, 26, 27, -34, 33, -28, -25, -22, -18, -13, -9, -5}), frozenset({3, 5, 8, 10, 11, 12, 15, 17, 18, 19, 20, -45, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -21, -16, -13, -9, -6}), frozenset({3, 6, 8, 10, 11, 12, 15, 16, -47, 18, 19, -45, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -20, -17, -13, -9, -5}), frozenset({3, 5, 8, 10, 11, 13, 15, 16, -47, 18, 19, 20, 21, -45, 23, 24, 26, 27, -34, 33, -28, -25, -22, -17, -12, -9, -6}), frozenset({3, 6, 8, 9, 11, 12, 15, 17, 18, 19, 20, -45, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -21, -16, -13, -10, -5}), frozenset({5, 6, 8, 10, 11, 13, 15, 16, -47, 18, 19, 20, -45, 22, 23, 25, 26, 28, -33, 34, -27, -24, -21, -17, -12, -9, -3}), frozenset({3, 5, 8, 9, 11, 12, 15, 16, -47, 18, 19, -45, 21, 22, 23, 24, 25, 27, -34, 33, -28, -26, -20, -17, -13, -10, -6}), frozenset({3, 5, 8, 10, 11, 12, 15, 16, -47, 18, 19, 20, -45, 22, 23, 25, 26, 27, -34, 33, -28, -24, -21, -17, -13, -9, -6}), frozenset({3, 5, 8, 10, 11, 12, 15, 16, 17, -47, 19, 20, 21, -45, 23, 24, 25, 27, -34, 33, -28, -26, -22, -18, -13, -9, -6}), frozenset({3, 5, 8, 10, 11, 13, 15, 16, -47, 18, -45, 20, 21, 22, 23, 24, 26, 28, -33, 34, -27, -25, -19, -17, -12, -9, -6}), frozenset({3, 5, 8, 10, 11, 12, 15, 16, 17, -47, 19, -45, 21, 22, 24, 25, 26, 27, -34, 33, -28, -23, -20, -18, -13, -9, -6}), frozenset({3, 5, 8, 9, 11, 12, 15, 16, -47, 18, 19, 20, 21, -45, 23, 24, 25, 27, -34, 33, -28, -26, -22, -17, -13, -10, -6}), frozenset({3, 5, 8, 9, 11, 12, 16, 17, 18, 19, 20, 21, -45, -47, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -13, -10, -6}), frozenset({3, 5, 8, 9, 11, 13, 16, 17, 18, 19, -45, 21, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -20, -15, -12, -10, -6}), frozenset({5, 6, 8, 10, 11, 13, 15, 17, 18, -45, 20, 21, 22, 23, -47, 25, 26, 28, -33, 34, -27, -24, -19, -16, -12, -9, -3}), frozenset({3, 5, 9, 10, 11, 13, 15, 16, -47, 18, -45, 20, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -19, -17, -12, -8, -6}), frozenset({3, 5, 8, 10, 11, 12, 15, 16, -47, 18, 19, 20, 21, -45, 23, 25, 26, 27, -34, 33, -28, -24, -22, -17, -13, -9, -6}), frozenset({3, 5, 8, 10, 11, 13, 15, 16, -47, 18, 19, -45, 21, 22, 23, 25, 26, 28, -34, 33, -27, -24, -20, -17, -12, -9, -6}), frozenset({3, 5, 9, 10, 11, 13, 15, 16, -47, 18, 19, 20, 21, -45, 24, 25, 26, 28, -33, 34, -27, -23, -22, -17, -12, -8, -6}), frozenset({5, 6, 8, 10, 11, 13, 15, 17, 18, 19, 20, 21, -45, 23, 24, -47, 26, 27, -34, 33, -28, -25, -22, -16, -12, -9, -3}), frozenset({3, 5, 8, 10, 11, 12, 15, 16, -47, 18, 19, -45, 21, 22, 23, 24, 26, 28, -33, 34, -27, -25, -20, -17, -13, -9, -6}), frozenset({3, 5, 8, 9, 11, 12, 15, 16, 17, -47, 19, 20, 21, -45, 23, 25, 26, 27, -34, 33, -28, -24, -22, -18, -13, -10, -6}), frozenset({5, 6, 9, 10, 11, 13, 15, 17, 18, 19, 20, -45, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -21, -16, -12, -8, -3}), frozenset({3, 5, 8, 10, 11, 12, 15, 17, 18, 19, 20, 21, -45, -47, 24, 25, 26, 28, -33, 34, -27, -23, -22, -16, -13, -9, -6}), frozenset({3, 5, 8, 10, 11, 13, 15, 16, -47, 18, 19, 20, -45, 22, 23, 24, 26, 27, -34, 33, -28, -25, -21, -17, -12, -9, -6}), frozenset({3, 5, 6, 9, 10, 11, 13, 16, 17, 18, 19, 20, 21, -45, -47, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -12, -8}), frozenset({3, 5, 8, 10, 11, 12, 15, 17, 18, -45, 20, 21, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -19, -16, -13, -9, -6}), frozenset({5, 6, 8, 10, 11, 12, 15, 17, 18, 19, 20, -45, 22, 23, 24, -47, 26, 28, -33, 34, -27, -25, -21, -16, -13, -9, -3}), frozenset({3, 5, 8, 9, 11, 12, 15, 16, -47, 18, -45, 20, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -19, -17, -13, -10, -6}), frozenset({3, 5, 8, 10, 11, 13, 15, 17, 18, 19, 20, 21, -45, 23, 24, 25, -47, 28, -33, 34, -27, -26, -22, -16, -12, -9, -6}), frozenset({3, 5, 6, 8, 10, 11, 13, 16, 17, 18, -45, 20, 21, 22, 23, 24, -47, 26, 28, -33, 34, -27, -25, -19, -15, -12, -9}), frozenset({3, 6, 8, 10, 11, 13, 15, 16, -47, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -17, -12, -9, -5}), frozenset({3, 5, 8, 10, 11, 13, 15, 16, -47, 18, 19, -45, 21, 22, 23, 25, 26, 28, -33, 34, -27, -24, -20, -17, -12, -9, -6}), frozenset({5, 6, 8, 10, 11, 12, 16, 17, 18, 19, 20, 21, -45, -47, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -13, -9, -3}), frozenset({3, 5, 8, 10, 11, 13, 15, 17, 18, 19, 20, 21, -45, -47, 24, 25, 26, 27, -34, 33, -28, -23, -22, -16, -12, -9, -6}), frozenset({5, 6, 8, 10, 11, 12, 15, 16, -47, 18, -45, 20, 21, 22, 23, 24, 26, 28, -33, 34, -27, -25, -19, -17, -13, -9, -3}), frozenset({5, 6, 8, 9, 11, 12, 15, 16, -47, 18, 19, 20, -45, 22, 24, 25, 26, 27, -34, 33, -28, -23, -21, -17, -13, -10, -3}), frozenset({3, 5, 8, 10, 11, 13, 15, 17, 18, 19, 20, -45, 22, 23, 24, -47, 26, 27, -34, 33, -28, -25, -21, -16, -12, -9, -6}), frozenset({5, 6, 8, 9, 11, 12, 16, 17, 18, 19, 20, 21, -45, -47, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -13, -10, -3}), frozenset({3, 5, 8, 10, 11, 12, 15, 16, -47, 18, -45, 20, 21, 22, 23, 24, 26, 28, -33, 34, -27, -25, -19, -17, -13, -9, -6}), frozenset({3, 5, 8, 10, 11, 12, 15, 16, -47, 18, 19, 20, 21, -45, 23, 24, 26, 27, -34, 33, -28, -25, -22, -17, -13, -9, -6}), frozenset({3, 5, 8, 10, 11, 13, 15, 17, 18, 19, 20, -45, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -21, -16, -12, -9, -6}), frozenset({3, 5, 9, 10, 11, 13, 15, 17, 18, -45, 20, 21, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -19, -16, -12, -8, -6}), frozenset({3, 5, 8, 10, 11, 12, 15, 16, 17, -47, 19, 20, -45, 22, 23, 25, 26, 27, -34, 33, -28, -24, -21, -18, -13, -9, -6}), frozenset({3, 5, 8, 10, 11, 12, 15, 16, -47, 18, -45, 20, 21, 22, 23, 25, 26, 28, -33, 34, -27, -24, -19, -17, -13, -9, -6}), frozenset({3, 5, 8, 10, 12, 13, 15, 17, 18, -45, 20, 21, 22, -47, 24, 25, 26, 27, -34, 33, -28, -23, -19, -16, -11, -9, -6}), frozenset({3, 5, 8, 10, 11, 12, 16, 17, 18, -45, 20, 21, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -19, -15, -13, -9, -6}), frozenset({3, 5, 9, 10, 11, 12, 15, 16, -47, 18, -45, 20, 21, 22, 23, 25, 26, 28, -33, 34, -27, -24, -19, -17, -13, -8, -6}), frozenset({3, 5, 8, 10, 11, 12, 15, 16, -47, 18, 19, 20, -45, 22, 24, 25, 26, 27, -34, 33, -28, -23, -21, -17, -13, -9, -6}), frozenset({3, 5, 8, 10, 11, 12, 15, 16, 17, -47, 19, 20, 21, -45, 23, 25, 26, 27, -34, 33, -28, -24, -22, -18, -13, -9, -6}), frozenset({3, 5, 9, 10, 11, 12, 15, 17, 18, 19, -45, 21, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -20, -16, -13, -8, -6}), frozenset({3, 5, 9, 10, 11, 13, 15, 17, 18, 19, -45, 21, 22, 23, -47, 25, 26, 28, -34, 33, -27, -24, -20, -16, -12, -8, -6}), frozenset({3, 5, 9, 10, 11, 13, 15, 17, 18, 19, 20, -45, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -21, -16, -12, -8, -6}), frozenset({5, 6, 8, 10, 11, 13, 16, 17, 18, 19, 20, -45, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -21, -15, -12, -9, -3}), frozenset({3, 5, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, -45, -47, 24, 25, 26, 28, -33, 34, -27, -23, -22, -15, -13, -8, -6}), frozenset({3, 5, 8, 10, 11, 13, 15, 16, -47, 18, 19, -45, 21, 22, 24, 25, 26, 27, -34, 33, -28, -23, -20, -17, -12, -9, -6}), frozenset({3, 5, 8, 9, 11, 12, 15, 17, 18, -45, 20, 21, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -19, -16, -13, -10, -6}), frozenset({5, 6, 8, 9, 11, 12, 16, 17, 18, 19, 20, -45, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -21, -15, -13, -10, -3}), frozenset({3, 5, 8, 10, 11, 12, 15, 16, 17, -47, 19, 20, 21, -45, 24, 25, 26, 27, -34, 33, -28, -23, -22, -18, -13, -9, -6}), frozenset({3, 6, 9, 10, 11, 13, 15, 17, 18, -45, 20, 21, 22, -47, 24, 25, 26, 28, -33, 34, -27, -23, -19, -16, -12, -8, -5}), frozenset({3, 5, 8, 10, 11, 13, 15, 16, -47, 18, 19, 20, -45, 22, 24, 25, 26, 28, -33, 34, -27, -23, -21, -17, -12, -9, -6}), frozenset({3, 5, 9, 10, 11, 13, 16, 17, 18, 19, -45, 21, 22, 23, -47, 25, 26, 28, -33, 34, -27, -24, -20, -15, -12, -8, -6}), frozenset({5, 6, 9, 10, 11, 12, 15, 16, -47, 18, 19, 20, 21, -45, 24, 25, 26, 28, -33, 34, -27, -23, -22, -17, -13, -8, -3}), frozenset({3, 5, 8, 10, 11, 12, 15, 17, 18, -45, 20, 21, 22, 23, -47, 25, 26, 28, -33, 34, -27, -24, -19, -16, -13, -9, -6}), frozenset({3, 5, 8, 10, 11, 12, 15, 16, -47, 18, 19, -45, 21, 22, 24, 25, 26, 28, -33, 34, -27, -23, -20, -17, -13, -9, -6}), frozenset({3, 8, 9, 12, 16, 17, 19, 20, 22, 24, 25, 28, 30, 31, 32, 34, 36, 37, 40, 41, 43, -47, -46, -44, -39, -35, -33, -29, -27, -23, -21, -15, -13, -10, -6}), frozenset({3, 9, 10, 13, 15, 17, 19, 20, 21, 24, 25, 28, 29, 31, 32, 34, 36, 37, 40, 41, 44, -47, -46, -43, -39, -35, -33, -30, -27, -23, -22, -16, -12, -8, -6}), frozenset({3, 9, 10, 12, 15, 17, 19, 21, 22, 24, 25, 28, 30, 31, 32, 34, 36, 37, 39, 41, 44, -47, -46, -43, -40, -35, -33, -29, -27, -23, -20, -16, -13, -8, -6}), frozenset({6, 8, 10, 12, 16, 17, 19, 21, 22, 24, 25, 28, 29, 30, 32, 34, 35, 36, 40, 41, 44, -47, -46, -43, -39, -37, -33, -31, -27, -23, -20, -15, -13, -9, -3}), frozenset({6, 8, 10, 13, 15, 17, 19, 20, 21, 24, 25, 28, 29, 31, 32, 34, 36, 37, 40, 41, 44, -47, -46, -43, -39, -35, -33, -30, -27, -23, -22, -16, -12, -9, -3}), frozenset({3, 8, 9, 12, 16, 17, 19, 21, 22, 24, 25, 28, 30, 31, 32, 34, 36, 37, 39, 41, 44, -47, -46, -43, -40, -35, -33, -29, -27, -23, -20, -15, -13, -10, -6}), frozenset({3, 8, 9, 12, 16, 17, 19, 20, 22, 24, 25, 28, 30, 31, 32, 34, 36, 37, 39, 40, 44, -47, -46, -43, -41, -35, -33, -29, -27, -23, -21, -15, -13, -10, -6}), frozenset({3, 8, 10, 13, 15, 16, 19, 20, 22, 24, 25, 27, 30, 31, 32, 34, 36, 37, 39, 41, 44, -47, -46, -43, -40, -35, -33, -29, -28, -23, -21, -17, -12, -9, -6}), frozenset({3, 6, 8, 10, 13, 15, 16, 19, 20, 21, 23, 24, 27, 30, 31, 32, 33, 36, 37, 40, 41, 43, -47, -46, -44, -39, -35, -34, -29, -28, -25, -22, -17, -12, -9}), frozenset({3, 8, 9, 13, 15, 16, 19, 20, 21, 24, 25, 27, 30, 31, 32, 34, 36, 37, 39, 41, 44, -47, -46, -43, -40, -35, -33, -29, -28, -23, -22, -17, -12, -10, -6}), frozenset({6, 9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 28, 29, 31, 32, 34, 36, 37, 40, 41, 44, -47, -46, -43, -39, -35, -33, -30, -27, -23, -21, -15, -12, -8, -3}), frozenset({3, 6, 9, 10, 13, 16, 17, 19, 20, 22, 24, 25, 28, 30, 31, 32, 34, 35, 37, 40, 41, 44, -47, -46, -43, -39, -36, -33, -29, -27, -23, -21, -15, -12, -8}), frozenset({6, 8, 10, 12, 15, 17, 19, 21, 22, 24, 25, 28, 30, 31, 32, 34, 35, 37, 40, 41, 44, -47, -46, -43, -39, -36, -33, -29, -27, -23, -20, -16, -13, -9, -3}), frozenset({3, 8, 10, 12, 16, 17, 19, 20, 22, 24, 25, 28, 29, 31, 32, 34, 36, 37, 40, 41, 44, -47, -46, -43, -39, -35, -33, -30, -27, -23, -21, -15, -13, -9, -6}), frozenset({6, 8, 10, 12, 15, 16, 19, 20, 21, 24, 25, 28, 29, 31, 32, 34, 36, 37, 40, 41, 44, -47, -46, -43, -39, -35, -33, -30, -27, -23, -22, -17, -13, -9, -3}), frozenset({3, 9, 10, 13, 15, 16, 19, 20, 22, 24, 25, 28, 30, 31, 32, 34, 35, 37, 40, 41, 44, -47, -46, -43, -39, -36, -33, -29, -27, -23, -21, -17, -12, -8, -6}), frozenset({3, 8, 9, 12, 15, 17, 19, 20, 21, 24, 25, 28, 30, 31, 32, 34, 36, 37, 40, 41, 43, -47, -46, -44, -39, -35, -33, -29, -27, -23, -22, -16, -13, -10, -6}), frozenset({3, 9, 10, 13, 16, 17, 19, 21, 22, 24, 25, 28, 29, 30, 32, 34, 36, 37, 40, 41, 44, -47, -46, -43, -39, -35, -33, -31, -27, -23, -20, -15, -12, -8, -6})]
Initial DL				: 65811.93411125071
Final DL				: 31340.51580257067
Compression (wrt me)	: 0.523786738289873
Operator Counters		: {'D': 0, 'W': 3, 'V': 0, 'S': 0, 'R': 0, 'T': 0}
Misle Learning Runtime	: 54.92830729484558


[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([33, 32, 11])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {33: True, 32: False, 11: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 12, 6])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {10: False, 12: False, 6: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 13, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {20: False, 13: True, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 23, 28])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {21: False, 23: True, 28: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 7, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {5: False, 7: False, 14: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 40, 32])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {20: False, 40: False, 32: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 44, 5])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {30: False, 44: False, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 14, 26])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {8: False, 14: False, 26: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 17, 10])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {16: False, 17: True, 10: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 35, 21])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {23: True, 35: False, 21: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 31, 35])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {21: False, 31: False, 35: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 40, 3])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {16: False, 40: False, 3: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 30, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {9: True, 30: False, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([22, 26, 43])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {22: False, 26: False, 43: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 9, 22])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 9: True, 22: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([44, 42, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {44: False, 42: False, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 38, 5])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {11: False, 38: False, 5: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([38, 33, 15])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {38: False, 33: True, 15: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 18, 4])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 18: False, 4: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 20, 28])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 20: False, 28: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505, 0.6794338407197505]
Min Score = 0.6794338407197505 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 28, 35])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {24: False, 28: False, 35: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 41, 28])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {24: False, 41: False, 28: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 36, 32])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {6: True, 36: False, 32: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 37, 29])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {8: False, 37: False, 29: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 13, 12])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 13: True, 12: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 42, 10])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: False, 42: False, 10: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 27, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: False, 27: True, 8: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([32, 43, 36])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {32: False, 43: True, 36: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 37, 28])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {3: False, 37: False, 28: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 43, 39])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {19: False, 43: True, 39: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 23, 3])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: False, 23: True, 3: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([44, 40, 20])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {44: False, 40: False, 20: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([43, 37, 30])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {43: True, 37: False, 30: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 23, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {8: False, 23: True, 14: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 8, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {16: False, 8: False, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 18, 15])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {21: False, 18: False, 15: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 26, 29])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {5: False, 26: False, 29: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 25, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {8: False, 25: False, 14: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([18, 33, 27])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {18: False, 33: True, 27: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 28, 12])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {16: False, 28: False, 12: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 38, 33])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {11: False, 38: False, 33: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 40, 31])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {21: False, 40: False, 31: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 25, 35])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {14: False, 25: False, 35: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 30, 25])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {11: False, 30: False, 25: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 18, 44])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 18: False, 44: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 32, 21])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {19: False, 32: False, 21: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 14, 13])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {28: False, 14: False, 13: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([22, 23, 19])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {22: False, 23: True, 19: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 44, 43])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 44: False, 43: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 30, 44])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {26: False, 30: False, 44: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([37, 42, 36])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {37: False, 42: False, 36: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 39, 10])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {2: False, 39: True, 10: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 32, 27])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 32: False, 27: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 38, 16])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {11: False, 38: False, 16: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 31, 32])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {21: False, 31: False, 32: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 22, 34])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {8: False, 22: False, 34: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 26, 39])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {10: False, 26: False, 39: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 36, 25])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {3: False, 36: False, 25: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([36, 32, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {36: False, 32: False, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([40, 35, 5])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {40: False, 35: True, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 21, 43])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {6: True, 21: False, 43: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 20, 24])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 20: False, 24: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 31, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {15: False, 31: False, 14: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([37, 25, 22])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {37: False, 25: False, 22: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 38, 10])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {17: False, 38: False, 10: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([36, 40, 32])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {36: False, 40: False, 32: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 39, 24])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: False, 39: True, 24: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 41, 13])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {10: False, 41: False, 13: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 30, 4])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {13: True, 30: False, 4: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 42, 20])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {21: False, 42: False, 20: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 11, 25])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {9: True, 11: False, 25: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486, 1.7611018551552486]
Min Score = 1.7611018551552486 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 40, 19])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {3: False, 40: False, 19: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

Dataset				: dermatology.dat
Metric				: length
Minsups				: [3]
MF Accuracy			: [(0.625, 0.4861111111111111, 72, 72)]
Mistle Accuracy		: [0.625]
CNFAlgo Accuracy	: []
Randomized Accuracy	: [0.125]

# Test Examples		: 72
Mistle # Ties		: [(0, 0)]
CNFAlgo # Ties		: []
