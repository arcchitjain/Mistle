>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 66
 Number of frequent closed itemsets: 23102
 Total time ~: 329 ms
Timeout of 20 seconds reached while mining patterns with minsup = 0.5
Current Minsup[0.75] yields 81180 itemsets.
Current Minsup[0.875] yields 1814 itemsets.
Current Minsup[0.7960696870844519] yields 23102 itemsets.
Top-k minsup for at least 10000 paterns = 0.7960696870844519 or 53
26  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, -34, -28, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, -37, -28, -24, -20, -15, -10, -7, -2}), frozenset({3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -11, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -18, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, -37, -28, -24, -20, -15, -10, -6, -2}), frozenset({2, 3, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -4}), frozenset({2, 3, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -9, -4}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -17, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, -33, -31, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -27, -20, -18, -10, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, -33, -29, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 34, 35, 36, 37, -33, -30, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -7, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, -33, -32, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -22, -15, -10, -9, -2}), frozenset({3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -8, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -16, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -19, -10, -6, -2}), frozenset({2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -5}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, -37, -28, -24, -20, -15, -10, -9, -2}), frozenset({2, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -3}), frozenset({2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -9, -3}), frozenset({2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, -34, -28, -24, -20, -15, -10, -6, -5}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, -34, -28, -24, -20, -15, -10, -9, -2})}
DL of initial theory	: 23272.70980539344
9981	itemsets left after W operation 	: [frozenset({35, 36, 38, 8, -20, 14, 21, 22, 23, 29}), frozenset({3, 4, 5, 7, 9, 11, 12, 13, 15, 16, 18, 19, 25, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -24, -17, -10, -6, -2}), frozenset({3, 4, 5, 6, 9, 11, 12, 13, 15, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -24, -16, -10, -7, -2}), frozenset({3, 4, 5, 7, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, 33, -34, -28, 37, -24, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 7, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, 33, -34, -28, 37, -24, -15, -10, -9, -2}), frozenset({2, 3, 5, 7, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -37, -38, 30, 31, 32, 33, 34, -28, -24, -15, -10, -6, -4}), frozenset({2, 3, 4, 7, 9, 11, 12, 13, 15, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, 33, -34, -28, 37, -24, -16, -10, -6, -5}), frozenset({3, 4, 5, 7, 9, 11, 12, 13, 15, 17, 18, 19, 24, 25, -38, 27, 30, 31, 32, -33, 34, -28, 37, -26, -16, -10, -6, -2}), frozenset({3, 4, 5, 7, 9, 11, 12, 13, 16, 17, 18, 19, 24, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -25, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 7, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -24, -15, -10, -9, -2}), frozenset({3, 4, 5, 6, 7, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -37, -38, 30, 31, 32, 33, 34, -28, -24, -15, -10, -9, -2}), frozenset({3, 4, 5, 6, 7, 11, 12, 13, 15, 16, 17, 19, 24, 25, 26, -38, 30, 31, 32, -33, 34, -28, 37, -27, -18, -10, -9, -2}), frozenset({2, 3, 4, 7, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -24, -15, -10, -6, -5}), frozenset({3, 4, 5, 6, 7, 11, 12, 13, 16, 17, 18, 19, 24, 25, -38, 27, 28, -37, 30, 32, 33, 34, -31, -26, -15, -10, -9, -2}), frozenset({3, 4, 5, 7, 9, 10, 12, 13, 15, 16, 17, 19, 25, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -24, -18, -11, -6, -2}), frozenset({2, 3, 5, 6, 7, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -24, -15, -10, -9, -4}), frozenset({3, 4, 5, 7, 9, 11, 12, 13, 15, 16, 17, 18, 24, 25, 26, -38, 28, 31, 32, -33, 34, -30, 37, -27, -19, -10, -6, -2}), frozenset({2, 3, 5, 7, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -24, -15, -10, -6, -4}), frozenset({3, 4, 5, 6, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, 28, -38, 30, 31, -33, -32, 34, 37, -24, -15, -10, -7, -2}), frozenset({3, 4, 5, 6, 7, 10, 12, 13, 16, 17, 18, 19, 25, 26, 27, -37, -38, 30, 31, 32, 33, 34, -28, -24, -15, -11, -9, -2}), frozenset({3, 4, 5, 7, 9, 11, 12, 13, 15, 16, 18, 19, 24, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -25, -17, -10, -6, -2}), frozenset({2, 3, 4, 6, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -37, -38, 30, 31, 32, 33, 34, -28, -24, -15, -10, -7, -5}), frozenset({3, 4, 5, 7, 9, 11, 12, 13, 15, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -24, -16, -10, -6, -2}), frozenset({3, 4, 5, 7, 9, 11, 12, 13, 15, 16, 17, 18, 25, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -24, -19, -10, -6, -2}), frozenset({2, 4, 5, 7, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, 33, -34, -28, 37, -24, -15, -10, -6, -3}), frozenset({3, 4, 5, 6, 7, 11, 12, 13, 15, 16, 18, 19, 24, 25, -38, 27, 30, 31, 32, -33, 34, -28, 37, -26, -17, -10, -9, -2}), frozenset({3, 4, 5, 7, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, 28, -38, 30, 31, -33, -32, 34, 37, -24, -15, -10, -6, -2}), frozenset({3, 4, 5, 7, 9, 10, 12, 13, 16, 17, 18, 19, 24, 25, 26, -38, 30, 31, 32, -33, 34, -28, 37, -27, -15, -11, -6, -2}), frozenset({2, 4, 5, 7, 9, 11, 12, 13, 15, 16, 17, 19, 25, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -24, -18, -10, -6, -3}), frozenset({3, 4, 5, 6, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -37, -38, 30, 31, 32, 33, 34, -28, -24, -15, -10, -7, -2}), frozenset({2, 3, 5, 7, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, 28, -37, 30, 31, -32, 33, 34, -38, -24, -15, -10, -6, -4}), frozenset({2, 4, 5, 7, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -37, -38, 30, 31, 32, 33, 34, -28, -24, -15, -10, -6, -3}), frozenset({3, 4, 5, 7, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -24, -15, -10, -6, -2}), frozenset({3, 4, 5, 7, 9, 11, 12, 13, 15, 16, 17, 19, 25, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -24, -18, -10, -6, -2}), frozenset({2, 3, 4, 7, 9, 11, 12, 13, 15, 17, 18, 19, 24, 25, -38, 27, 30, 31, 32, -33, 34, -28, 37, -26, -16, -10, -6, -5}), frozenset({3, 4, 5, 6, 7, 10, 11, 12, 16, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -24, -15, -13, -9, -2}), frozenset({3, 4, 5, 6, 7, 11, 12, 13, 15, 16, 17, 19, 25, 26, 27, -38, 30, 31, 32, 33, -34, -28, 37, -24, -18, -10, -9, -2}), frozenset({3, 4, 5, 7, 9, 10, 12, 13, 16, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -24, -15, -11, -6, -2}), frozenset({2, 3, 5, 7, 9, 10, 11, 13, 16, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, 33, -34, -28, 37, -24, -15, -12, -6, -4}), frozenset({2, 3, 4, 7, 9, 11, 12, 13, 15, 16, 17, 18, 25, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -24, -19, -10, -6, -5}), frozenset({2, 4, 5, 6, 7, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -24, -15, -10, -9, -3}), frozenset({3, 4, 5, 6, 9, 11, 12, 13, 16, 17, 18, 19, 24, 26, 27, -38, 30, 31, 32, 33, -34, -28, 37, -25, -15, -10, -7, -2}), frozenset({3, 4, 5, 6, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -24, -15, -10, -7, -2}), frozenset({2, 3, 4, 6, 7, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, 28, -38, 30, -33, 32, -31, 34, 37, -24, -15, -10, -9, -5}), frozenset({3, 4, 5, 7, 9, 11, 12, 13, 15, 16, 18, 19, 24, 25, -38, 27, 28, 30, -33, 32, -31, 34, 37, -26, -17, -10, -6, -2}), frozenset({3, 4, 5, 6, 7, 10, 12, 13, 16, 17, 18, 19, 25, 26, 27, 28, -38, 30, 31, -33, -32, 34, 37, -24, -15, -11, -9, -2}), frozenset({2, 3, 4, 7, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, 33, -34, -28, 37, -24, -15, -10, -6, -5}), frozenset({3, 4, 5, 6, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, 28, -38, 30, -33, 32, -31, 34, 37, -24, -15, -10, -7, -2}), frozenset({3, 4, 5, 7, 9, 10, 11, 12, 16, 17, 18, 19, 25, 26, 27, -37, -38, 30, 31, 32, 33, 34, -28, -24, -15, -13, -6, -2}), frozenset({2, 3, 5, 7, 9, 11, 12, 13, 15, 16, 17, 18, 25, 26, 27, -37, -38, 30, 31, 32, 33, 34, -28, -24, -19, -10, -6, -4}), frozenset({3, 4, 5, 7, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, 28, -38, 31, 32, -33, 34, -30, 37, -24, -15, -10, -6, -2}), frozenset({3, 4, 5, 7, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -37, -38, 30, 31, 32, 33, 34, -28, -24, -15, -10, -6, -2}), frozenset({2, 3, 4, 7, 9, 10, 11, 13, 16, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, 33, -34, -28, 37, -24, -15, -12, -6, -5}), frozenset({2, 4, 5, 7, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -38, 30, 31, 32, -33, 34, -28, 37, -24, -15, -10, -6, -3}), frozenset({3, 4, 5, 7, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, 28, -38, 30, -33, 32, -31, 34, 37, -24, -15, -10, -6, -2})]
# of frequent itemsets	: 726
Time of DCI Closed		: 0.36934709548950195
725	itemsets left after W operation 	: [frozenset({-10, 39, 11, 27, 12, 13, 30}), frozenset({3, 4, 5, 7, 8, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, -39, 29, -35, 31, 32, 33, 34, 36, 37, -28, -24, -20, -15, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 22, 25, 26, -39, 28, 29, 31, -33, -32, 34, 35, 36, 37, -24, -23, -15, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, -39, 28, 31, 32, -33, 34, 35, 36, 37, -29, -24, -20, -15, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, -39, 29, 31, 32, -33, 34, 35, 36, 37, -28, -24, -23, -17, -6, -2}), frozenset({2, 4, 5, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 25, 26, -39, 29, 31, 32, -33, 34, 35, 36, 37, -28, -24, -22, -15, -6, -3}), frozenset({3, 4, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 22, 23, 25, 26, -39, 29, 31, 32, -33, 34, 35, 36, 37, -28, -24, -21, -15, -9, -2}), frozenset({3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 19, 20, 21, 22, 25, 26, -39, 29, 31, 32, -33, 34, 35, 36, 37, -28, -24, -23, -18, -9, -2}), frozenset({3, 4, 5, 6, 7, 9, 14, 15, 16, 17, 19, 20, 22, 23, 25, 26, -39, 29, 31, 32, -33, 34, 35, 36, 37, -28, -24, -21, -18, -8, -2}), frozenset({2, 3, 5, 6, 7, 8, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, -39, -36, 29, 31, 32, 33, 34, 35, -28, 37, -24, -20, -15, -9, -4}), frozenset({3, 4, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 23, 25, 26, -39, 29, 31, 32, -33, 34, 35, 36, 37, -28, -24, -22, -15, -9, -2}), frozenset({3, 4, 5, 6, 7, 9, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, -39, 29, 31, 32, -33, 34, 35, 36, 37, -28, -24, -20, -15, -8, -2}), frozenset({3, 4, 5, 7, 9, 15, 16, 18, 19, 25, 26, -38, -39, 31, 32, -33, 34, -28, 37, -24, -17, -6, -2}), frozenset({3, 4, 5, 6, 9, 15, 17, 18, 19, 25, 26, -38, -39, 31, 32, -33, 34, -28, 37, -24, -16, -7, -2}), frozenset({3, 4, 5, 7, 9, 16, 17, 18, 19, 25, 26, -38, -39, -34, 31, 32, 33, -28, 37, -24, -15, -6, -2}), frozenset({3, 4, 5, 6, 7, 16, 17, 18, 19, 25, 26, -38, -39, -34, 31, 32, 33, -28, 37, -24, -15, -9, -2}), frozenset({2, 3, 5, 7, 9, 16, 17, 18, 19, 25, 26, -37, -38, -39, 31, 32, 33, 34, -28, -24, -15, -6, -4}), frozenset({2, 3, 4, 7, 9, 15, 17, 18, 19, 25, 26, -38, -39, -34, 31, 32, 33, -28, 37, -24, -16, -6, -5}), frozenset({3, 4, 5, 7, 9, 15, 17, 18, 19, 24, 25, -38, -39, 31, 32, -33, 34, -28, 37, -26, -16, -6, -2}), frozenset({3, 4, 5, 7, 9, 16, 17, 18, 19, 24, -39, 26, -38, 31, 32, -33, 34, -28, 37, -25, -15, -6, -2}), frozenset({3, 4, 5, 6, 7, 16, 17, 18, 19, 25, 26, -38, -39, 31, 32, -33, 34, -28, 37, -24, -15, -9, -2}), frozenset({3, 4, 5, 6, 7, 16, 17, 18, 19, 25, 26, -37, -38, -39, 31, 32, 33, 34, -28, -24, -15, -9, -2}), frozenset({2, 3, 4, 7, 9, 16, 17, 18, 19, 25, 26, -38, -39, 31, 32, -33, 34, -28, 37, -24, -15, -6, -5}), frozenset({3, 4, 5, 6, 7, 16, 17, 18, 19, 24, 25, -38, -37, 28, -39, 32, 33, 34, -31, -26, -15, -9, -2}), frozenset({2, 3, 5, 6, 7, 16, 17, 18, 19, 25, 26, -38, -39, 31, 32, -33, 34, -28, 37, -24, -15, -9, -4}), frozenset({2, 3, 5, 7, 9, 16, 17, 18, 19, 25, 26, -38, -39, 31, 32, -33, 34, -28, 37, -24, -15, -6, -4}), frozenset({3, 4, 5, 6, 9, 16, 17, 18, 19, 25, 26, -38, 28, -39, 31, -33, -32, 34, 37, -24, -15, -7, -2}), frozenset({3, 4, 5, 7, 9, 15, 16, 18, 19, 24, -39, 26, -38, 31, 32, -33, 34, -28, 37, -25, -17, -6, -2}), frozenset({2, 3, 4, 6, 9, 16, 17, 18, 19, 25, 26, -37, -38, -39, 31, 32, 33, 34, -28, -24, -15, -7, -5}), frozenset({3, 4, 5, 7, 9, 15, 17, 18, 19, 25, 26, -38, -39, 31, 32, -33, 34, -28, 37, -24, -16, -6, -2}), frozenset({3, 4, 5, 7, 9, 15, 16, 17, 18, 25, 26, -38, -39, 31, 32, -33, 34, -28, 37, -24, -19, -6, -2}), frozenset({2, 4, 5, 7, 9, 16, 17, 18, 19, 25, 26, -38, -39, -34, 31, 32, 33, -28, 37, -24, -15, -6, -3}), frozenset({3, 4, 5, 6, 7, 15, 16, 18, 19, 24, 25, -38, -39, 31, 32, -33, 34, -28, 37, -26, -17, -9, -2}), frozenset({3, 4, 5, 7, 9, 16, 17, 18, 19, 25, 26, -38, 28, -39, 31, -33, -32, 34, 37, -24, -15, -6, -2}), frozenset({2, 4, 5, 7, 9, 15, 16, 17, 19, 25, 26, -38, -39, 31, 32, -33, 34, -28, 37, -24, -18, -6, -3}), frozenset({3, 4, 5, 6, 9, 16, 17, 18, 19, 25, 26, -37, -38, -39, 31, 32, 33, 34, -28, -24, -15, -7, -2}), frozenset({2, 3, 5, 7, 9, 16, 17, 18, 19, 25, 26, -37, 28, -38, -39, 31, -32, 33, 34, -24, -15, -6, -4}), frozenset({2, 4, 5, 7, 9, 16, 17, 18, 19, 25, 26, -37, -38, -39, 31, 32, 33, 34, -28, -24, -15, -6, -3}), frozenset({3, 4, 5, 7, 9, 16, 17, 18, 19, 25, 26, -38, -39, 31, 32, -33, 34, -28, 37, -24, -15, -6, -2}), frozenset({3, 4, 5, 7, 9, 15, 16, 17, 19, 25, 26, -38, -39, 31, 32, -33, 34, -28, 37, -24, -18, -6, -2}), frozenset({2, 3, 4, 7, 9, 15, 17, 18, 19, 24, 25, -38, -39, 31, 32, -33, 34, -28, 37, -26, -16, -6, -5}), frozenset({3, 4, 5, 6, 7, 15, 16, 17, 19, 25, 26, -38, -39, -34, 31, 32, 33, -28, 37, -24, -18, -9, -2}), frozenset({2, 3, 4, 7, 9, 15, 16, 17, 18, 25, 26, -38, -39, 31, 32, -33, 34, -28, 37, -24, -19, -6, -5}), frozenset({2, 4, 5, 6, 7, 16, 17, 18, 19, 25, 26, -38, -39, 31, 32, -33, 34, -28, 37, -24, -15, -9, -3}), frozenset({3, 4, 5, 6, 9, 16, 17, 18, 19, 24, -39, 26, -38, -34, 31, 32, 33, -28, 37, -25, -15, -7, -2}), frozenset({3, 4, 5, 6, 9, 16, 17, 18, 19, 25, 26, -38, -39, 31, 32, -33, 34, -28, 37, -24, -15, -7, -2}), frozenset({2, 3, 4, 6, 7, 16, 17, 18, 19, 25, 26, -38, 28, -39, -33, 32, -31, 34, 37, -24, -15, -9, -5}), frozenset({3, 4, 5, 7, 9, 15, 16, 18, 19, 24, 25, -38, -39, 28, -33, 32, -31, 34, 37, -26, -17, -6, -2}), frozenset({2, 3, 4, 7, 9, 16, 17, 18, 19, 25, 26, -38, -39, -34, 31, 32, 33, -28, 37, -24, -15, -6, -5}), frozenset({3, 4, 5, 6, 9, 16, 17, 18, 19, 25, 26, -38, 28, -39, -33, 32, -31, 34, 37, -24, -15, -7, -2}), frozenset({2, 3, 5, 7, 9, 15, 16, 17, 18, 25, 26, -37, -38, -39, 31, 32, 33, 34, -28, -24, -19, -6, -4}), frozenset({3, 4, 5, 7, 9, 16, 17, 18, 19, 25, 26, -37, -38, -39, 31, 32, 33, 34, -28, -24, -15, -6, -2}), frozenset({2, 4, 5, 7, 9, 16, 17, 18, 19, 25, 26, -38, -39, 31, 32, -33, 34, -28, 37, -24, -15, -6, -3}), frozenset({3, 4, 5, 7, 9, 16, 17, 18, 19, 25, 26, -38, 28, -39, -33, 32, -31, 34, 37, -24, -15, -6, -2})]
380	itemsets left after W operation 	: [frozenset({16, 17, 40, 25, 26}), frozenset({3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 18, 19, 21, 22, 23, 27, 29, 30, 31, 32, 34, 35, 36, 37, -40, -33, -28, -24, -20, -15, -14, -6, -2}), frozenset({3, 4, 5, 6, 7, 11, 12, 13, 15, 19, 24, -40, -38, 30, 31, 32, -33, 34, -28, 37, -27, -18, -10, -9, -2}), frozenset({3, 4, 5, 7, 9, 10, 12, 13, 15, 19, -40, -38, 27, 30, 31, 32, -33, 34, -28, 37, -24, -18, -11, -6, -2}), frozenset({3, 4, 5, 7, 9, 11, 12, 13, 15, 18, 24, -40, -38, 28, 31, 32, -33, 34, -30, 37, -27, -19, -10, -6, -2}), frozenset({3, 4, 5, 6, 7, 10, 12, 13, 18, 19, -40, -38, 27, -37, 30, 31, 32, 33, 34, -28, -24, -15, -11, -9, -2}), frozenset({3, 4, 5, 7, 9, 10, 12, 13, 18, 19, 24, -40, -38, 30, 31, 32, -33, 34, -28, 37, -27, -15, -11, -6, -2}), frozenset({3, 4, 5, 6, 7, 10, 11, 12, 18, 19, -40, -38, 27, 30, 31, 32, -33, 34, -28, 37, -24, -15, -13, -9, -2}), frozenset({3, 4, 5, 7, 9, 10, 12, 13, 18, 19, -40, -38, 27, 30, 31, 32, -33, 34, -28, 37, -24, -15, -11, -6, -2}), frozenset({2, 3, 5, 7, 9, 10, 11, 13, 18, 19, -40, -38, 27, 30, 31, 32, 33, -34, -28, 37, -24, -15, -12, -6, -4}), frozenset({3, 4, 5, 6, 7, 10, 12, 13, 18, 19, -40, -38, 27, 28, 30, 31, -33, -32, 34, 37, -24, -15, -11, -9, -2}), frozenset({3, 4, 5, 7, 9, 10, 11, 12, 18, 19, -40, -38, 27, -37, 30, 31, 32, 33, 34, -28, -24, -15, -13, -6, -2}), frozenset({3, 4, 5, 7, 9, 11, 12, 13, 18, 19, -40, -38, 27, 28, 31, 32, -33, 34, -30, 37, -24, -15, -10, -6, -2}), frozenset({2, 3, 4, 7, 9, 10, 11, 13, 18, 19, -40, -38, 27, 30, 31, 32, 33, -34, -28, 37, -24, -15, -12, -6, -5}), frozenset({3, 4, 5, 7, 8, 9, 14, 18, 19, 21, 22, 23, -40, -39, 29, -35, 31, 32, 33, 34, 36, 37, -28, -24, -20, -15, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 14, 18, 19, 20, 21, 22, -40, -39, 28, 29, 31, -33, -32, 34, 35, 36, 37, -24, -23, -15, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 14, 18, 19, 21, 22, 23, -40, -39, 28, 31, 32, -33, 34, 35, 36, 37, -29, -24, -20, -15, -6, -2}), frozenset({2, 4, 5, 7, 8, 9, 14, 18, 19, 20, 21, 23, -40, -39, 29, 31, 32, -33, 34, 35, 36, 37, -28, -24, -22, -15, -6, -3}), frozenset({3, 4, 5, 6, 7, 8, 14, 18, 19, 20, 22, 23, -40, -39, 29, 31, 32, -33, 34, 35, 36, 37, -28, -24, -21, -15, -9, -2}), frozenset({3, 4, 5, 6, 7, 8, 14, 15, 19, 20, 21, 22, -40, -39, 29, 31, 32, -33, 34, 35, 36, 37, -28, -24, -23, -18, -9, -2}), frozenset({3, 4, 5, 6, 7, 9, 14, 15, 19, 20, 22, 23, -40, -39, 29, 31, 32, -33, 34, 35, 36, 37, -28, -24, -21, -18, -8, -2}), frozenset({2, 3, 5, 6, 7, 8, 14, 18, 19, 21, 22, 23, -40, -39, -36, 29, 31, 32, 33, 34, 35, -28, 37, -24, -20, -15, -9, -4}), frozenset({3, 4, 5, 6, 7, 8, 14, 18, 19, 20, 21, 23, -40, -39, 29, 31, 32, -33, 34, 35, 36, 37, -28, -24, -22, -15, -9, -2}), frozenset({3, 4, 5, 6, 7, 9, 14, 18, 19, 21, 22, 23, -40, -39, 29, 31, 32, -33, 34, 35, 36, 37, -28, -24, -20, -15, -8, -2}), frozenset({3, 4, 5, 7, 9, 18, 19, -40, -39, -38, -34, 31, 32, 33, -28, 37, -24, -15, -6, -2}), frozenset({3, 4, 5, 6, 7, 18, 19, -40, -39, -38, -34, 31, 32, 33, -28, 37, -24, -15, -9, -2}), frozenset({2, 3, 5, 7, 9, 18, 19, -40, -39, -38, -37, 31, 32, 33, 34, -28, -24, -15, -6, -4}), frozenset({3, 4, 5, 6, 7, 18, 19, -40, -39, -38, 31, 32, -33, 34, -28, 37, -24, -15, -9, -2}), frozenset({3, 4, 5, 6, 7, 18, 19, -40, -39, -38, -37, 31, 32, 33, 34, -28, -24, -15, -9, -2}), frozenset({2, 3, 4, 7, 9, 18, 19, -40, -39, -38, 31, 32, -33, 34, -28, 37, -24, -15, -6, -5}), frozenset({2, 3, 5, 6, 7, 18, 19, -40, -39, -38, 31, 32, -33, 34, -28, 37, -24, -15, -9, -4}), frozenset({2, 3, 5, 7, 9, 18, 19, -40, -39, -38, 31, 32, -33, 34, -28, 37, -24, -15, -6, -4}), frozenset({3, 4, 5, 6, 9, 18, 19, -40, -39, -38, 28, 31, -33, -32, 34, 37, -24, -15, -7, -2}), frozenset({2, 3, 4, 6, 9, 18, 19, -40, -39, -38, -37, 31, 32, 33, 34, -28, -24, -15, -7, -5}), frozenset({3, 4, 5, 7, 9, 15, 18, -40, -39, -38, 31, 32, -33, 34, -28, 37, -24, -19, -6, -2}), frozenset({2, 4, 5, 7, 9, 18, 19, -40, -39, -38, -34, 31, 32, 33, -28, 37, -24, -15, -6, -3}), frozenset({3, 4, 5, 7, 9, 18, 19, -40, -39, -38, 28, 31, -33, -32, 34, 37, -24, -15, -6, -2}), frozenset({2, 4, 5, 7, 9, 15, 19, -40, -39, -38, 31, 32, -33, 34, -28, 37, -24, -18, -6, -3}), frozenset({3, 4, 5, 6, 9, 18, 19, -40, -39, -38, -37, 31, 32, 33, 34, -28, -24, -15, -7, -2}), frozenset({2, 3, 5, 7, 9, 18, 19, -40, -39, -38, -37, 28, 31, -32, 33, 34, -24, -15, -6, -4}), frozenset({2, 4, 5, 7, 9, 18, 19, -40, -39, -38, -37, 31, 32, 33, 34, -28, -24, -15, -6, -3}), frozenset({3, 4, 5, 7, 9, 18, 19, -40, -39, -38, 31, 32, -33, 34, -28, 37, -24, -15, -6, -2}), frozenset({3, 4, 5, 7, 9, 15, 19, -40, -39, -38, 31, 32, -33, 34, -28, 37, -24, -18, -6, -2}), frozenset({3, 4, 5, 6, 7, 15, 19, -40, -39, -38, -34, 31, 32, 33, -28, 37, -24, -18, -9, -2}), frozenset({2, 3, 4, 7, 9, 15, 18, -40, -39, -38, 31, 32, -33, 34, -28, 37, -24, -19, -6, -5}), frozenset({2, 4, 5, 6, 7, 18, 19, -40, -39, -38, 31, 32, -33, 34, -28, 37, -24, -15, -9, -3}), frozenset({3, 4, 5, 6, 9, 18, 19, -40, -39, -38, 31, 32, -33, 34, -28, 37, -24, -15, -7, -2}), frozenset({2, 3, 4, 6, 7, 18, 19, -40, -39, -38, 28, -33, 32, -31, 34, 37, -24, -15, -9, -5}), frozenset({2, 3, 4, 7, 9, 18, 19, -40, -39, -38, -34, 31, 32, 33, -28, 37, -24, -15, -6, -5}), frozenset({3, 4, 5, 6, 9, 18, 19, -40, -39, -38, 28, -33, 32, -31, 34, 37, -24, -15, -7, -2}), frozenset({2, 3, 5, 7, 9, 15, 18, -40, -39, -38, -37, 31, 32, 33, 34, -28, -24, -19, -6, -4}), frozenset({3, 4, 5, 7, 9, 18, 19, -40, -39, -38, -37, 31, 32, 33, 34, -28, -24, -15, -6, -2}), frozenset({2, 4, 5, 7, 9, 18, 19, -40, -39, -38, 31, 32, -33, 34, -28, 37, -24, -15, -6, -3}), frozenset({3, 4, 5, 7, 9, 18, 19, -40, -39, -38, 28, -33, 32, -31, 34, 37, -24, -15, -6, -2})]
243	itemsets left after W operation 	: [frozenset({41, 19, 31}), frozenset({3, 4, 5, 7, 8, 9, 14, 15, 16, 18, 20, 21, 22, -41, 25, 26, -39, 29, -33, 32, 34, 35, 36, 37, -28, -24, -23, -17, -6, -2}), frozenset({3, 4, 5, 7, 9, 15, 16, 18, -41, 25, 26, -38, -39, -33, 32, 34, -28, 37, -24, -17, -6, -2}), frozenset({3, 4, 5, 6, 9, 15, 17, 18, -41, 25, 26, -38, -39, -33, 32, 34, -28, 37, -24, -16, -7, -2}), frozenset({2, 3, 4, 7, 9, 15, 17, 18, -41, 25, 26, -38, -39, -34, 32, 33, -28, 37, -24, -16, -6, -5}), frozenset({3, 4, 5, 7, 9, 15, 17, 18, -41, 24, 25, -38, -39, -33, 32, 34, -28, 37, -26, -16, -6, -2}), frozenset({3, 4, 5, 7, 9, 16, 17, 18, -41, 24, -39, 26, -38, -33, 32, 34, -28, 37, -25, -15, -6, -2}), frozenset({3, 4, 5, 7, 9, 15, 16, 18, -41, 24, -39, 26, -38, -33, 32, 34, -28, 37, -25, -17, -6, -2}), frozenset({3, 4, 5, 7, 9, 15, 17, 18, -41, 25, 26, -38, -39, -33, 32, 34, -28, 37, -24, -16, -6, -2}), frozenset({3, 4, 5, 6, 7, 15, 16, 18, -41, 24, 25, -38, -39, -33, 32, 34, -28, 37, -26, -17, -9, -2}), frozenset({2, 3, 4, 7, 9, 15, 17, 18, -41, 24, 25, -38, -39, -33, 32, 34, -28, 37, -26, -16, -6, -5}), frozenset({3, 4, 5, 6, 9, 16, 17, 18, -41, 24, -39, 26, -38, -34, 32, 33, -28, 37, -25, -15, -7, -2}), frozenset({3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 18, 21, 22, 23, 27, 29, 30, 32, 34, 35, 36, 37, -41, -40, -33, -28, -24, -20, -15, -14, -6, -2}), frozenset({3, 4, 5, 6, 7, 11, 12, 13, 15, -41, 24, -40, -38, 30, -33, 32, 34, -28, 37, -27, -18, -10, -9, -2}), frozenset({3, 4, 5, 7, 9, 10, 12, 13, 15, -41, -40, -38, 27, 30, -33, 32, 34, -28, 37, -24, -18, -11, -6, -2}), frozenset({3, 4, 5, 6, 7, 10, 12, 13, 18, -41, -40, -38, 27, -37, 30, 32, 33, 34, -28, -24, -15, -11, -9, -2}), frozenset({3, 4, 5, 7, 9, 10, 12, 13, 18, -41, 24, -40, -38, 30, -33, 32, 34, -28, 37, -27, -15, -11, -6, -2}), frozenset({3, 4, 5, 6, 7, 10, 11, 12, 18, -41, -40, -38, 27, 30, -33, 32, 34, -28, 37, -24, -15, -13, -9, -2}), frozenset({3, 4, 5, 7, 9, 10, 12, 13, 18, -41, -40, -38, 27, 30, -33, 32, 34, -28, 37, -24, -15, -11, -6, -2}), frozenset({2, 3, 5, 7, 9, 10, 11, 13, 18, -41, -40, -38, 27, 30, -34, 32, 33, -28, 37, -24, -15, -12, -6, -4}), frozenset({3, 4, 5, 6, 7, 10, 12, 13, 18, -41, -40, -38, 27, 28, 30, -33, -32, 34, 37, -24, -15, -11, -9, -2}), frozenset({3, 4, 5, 7, 9, 10, 11, 12, 18, -41, -40, -38, 27, -37, 30, 32, 33, 34, -28, -24, -15, -13, -6, -2}), frozenset({3, 4, 5, 7, 9, 11, 12, 13, 18, -41, -40, -38, 27, 28, -33, 32, 34, -30, 37, -24, -15, -10, -6, -2}), frozenset({2, 3, 4, 7, 9, 10, 11, 13, 18, -41, -40, -38, 27, 30, -34, 32, 33, -28, 37, -24, -15, -12, -6, -5}), frozenset({3, 4, 5, 7, 8, 9, 14, 18, 21, 22, 23, -40, -39, -41, 29, -35, 32, 33, 34, 36, 37, -28, -24, -20, -15, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 14, 18, 20, 21, 22, -41, -40, -39, 28, 29, -33, -32, 34, 35, 36, 37, -24, -23, -15, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 14, 18, 21, 22, 23, -40, -39, -41, 28, -33, 32, 34, 35, 36, 37, -29, -24, -20, -15, -6, -2}), frozenset({2, 4, 5, 7, 8, 9, 14, 18, 20, 21, 23, -40, -39, -41, 29, -33, 32, 34, 35, 36, 37, -28, -24, -22, -15, -6, -3}), frozenset({3, 4, 5, 6, 7, 8, 14, 18, 20, 22, 23, -40, -39, -41, 29, -33, 32, 34, 35, 36, 37, -28, -24, -21, -15, -9, -2}), frozenset({3, 4, 5, 6, 7, 8, 14, 15, 20, 21, 22, -41, -40, -39, 29, -33, 32, 34, 35, 36, 37, -28, -24, -23, -18, -9, -2}), frozenset({3, 4, 5, 6, 7, 9, 14, 15, 20, 22, 23, -40, -39, -41, 29, -33, 32, 34, 35, 36, 37, -28, -24, -21, -18, -8, -2}), frozenset({2, 3, 5, 6, 7, 8, 14, 18, 21, 22, 23, -40, -39, -41, -36, 29, 32, 33, 34, 35, -28, 37, -24, -20, -15, -9, -4}), frozenset({3, 4, 5, 6, 7, 8, 14, 18, 20, 21, 23, -40, -39, -41, 29, -33, 32, 34, 35, 36, 37, -28, -24, -22, -15, -9, -2}), frozenset({3, 4, 5, 6, 7, 9, 14, 18, 21, 22, 23, -40, -39, -41, 29, -33, 32, 34, 35, 36, 37, -28, -24, -20, -15, -8, -2}), frozenset({3, 4, 5, 7, 9, 18, -41, -40, -39, -38, -34, 32, 33, -28, 37, -24, -15, -6, -2}), frozenset({3, 4, 5, 6, 7, 18, -41, -40, -39, -38, -34, 32, 33, -28, 37, -24, -15, -9, -2}), frozenset({2, 3, 5, 7, 9, 18, -41, -40, -39, -38, -37, 32, 33, 34, -28, -24, -15, -6, -4}), frozenset({3, 4, 5, 6, 7, 18, -41, -40, -39, -38, -33, 32, 34, -28, 37, -24, -15, -9, -2}), frozenset({3, 4, 5, 6, 7, 18, -41, -40, -39, -38, -37, 32, 33, 34, -28, -24, -15, -9, -2}), frozenset({2, 3, 4, 7, 9, 18, -41, -40, -39, -38, -33, 32, 34, -28, 37, -24, -15, -6, -5}), frozenset({2, 3, 5, 6, 7, 18, -41, -40, -39, -38, -33, 32, 34, -28, 37, -24, -15, -9, -4}), frozenset({2, 3, 5, 7, 9, 18, -41, -40, -39, -38, -33, 32, 34, -28, 37, -24, -15, -6, -4}), frozenset({3, 4, 5, 6, 9, 18, -41, -40, -39, -38, 28, -33, -32, 34, 37, -24, -15, -7, -2}), frozenset({2, 3, 4, 6, 9, 18, -41, -40, -39, -38, -37, 32, 33, 34, -28, -24, -15, -7, -5}), frozenset({2, 4, 5, 7, 9, 18, -41, -40, -39, -38, -34, 32, 33, -28, 37, -24, -15, -6, -3}), frozenset({3, 4, 5, 7, 9, 18, -41, -40, -39, -38, 28, -33, -32, 34, 37, -24, -15, -6, -2}), frozenset({2, 4, 5, 7, 9, 15, -41, -40, -39, -38, -33, 32, 34, -28, 37, -24, -18, -6, -3}), frozenset({3, 4, 5, 6, 9, 18, -41, -40, -39, -38, -37, 32, 33, 34, -28, -24, -15, -7, -2}), frozenset({2, 3, 5, 7, 9, 18, -41, -40, -39, -38, -37, 28, -32, 33, 34, -24, -15, -6, -4}), frozenset({2, 4, 5, 7, 9, 18, -41, -40, -39, -38, -37, 32, 33, 34, -28, -24, -15, -6, -3}), frozenset({3, 4, 5, 7, 9, 18, -41, -40, -39, -38, -33, 32, 34, -28, 37, -24, -15, -6, -2}), frozenset({3, 4, 5, 7, 9, 15, -41, -40, -39, -38, -33, 32, 34, -28, 37, -24, -18, -6, -2}), frozenset({3, 4, 5, 6, 7, 15, -41, -40, -39, -38, -34, 32, 33, -28, 37, -24, -18, -9, -2}), frozenset({2, 4, 5, 6, 7, 18, -41, -40, -39, -38, -33, 32, 34, -28, 37, -24, -15, -9, -3}), frozenset({3, 4, 5, 6, 9, 18, -41, -40, -39, -38, -33, 32, 34, -28, 37, -24, -15, -7, -2}), frozenset({2, 3, 4, 7, 9, 18, -41, -40, -39, -38, -34, 32, 33, -28, 37, -24, -15, -6, -5}), frozenset({3, 4, 5, 7, 9, 18, -41, -40, -39, -38, -37, 32, 33, 34, -28, -24, -15, -6, -2}), frozenset({2, 4, 5, 7, 9, 18, -41, -40, -39, -38, -33, 32, 34, -28, 37, -24, -15, -6, -3})]
171	itemsets left after W operation 	: [frozenset({32, 42, 4}), frozenset({3, 5, 6, 7, 16, 17, 18, 19, -42, 24, 25, -38, -37, 28, -39, 33, 34, -31, -26, -15, -9, -2}), frozenset({3, 5, 7, 9, 15, 16, 18, 19, -42, 24, 25, -38, -39, 28, -33, -31, 34, 37, -26, -17, -6, -2}), frozenset({3, 5, 7, 9, 11, 12, 13, 15, 18, -42, 24, -40, -38, 28, 31, -33, 34, -30, 37, -27, -19, -10, -6, -2}), frozenset({3, 5, 7, 9, 15, 18, -42, -40, -39, -38, 31, -33, 34, -28, 37, -24, -19, -6, -2}), frozenset({2, 3, 7, 9, 15, 18, -42, -40, -39, -38, 31, -33, 34, -28, 37, -24, -19, -6, -5}), frozenset({2, 3, 6, 7, 18, 19, -42, -40, -39, -38, 28, -33, -31, 34, 37, -24, -15, -9, -5}), frozenset({3, 5, 6, 9, 18, 19, -42, -40, -39, -38, 28, -33, -31, 34, 37, -24, -15, -7, -2}), frozenset({3, 5, 7, 9, 18, 19, -42, -40, -39, -38, 28, -33, -31, 34, 37, -24, -15, -6, -2}), frozenset({3, 5, 7, 8, 9, 14, 15, 16, 18, 20, 21, 22, -41, -42, 25, 26, -39, 29, -33, 34, 35, 36, 37, -28, -24, -23, -17, -6, -2}), frozenset({3, 5, 7, 9, 15, 16, 18, -42, -41, 25, 26, -38, -39, -33, 34, -28, 37, -24, -17, -6, -2}), frozenset({3, 5, 6, 9, 15, 17, 18, -42, -41, 25, 26, -38, -39, -33, 34, -28, 37, -24, -16, -7, -2}), frozenset({2, 3, 7, 9, 15, 17, 18, -42, -41, 25, 26, -38, -39, -34, 33, -28, 37, -24, -16, -6, -5}), frozenset({3, 5, 7, 9, 15, 17, 18, -42, -41, 24, 25, -38, -39, -33, 34, -28, 37, -26, -16, -6, -2}), frozenset({3, 5, 7, 9, 16, 17, 18, -42, -41, 24, -39, 26, -38, -33, 34, -28, 37, -25, -15, -6, -2}), frozenset({3, 5, 7, 9, 15, 16, 18, -42, -41, 24, -39, 26, -38, -33, 34, -28, 37, -25, -17, -6, -2}), frozenset({3, 5, 7, 9, 15, 17, 18, -42, -41, 25, 26, -38, -39, -33, 34, -28, 37, -24, -16, -6, -2}), frozenset({3, 5, 6, 7, 15, 16, 18, -42, -41, 24, 25, -38, -39, -33, 34, -28, 37, -26, -17, -9, -2}), frozenset({2, 3, 7, 9, 15, 17, 18, -42, -41, 24, 25, -38, -39, -33, 34, -28, 37, -26, -16, -6, -5}), frozenset({3, 5, 6, 9, 16, 17, 18, -42, -41, 24, -39, 26, -38, -34, 33, -28, 37, -25, -15, -7, -2}), frozenset({3, 5, 7, 8, 9, 10, 11, 12, 13, 18, 21, 22, 23, -41, -40, -42, 27, 29, 30, -33, 34, 35, 36, 37, -28, -24, -20, -15, -14, -6, -2}), frozenset({3, 5, 6, 7, 11, 12, 13, 15, -42, -41, 24, -40, -38, 30, -33, 34, -28, 37, -27, -18, -10, -9, -2}), frozenset({3, 5, 7, 9, 10, 12, 13, 15, -42, -41, -40, -38, 27, 30, -33, 34, -28, 37, -24, -18, -11, -6, -2}), frozenset({3, 5, 6, 7, 10, 12, 13, 18, -42, -41, -40, -38, 27, -37, 30, 33, 34, -28, -24, -15, -11, -9, -2}), frozenset({3, 5, 7, 9, 10, 12, 13, 18, -42, -41, 24, -40, -38, 30, -33, 34, -28, 37, -27, -15, -11, -6, -2}), frozenset({3, 5, 6, 7, 10, 11, 12, 18, -42, -41, -40, -38, 27, 30, -33, 34, -28, 37, -24, -15, -13, -9, -2}), frozenset({3, 5, 7, 9, 10, 12, 13, 18, -42, -41, -40, -38, 27, 30, -33, 34, -28, 37, -24, -15, -11, -6, -2}), frozenset({3, 5, 7, 9, 10, 11, 12, 18, -42, -41, -40, -38, 27, -37, 30, 33, 34, -28, -24, -15, -13, -6, -2}), frozenset({3, 5, 7, 9, 11, 12, 13, 18, -42, -41, -40, -38, 27, 28, -33, 34, -30, 37, -24, -15, -10, -6, -2}), frozenset({2, 3, 7, 9, 10, 11, 13, 18, -42, -41, -40, -38, 27, 30, -34, 33, -28, 37, -24, -15, -12, -6, -5}), frozenset({3, 5, 7, 8, 9, 14, 18, 21, 22, 23, -40, -39, -41, -42, 29, -35, 33, 34, 36, 37, -28, -24, -20, -15, -6, -2}), frozenset({3, 5, 7, 8, 9, 14, 18, 21, 22, 23, -40, -39, -41, -42, 28, -33, 34, 35, 36, 37, -29, -24, -20, -15, -6, -2}), frozenset({2, 5, 7, 8, 9, 14, 18, 20, 21, -42, 23, -40, -39, -41, 29, -33, 34, 35, 36, 37, -28, -24, -22, -15, -6, -3}), frozenset({3, 5, 6, 7, 8, 14, 18, 20, 22, 23, -40, -39, -41, -42, 29, -33, 34, 35, 36, 37, -28, -24, -21, -15, -9, -2}), frozenset({3, 5, 6, 7, 8, 14, 15, 20, 21, 22, -41, -40, -39, -42, 29, -33, 34, 35, 36, 37, -28, -24, -23, -18, -9, -2}), frozenset({3, 5, 6, 7, 9, 14, 15, 20, 22, 23, -40, -39, -41, -42, 29, -33, 34, 35, 36, 37, -28, -24, -21, -18, -8, -2}), frozenset({3, 5, 6, 7, 8, 14, 18, 20, 21, -42, 23, -40, -39, -41, 29, -33, 34, 35, 36, 37, -28, -24, -22, -15, -9, -2}), frozenset({3, 5, 6, 7, 9, 14, 18, 21, 22, 23, -40, -39, -41, -42, 29, -33, 34, 35, 36, 37, -28, -24, -20, -15, -8, -2}), frozenset({3, 5, 7, 9, 18, -42, -41, -40, -39, -38, -34, 33, -28, 37, -24, -15, -6, -2}), frozenset({3, 5, 6, 7, 18, -42, -41, -40, -39, -38, -34, 33, -28, 37, -24, -15, -9, -2}), frozenset({3, 5, 6, 7, 18, -42, -41, -40, -39, -38, -33, 34, -28, 37, -24, -15, -9, -2}), frozenset({3, 5, 6, 7, 18, -42, -41, -40, -39, -38, -37, 33, 34, -28, -24, -15, -9, -2}), frozenset({2, 3, 7, 9, 18, -42, -41, -40, -39, -38, -33, 34, -28, 37, -24, -15, -6, -5}), frozenset({2, 3, 6, 9, 18, -42, -41, -40, -39, -38, -37, 33, 34, -28, -24, -15, -7, -5}), frozenset({2, 5, 7, 9, 18, -42, -41, -40, -39, -38, -34, 33, -28, 37, -24, -15, -6, -3}), frozenset({2, 5, 7, 9, 15, -42, -41, -40, -39, -38, -33, 34, -28, 37, -24, -18, -6, -3}), frozenset({3, 5, 6, 9, 18, -42, -41, -40, -39, -38, -37, 33, 34, -28, -24, -15, -7, -2}), frozenset({2, 5, 7, 9, 18, -42, -41, -40, -39, -38, -37, 33, 34, -28, -24, -15, -6, -3}), frozenset({3, 5, 7, 9, 18, -42, -41, -40, -39, -38, -33, 34, -28, 37, -24, -15, -6, -2}), frozenset({3, 5, 7, 9, 15, -42, -41, -40, -39, -38, -33, 34, -28, 37, -24, -18, -6, -2}), frozenset({3, 5, 6, 7, 15, -42, -41, -40, -39, -38, -34, 33, -28, 37, -24, -18, -9, -2}), frozenset({2, 5, 6, 7, 18, -42, -41, -40, -39, -38, -33, 34, -28, 37, -24, -15, -9, -3}), frozenset({3, 5, 6, 9, 18, -42, -41, -40, -39, -38, -33, 34, -28, 37, -24, -15, -7, -2}), frozenset({2, 3, 7, 9, 18, -42, -41, -40, -39, -38, -34, 33, -28, 37, -24, -15, -6, -5}), frozenset({3, 5, 7, 9, 18, -42, -41, -40, -39, -38, -37, 33, 34, -28, -24, -15, -6, -2}), frozenset({2, 5, 7, 9, 18, -42, -41, -40, -39, -38, -33, 34, -28, 37, -24, -15, -6, -3})]>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 86
 Number of frequent closed itemsets: 32682
 Total time ~: 408 ms

122	itemsets left after W operation 	: [frozenset({3, 18, 43}), frozenset({2, 5, 7, 9, 15, -43, -40, -39, -38, -37, 31, 32, 33, 34, -28, -24, -19, -6, -4}), frozenset({2, 5, 7, 9, 10, 11, 13, -43, -41, -40, -38, 27, 30, -34, 32, 33, -28, 37, -24, -15, -12, -6, -4}), frozenset({4, 5, 6, 7, 10, 12, 13, -43, -41, -40, -38, 27, 28, 30, -33, -32, 34, 37, -24, -15, -11, -9, -2}), frozenset({4, 5, 6, 7, 8, 14, 20, 21, 22, -41, -40, -39, -43, 28, 29, -33, -32, 34, 35, 36, 37, -24, -23, -15, -9, -2}), frozenset({2, 5, 6, 7, 8, 14, 21, 22, 23, -40, -39, -41, -43, -36, 29, 32, 33, 34, 35, -28, 37, -24, -20, -15, -9, -4}), frozenset({2, 5, 7, 9, -43, -41, -40, -39, -38, -37, 32, 33, 34, -28, -24, -15, -6, -4}), frozenset({2, 5, 6, 7, -43, -41, -40, -39, -38, -33, 32, 34, -28, 37, -24, -15, -9, -4}), frozenset({2, 5, 7, 9, -43, -41, -40, -39, -38, -33, 32, 34, -28, 37, -24, -15, -6, -4}), frozenset({4, 5, 6, 9, -43, -41, -40, -39, -38, 28, -33, -32, 34, 37, -24, -15, -7, -2}), frozenset({4, 5, 7, 9, -43, -41, -40, -39, -38, 28, -33, -32, 34, 37, -24, -15, -6, -2}), frozenset({2, 5, 7, 9, -43, -41, -40, -39, -38, -37, 28, -32, 33, 34, -24, -15, -6, -4}), frozenset({5, 6, 7, 16, 17, 19, -43, -42, 24, 25, -38, -37, 28, -39, 33, 34, -31, -26, -15, -9, -2}), frozenset({5, 7, 9, 15, 16, 19, -43, -42, 24, 25, -38, -39, 28, -33, -31, 34, 37, -26, -17, -6, -2}), frozenset({5, 7, 9, 11, 12, 13, 15, -43, -42, 24, -40, -38, 28, 31, -33, 34, -30, 37, -27, -19, -10, -6, -2}), frozenset({5, 7, 9, 15, -43, -42, -40, -39, -38, 31, -33, 34, -28, 37, -24, -19, -6, -2}), frozenset({2, 7, 9, 15, -43, -42, -40, -39, -38, 31, -33, 34, -28, 37, -24, -19, -6, -5}), frozenset({2, 6, 7, 19, -43, -42, -40, -39, -38, 28, -33, -31, 34, 37, -24, -15, -9, -5}), frozenset({5, 6, 9, 19, -43, -42, -40, -39, -38, 28, -33, -31, 34, 37, -24, -15, -7, -2}), frozenset({5, 7, 9, 19, -43, -42, -40, -39, -38, 28, -33, -31, 34, 37, -24, -15, -6, -2}), frozenset({5, 7, 8, 9, 14, 15, 16, 20, 21, 22, -41, -42, 25, 26, -39, -43, 29, -33, 34, 35, 36, 37, -28, -24, -23, -17, -6, -2}), frozenset({5, 7, 9, 15, 16, -43, -42, -41, 25, 26, -38, -39, -33, 34, -28, 37, -24, -17, -6, -2}), frozenset({5, 6, 9, 15, 17, -43, -42, -41, 25, 26, -38, -39, -33, 34, -28, 37, -24, -16, -7, -2}), frozenset({2, 7, 9, 15, 17, -43, -42, -41, 25, 26, -38, -39, -34, 33, -28, 37, -24, -16, -6, -5}), frozenset({5, 7, 9, 15, 17, -43, -42, -41, 24, 25, -38, -39, -33, 34, -28, 37, -26, -16, -6, -2}), frozenset({5, 7, 9, 16, 17, -43, -42, -41, 24, -39, 26, -38, -33, 34, -28, 37, -25, -15, -6, -2}), frozenset({5, 7, 9, 15, 16, -43, -42, -41, 24, -39, 26, -38, -33, 34, -28, 37, -25, -17, -6, -2}), frozenset({5, 7, 9, 15, 17, -43, -42, -41, 25, 26, -38, -39, -33, 34, -28, 37, -24, -16, -6, -2}), frozenset({5, 6, 7, 15, 16, -43, -42, -41, 24, 25, -38, -39, -33, 34, -28, 37, -26, -17, -9, -2}), frozenset({2, 7, 9, 15, 17, -43, -42, -41, 24, 25, -38, -39, -33, 34, -28, 37, -26, -16, -6, -5}), frozenset({5, 6, 9, 16, 17, -43, -42, -41, 24, -39, 26, -38, -34, 33, -28, 37, -25, -15, -7, -2}), frozenset({5, 7, 8, 9, 10, 11, 12, 13, 21, 22, 23, -41, -40, -42, 27, -43, 29, 30, -33, 34, 35, 36, 37, -28, -24, -20, -15, -14, -6, -2}), frozenset({5, 6, 7, 10, 12, 13, -43, -42, -41, -40, -38, 27, -37, 30, 33, 34, -28, -24, -15, -11, -9, -2}), frozenset({5, 7, 9, 10, 12, 13, -43, -42, -41, 24, -40, -38, 30, -33, 34, -28, 37, -27, -15, -11, -6, -2}), frozenset({5, 6, 7, 10, 11, 12, -43, -42, -41, -40, -38, 27, 30, -33, 34, -28, 37, -24, -15, -13, -9, -2}), frozenset({5, 7, 9, 10, 12, 13, -43, -42, -41, -40, -38, 27, 30, -33, 34, -28, 37, -24, -15, -11, -6, -2}), frozenset({5, 7, 9, 10, 11, 12, -43, -42, -41, -40, -38, 27, -37, 30, 33, 34, -28, -24, -15, -13, -6, -2}), frozenset({5, 7, 9, 11, 12, 13, -43, -42, -41, -40, -38, 27, 28, -33, 34, -30, 37, -24, -15, -10, -6, -2}), frozenset({2, 7, 9, 10, 11, 13, -43, -42, -41, -40, -38, 27, 30, -34, 33, -28, 37, -24, -15, -12, -6, -5}), frozenset({5, 7, 8, 9, 14, 21, 22, 23, -40, -39, -41, -42, -43, 29, -35, 33, 34, 36, 37, -28, -24, -20, -15, -6, -2}), frozenset({5, 7, 8, 9, 14, 21, 22, 23, -40, -39, -41, -42, 28, -43, -33, 34, 35, 36, 37, -29, -24, -20, -15, -6, -2}), frozenset({5, 6, 7, 8, 14, 20, -43, 22, 23, -40, -39, -41, -42, 29, -33, 34, 35, 36, 37, -28, -24, -21, -15, -9, -2}), frozenset({5, 6, 7, 8, 14, 20, 21, -42, 23, -40, -39, -41, -43, 29, -33, 34, 35, 36, 37, -28, -24, -22, -15, -9, -2}), frozenset({5, 6, 7, 9, 14, 21, 22, 23, -40, -39, -41, -42, -43, 29, -33, 34, 35, 36, 37, -28, -24, -20, -15, -8, -2}), frozenset({5, 7, 9, -43, -42, -41, -40, -39, -38, -34, 33, -28, 37, -24, -15, -6, -2}), frozenset({5, 6, 7, -43, -42, -41, -40, -39, -38, -34, 33, -28, 37, -24, -15, -9, -2}), frozenset({5, 6, 7, -43, -42, -41, -40, -39, -38, -33, 34, -28, 37, -24, -15, -9, -2}), frozenset({5, 6, 7, -43, -42, -41, -40, -39, -38, -37, 33, 34, -28, -24, -15, -9, -2}), frozenset({2, 7, 9, -43, -42, -41, -40, -39, -38, -33, 34, -28, 37, -24, -15, -6, -5}), frozenset({2, 6, 9, -43, -42, -41, -40, -39, -38, -37, 33, 34, -28, -24, -15, -7, -5}), frozenset({5, 6, 9, -43, -42, -41, -40, -39, -38, -37, 33, 34, -28, -24, -15, -7, -2}), frozenset({5, 7, 9, -43, -42, -41, -40, -39, -38, -33, 34, -28, 37, -24, -15, -6, -2}), frozenset({5, 6, 9, -43, -42, -41, -40, -39, -38, -33, 34, -28, 37, -24, -15, -7, -2}), frozenset({2, 7, 9, -43, -42, -41, -40, -39, -38, -34, 33, -28, 37, -24, -15, -6, -5}), frozenset({5, 7, 9, -43, -42, -41, -40, -39, -38, -37, 33, 34, -28, -24, -15, -6, -2})]
Initial DL				: 109019.69407604229
Final DL				: 13955.004352379035
Compression (wrt me)	: 0.871995564923845
Operator Counters		: {'D': 0, 'W': 6, 'V': 0, 'S': 0, 'R': 0, 'T': 0}
Misle Learning Runtime	: 39.37706112861633

Timeout of 20 seconds reached while mining patterns with minsup = 0.5
Current Minsup[0.75] yields 24719 itemsets.
Top-k minsup for at least 10000 paterns = 0.75 or 64
26  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, -34, -28, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, -37, -28, -24, -20, -15, -10, -7, -2}), frozenset({3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -11, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -18, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, -37, -28, -24, -20, -15, -10, -6, -2}), frozenset({2, 3, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -4}), frozenset({2, 3, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -9, -4}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -17, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, -33, -31, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, -33, -29, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -27, -20, -18, -10, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 34, 35, 36, 37, -33, -30, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -7, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, -33, -32, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -22, -15, -10, -9, -2}), frozenset({3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -8, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -16, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -19, -10, -6, -2}), frozenset({2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -5}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, -37, -28, -24, -20, -15, -10, -9, -2}), frozenset({2, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -3}), frozenset({2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -9, -3}), frozenset({2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, -34, -28, -24, -20, -15, -10, -6, -5}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, -34, -28, -24, -20, -15, -10, -9, -2})}
DL of initial theory	: 23272.70980539344
9999	itemsets left after W operation 	: [frozenset({36, 38, 11, 12, 13, 14, 17, 21, -10, 22, 25, 29}), frozenset({3, 4, 5, 6, 7, 8, 15, 16, 19, 23, 24, 26, -38, 30, 31, 32, -33, 34, 35, -28, 37, -27, -20, -18, -9, -2}), frozenset({2, 4, 5, 6, 7, 8, 16, 18, 19, 23, 26, 27, 28, -38, 30, -33, 32, -31, 34, 35, 37, -24, -20, -15, -9, -3}), frozenset({2, 3, 4, 7, 8, 9, 16, 18, 19, 23, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -20, -15, -6, -5}), frozenset({2, 3, 5, 6, 7, 8, 16, 18, 19, 23, 26, 27, -38, 30, 31, 32, 33, -34, 35, -28, 37, -24, -20, -15, -9, -4}), frozenset({3, 4, 5, 7, 8, 9, 16, 18, 19, 23, 26, 27, 28, -38, 30, 31, -33, -32, 34, 35, 37, -24, -20, -15, -6, -2}), frozenset({2, 4, 5, 6, 7, 8, 16, 18, 19, 23, 26, 27, 28, -38, 30, -34, 32, 33, -31, 35, 37, -24, -20, -15, -9, -3}), frozenset({3, 4, 5, 6, 7, 8, 16, 18, 19, 20, 26, 27, 28, -38, 30, -33, 32, -31, 34, 35, 37, -24, -23, -15, -9, -2}), frozenset({3, 4, 5, 6, 8, 9, 16, 18, 19, 23, 26, 27, -38, 30, 31, 32, 33, -34, 35, -28, 37, -24, -20, -15, -7, -2}), frozenset({3, 4, 5, 6, 7, 8, 16, 18, 19, 23, 24, 26, -38, 30, 31, 32, -33, 34, 35, -28, 37, -27, -20, -15, -9, -2}), frozenset({2, 4, 5, 7, 8, 9, 16, 18, 19, 23, 26, 27, 28, -38, 30, -34, 32, 33, -31, 35, 37, -24, -20, -15, -6, -3}), frozenset({3, 4, 5, 6, 7, 8, 16, 18, 19, 23, 26, 27, -38, 30, 31, 32, 33, -34, 35, -28, 37, -24, -20, -15, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 15, 16, 19, 23, 24, -38, 27, 30, 31, 32, -33, 34, 35, -28, 37, -26, -20, -18, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 16, 18, 19, 23, 26, 27, 28, -35, 30, -38, 32, 33, 34, -31, 37, -24, -20, -15, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 15, 16, 19, 23, -38, 26, 27, 28, -37, 30, 31, -32, 33, 34, 35, -24, -20, -18, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 15, 16, 19, 23, 24, 26, -38, 30, 31, 32, -33, 34, 35, -28, 37, -27, -20, -18, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 15, 16, 19, 23, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -20, -18, -9, -2}), frozenset({3, 4, 5, 6, 7, 8, 16, 18, 19, 23, 26, 27, -37, -38, 30, 31, 32, 33, 34, 35, -28, -24, -20, -15, -9, -2}), frozenset({2, 4, 5, 6, 8, 9, 16, 18, 19, 23, 26, 27, -38, -35, 30, 31, 32, 33, 34, -28, 37, -24, -20, -15, -7, -3}), frozenset({3, 4, 5, 6, 7, 8, 16, 18, 19, 20, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -23, -15, -9, -2}), frozenset({3, 4, 5, 6, 7, 8, 16, 18, 19, 23, 24, -38, 27, 30, 31, 32, -33, 34, 35, -28, 37, -26, -20, -15, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 16, 18, 19, 23, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -20, -15, -6, -2}), frozenset({2, 3, 5, 7, 8, 9, 16, 18, 19, 23, 24, -38, 27, 28, 30, -33, 32, -31, 34, 35, 37, -26, -20, -15, -6, -4}), frozenset({3, 4, 5, 6, 8, 9, 16, 18, 19, 23, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -20, -15, -7, -2}), frozenset({3, 4, 5, 6, 7, 8, 15, 16, 18, 20, 26, 27, 28, -38, 30, 31, -33, -32, 34, 35, 37, -24, -23, -19, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 16, 18, 19, 23, 26, 27, -37, -38, 30, 31, 32, 33, 34, 35, -28, -24, -20, -15, -6, -2}), frozenset({2, 4, 5, 6, 7, 8, 16, 18, 19, 23, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -20, -15, -9, -3}), frozenset({2, 3, 4, 7, 8, 9, 16, 18, 19, 23, 24, 26, -38, 30, 31, 32, -33, 34, 35, -28, 37, -27, -20, -15, -6, -5}), frozenset({3, 4, 5, 7, 8, 9, 16, 18, 19, 23, 26, 27, -38, 30, 31, 32, 33, -34, 35, -28, 37, -24, -20, -15, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 15, 16, 18, 23, 24, 26, -38, 28, 30, 31, -33, -32, 34, 35, 37, -27, -20, -19, -9, -2}), frozenset({3, 4, 5, 6, 7, 8, 16, 18, 19, 23, 26, 27, 28, -38, 30, -33, 32, -31, 34, 35, 37, -24, -20, -15, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 15, 16, 18, 23, 24, 26, -38, 30, 31, 32, -33, 34, 35, -28, 37, -27, -20, -19, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 15, 16, 18, 23, 24, 26, -38, 30, 31, 32, -33, 34, 35, -28, 37, -27, -20, -19, -9, -2}), frozenset({3, 4, 5, 6, 7, 8, 16, 18, 19, 23, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -20, -15, -9, -2}), frozenset({3, 4, 5, 6, 7, 8, 15, 16, 18, 20, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -23, -19, -9, -2}), frozenset({2, 3, 5, 7, 8, 9, 16, 18, 19, 23, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -20, -15, -6, -4}), frozenset({2, 3, 4, 6, 7, 8, 16, 18, 19, 23, 26, 27, 28, -38, 30, -34, 32, 33, -31, 35, 37, -24, -20, -15, -9, -5}), frozenset({3, 4, 5, 7, 8, 9, 15, 16, 18, 23, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -20, -19, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 15, 18, 19, 23, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -20, -16, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 16, 18, 19, 23, 26, 27, 28, -38, 31, 32, -33, 34, 35, -30, 37, -24, -20, -15, -9, -2}), frozenset({3, 4, 5, 6, 8, 9, 16, 18, 19, 23, 26, 27, -37, -38, 30, 31, 32, 33, 34, 35, -28, -24, -20, -15, -7, -2}), frozenset({3, 4, 5, 7, 8, 9, 15, 16, 19, 23, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -20, -18, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 16, 18, 19, 20, 26, 27, -37, -38, 30, 31, 32, 33, 34, 35, -28, -24, -23, -15, -9, -2}), frozenset({2, 4, 5, 7, 8, 9, 16, 18, 19, 23, 26, 27, 28, -38, 30, -33, 32, -31, 34, 35, 37, -24, -20, -15, -6, -3}), frozenset({2, 3, 4, 6, 7, 8, 16, 18, 19, 23, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -20, -15, -9, -5}), frozenset({3, 4, 5, 6, 7, 9, 16, 18, 19, 23, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -20, -15, -8, -2}), frozenset({2, 4, 5, 7, 8, 9, 16, 18, 19, 23, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -20, -15, -6, -3}), frozenset({2, 3, 4, 6, 7, 9, 15, 18, 19, 23, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -20, -16, -8, -5}), frozenset({3, 4, 5, 7, 8, 9, 15, 18, 19, 23, 26, 27, 28, -38, 31, 32, -33, 34, 35, -30, 37, -24, -20, -16, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 15, 16, 18, 23, 26, 27, 28, -38, 31, 32, -33, 34, 35, -30, 37, -24, -20, -19, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 15, 16, 19, 20, 26, 27, -38, -35, 30, 31, 32, 33, 34, -28, 37, -24, -23, -18, -9, -2}), frozenset({2, 3, 5, 6, 8, 9, 15, 16, 18, 23, 26, 27, 28, -38, 30, -34, 32, 33, -31, 35, 37, -24, -20, -19, -7, -4}), frozenset({2, 3, 5, 6, 7, 8, 16, 18, 19, 23, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -20, -15, -9, -4}), frozenset({3, 4, 5, 6, 7, 8, 16, 18, 19, 23, 26, 27, 28, -38, 30, 31, -33, -32, 34, 35, 37, -24, -20, -15, -9, -2}), frozenset({3, 4, 5, 6, 7, 8, 16, 18, 19, 23, 26, 27, 28, -38, 30, -34, 32, 33, -31, 35, 37, -24, -20, -15, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 16, 18, 19, 20, 26, 27, -38, 30, 31, 32, 33, -34, 35, -28, 37, -24, -23, -15, -6, -2}), frozenset({2, 4, 5, 6, 8, 9, 15, 16, 19, 23, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -20, -18, -7, -3}), frozenset({2, 3, 4, 7, 8, 9, 15, 18, 19, 23, 24, 26, -38, 30, 31, 32, -33, 34, 35, -28, 37, -27, -20, -16, -6, -5}), frozenset({3, 4, 5, 6, 7, 8, 15, 16, 18, 23, 26, 27, -37, -38, 30, 31, 32, 33, 34, 35, -28, -24, -20, -19, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 16, 18, 19, 23, 24, -38, 27, 30, 31, 32, -33, 34, 35, -28, 37, -26, -20, -15, -6, -2}), frozenset({2, 3, 4, 7, 8, 9, 16, 18, 19, 23, 26, 27, -38, 30, 31, 32, 33, -34, 35, -28, 37, -24, -20, -15, -6, -5}), frozenset({3, 4, 5, 6, 8, 9, 15, 16, 19, 23, 24, -38, 27, 30, 31, 32, -33, 34, 35, -28, 37, -26, -20, -18, -7, -2}), frozenset({3, 4, 5, 7, 8, 9, 16, 18, 19, 23, 26, 27, 28, -38, 31, 32, -33, 34, 35, -30, 37, -24, -20, -15, -6, -2}), frozenset({3, 4, 5, 6, 7, 9, 15, 16, 19, 23, 26, 27, -38, 30, 31, 32, -33, 34, 35, -28, 37, -24, -20, -18, -8, -2}), frozenset({3, 4, 5, 7, 8, 9, 16, 18, 19, 23, 26, 27, 28, -38, 30, -33, 32, -31, 34, 35, 37, -24, -20, -15, -6, -2})]
4936	itemsets left after W operation 	: [frozenset({35, 39, -20, 14, 16, 21, 22, 23, 25, 29, 30}), frozenset({3, 4, 5, 6, 7, 8, 10, 11, 13, 17, 18, 19, -39, 26, 27, 31, 32, -33, 34, 36, 37, -28, -24, -15, -12, -9, -2}), frozenset({3, 4, 5, 6, 8, 9, 10, 12, 13, 15, 18, 19, 24, -39, 26, 31, 32, -33, 34, 36, 37, -28, -27, -17, -11, -7, -2}), frozenset({3, 4, 5, 7, 8, 9, 10, 12, 13, 17, 18, 19, -39, 26, 27, 31, 32, -33, 34, 36, 37, -28, -24, -15, -11, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 17, 18, 19, -39, 26, 27, -36, 31, 32, 33, 34, -28, 37, -24, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 7, 9, 11, 12, 13, 17, 18, 19, -39, 26, 27, -36, 31, 32, 33, 34, -28, 37, -24, -15, -10, -8, -2}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 17, 18, 19, -39, 26, 27, 31, 32, -33, 34, 36, 37, -28, -24, -15, -13, -9, -5}), frozenset({3, 4, 5, 7, 8, 9, 10, 11, 12, 15, 17, 19, 24, -39, 26, 31, 32, -33, 34, 36, 37, -28, -27, -18, -13, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 10, 11, 13, 17, 18, 19, -39, 26, 27, -34, 31, 32, 33, 36, 37, -28, -24, -15, -12, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 10, 12, 13, 15, 18, 19, -39, 26, 27, 28, -33, 32, -31, 34, 36, 37, -24, -17, -11, -6, -2}), frozenset({2, 3, 4, 6, 8, 9, 10, 12, 13, 17, 18, 19, -39, 26, 27, -34, 31, 32, 33, 36, 37, -28, -24, -15, -11, -7, -5}), frozenset({2, 3, 4, 6, 7, 8, 11, 12, 13, 15, 18, 19, -39, 26, 27, -34, 31, 32, 33, 36, 37, -28, -24, -17, -10, -9, -5}), frozenset({3, 4, 5, 7, 8, 9, 10, 11, 12, 17, 18, 19, 24, -39, 26, 31, 32, -33, 34, 36, 37, -28, -27, -15, -13, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 15, 18, 19, -39, 26, 27, 31, 32, -33, 34, 36, 37, -28, -24, -17, -10, -9, -2}), frozenset({2, 4, 5, 7, 8, 9, 10, 12, 13, 17, 18, 19, -39, 26, 27, 31, 32, -33, 34, 36, 37, -28, -24, -15, -11, -6, -3}), frozenset({3, 4, 5, 7, 8, 9, 10, 12, 13, 17, 18, 19, -39, 26, 27, -36, 31, 32, 33, 34, -28, 37, -24, -15, -11, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 15, 18, 19, -39, 26, 27, 31, 32, -33, 34, 36, 37, -28, -24, -17, -10, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 10, 11, 13, 15, 17, 19, -39, 26, 27, 31, 32, -33, 34, 36, 37, -28, -24, -18, -12, -9, -2})]
# of frequent itemsets	: 203
Time of DCI Closed		: 0.34320998191833496
202	itemsets left after W operation 	: [frozenset({32, 4, 37, 8, 40}), frozenset({3, 5, 7, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 29, 30, 31, 34, 35, 36, -40, -33, -28, -26, -21, -15, -10, -6, -2}), frozenset({3, 5, 6, 7, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 29, 30, 31, 34, 35, 36, -40, -33, -28, -24, -22, -15, -10, -9, -2}), frozenset({3, 5, 7, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 34, 35, 36, -40, -33, -29, -24, -20, -15, -10, -6, -2}), frozenset({3, 5, 6, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 29, 30, 31, 34, 35, 36, -40, -33, -28, -24, -21, -15, -10, -7, -2}), frozenset({2, 5, 6, 7, 10, 11, 12, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 29, 30, 31, 33, 34, 35, -40, -36, -28, -25, -20, -15, -13, -9, -3}), frozenset({3, 5, 6, 7, 15, 16, 19, 23, 24, -40, 26, -38, 30, 31, -33, 34, 35, -28, -27, -20, -18, -9, -2}), frozenset({2, 5, 6, 7, 16, 18, 19, 23, -40, 26, 27, 28, -38, 30, -33, -31, 34, 35, -24, -20, -15, -9, -3}), frozenset({2, 3, 7, 9, 16, 18, 19, 23, -40, 26, 27, -38, 30, 31, -33, 34, 35, -28, -24, -20, -15, -6, -5}), frozenset({2, 5, 6, 7, 16, 18, 19, 23, -40, 26, 27, 28, -38, 30, -34, 33, -31, 35, -24, -20, -15, -9, -3}), frozenset({3, 5, 6, 7, 16, 18, 19, 20, -40, 26, 27, 28, -38, 30, -33, -31, 34, 35, -24, -23, -15, -9, -2}), frozenset({3, 5, 6, 9, 16, 18, 19, 23, -40, 26, 27, -38, 30, 31, -34, 33, 35, -28, -24, -20, -15, -7, -2}), frozenset({3, 5, 6, 7, 16, 18, 19, 23, 24, -40, 26, -38, 30, 31, -33, 34, 35, -28, -27, -20, -15, -9, -2}), frozenset({2, 5, 7, 9, 16, 18, 19, 23, -40, 26, 27, 28, -38, 30, -34, 33, -31, 35, -24, -20, -15, -6, -3}), frozenset({3, 5, 6, 7, 16, 18, 19, 23, -40, 26, 27, -38, 30, 31, -34, 33, 35, -28, -24, -20, -15, -9, -2}), frozenset({3, 5, 7, 9, 15, 16, 19, 23, 24, -40, -38, 27, 30, 31, -33, 34, 35, -28, -26, -20, -18, -6, -2}), frozenset({3, 5, 6, 7, 16, 18, 19, 23, -40, 26, 27, 28, -35, 30, -38, 33, 34, -31, -24, -20, -15, -9, -2}), frozenset({3, 5, 7, 9, 15, 16, 19, 23, 24, -40, 26, -38, 30, 31, -33, 34, 35, -28, -27, -20, -18, -6, -2}), frozenset({3, 5, 6, 7, 15, 16, 19, 23, -40, 26, 27, -38, 30, 31, -33, 34, 35, -28, -24, -20, -18, -9, -2}), frozenset({2, 5, 6, 9, 16, 18, 19, 23, -40, 26, 27, -38, -35, 30, 31, 33, 34, -28, -24, -20, -15, -7, -3}), frozenset({3, 5, 6, 7, 16, 18, 19, 20, -40, 26, 27, -38, 30, 31, -33, 34, 35, -28, -24, -23, -15, -9, -2}), frozenset({3, 5, 6, 7, 16, 18, 19, 23, 24, -40, -38, 27, 30, 31, -33, 34, 35, -28, -26, -20, -15, -9, -2}), frozenset({3, 5, 7, 9, 16, 18, 19, 23, -40, 26, 27, -38, 30, 31, -33, 34, 35, -28, -24, -20, -15, -6, -2}), frozenset({3, 5, 6, 9, 16, 18, 19, 23, -40, 26, 27, -38, 30, 31, -33, 34, 35, -28, -24, -20, -15, -7, -2}), frozenset({2, 5, 6, 7, 16, 18, 19, 23, -40, 26, 27, -38, 30, 31, -33, 34, 35, -28, -24, -20, -15, -9, -3}), frozenset({2, 3, 7, 9, 16, 18, 19, 23, 24, -40, 26, -38, 30, 31, -33, 34, 35, -28, -27, -20, -15, -6, -5}), frozenset({3, 5, 7, 9, 16, 18, 19, 23, -40, 26, 27, -38, 30, 31, -34, 33, 35, -28, -24, -20, -15, -6, -2}), frozenset({3, 5, 6, 7, 16, 18, 19, 23, -40, 26, 27, 28, -38, 30, -33, -31, 34, 35, -24, -20, -15, -9, -2}), frozenset({3, 5, 7, 9, 15, 16, 18, 23, 24, -40, 26, -38, 30, 31, -33, 34, 35, -28, -27, -20, -19, -6, -2}), frozenset({3, 5, 6, 7, 15, 16, 18, 23, 24, -40, 26, -38, 30, 31, -33, 34, 35, -28, -27, -20, -19, -9, -2}), frozenset({3, 5, 6, 7, 16, 18, 19, 23, -40, 26, 27, -38, 30, 31, -33, 34, 35, -28, -24, -20, -15, -9, -2}), frozenset({3, 5, 6, 7, 15, 16, 18, 20, -40, 26, 27, -38, 30, 31, -33, 34, 35, -28, -24, -23, -19, -9, -2}), frozenset({2, 3, 6, 7, 16, 18, 19, 23, -40, 26, 27, 28, -38, 30, -34, 33, -31, 35, -24, -20, -15, -9, -5}), frozenset({3, 5, 7, 9, 15, 16, 18, 23, -40, 26, 27, -38, 30, 31, -33, 34, 35, -28, -24, -20, -19, -6, -2}), frozenset({3, 5, 7, 9, 15, 18, 19, 23, -40, 26, 27, -38, 30, 31, -33, 34, 35, -28, -24, -20, -16, -6, -2}), frozenset({3, 5, 6, 7, 16, 18, 19, 23, -40, 26, 27, 28, -38, 31, -33, 34, 35, -30, -24, -20, -15, -9, -2}), frozenset({3, 5, 7, 9, 15, 16, 19, 23, -40, 26, 27, -38, 30, 31, -33, 34, 35, -28, -24, -20, -18, -6, -2}), frozenset({2, 5, 7, 9, 16, 18, 19, 23, -40, 26, 27, 28, -38, 30, -33, -31, 34, 35, -24, -20, -15, -6, -3}), frozenset({2, 3, 6, 7, 16, 18, 19, 23, -40, 26, 27, -38, 30, 31, -33, 34, 35, -28, -24, -20, -15, -9, -5}), frozenset({2, 5, 7, 9, 16, 18, 19, 23, -40, 26, 27, -38, 30, 31, -33, 34, 35, -28, -24, -20, -15, -6, -3}), frozenset({3, 5, 7, 9, 15, 18, 19, 23, -40, 26, 27, 28, -38, 31, -33, 34, 35, -30, -24, -20, -16, -6, -2}), frozenset({3, 5, 7, 9, 15, 16, 18, 23, -40, 26, 27, 28, -38, 31, -33, 34, 35, -30, -24, -20, -19, -6, -2}), frozenset({3, 5, 6, 7, 15, 16, 19, 20, -40, 26, 27, -38, -35, 30, 31, 33, 34, -28, -24, -23, -18, -9, -2}), frozenset({3, 5, 6, 7, 16, 18, 19, 23, -40, 26, 27, 28, -38, 30, -34, 33, -31, 35, -24, -20, -15, -9, -2}), frozenset({3, 5, 7, 9, 16, 18, 19, 20, -40, 26, 27, -38, 30, 31, -34, 33, 35, -28, -24, -23, -15, -6, -2}), frozenset({2, 5, 6, 9, 15, 16, 19, 23, -40, 26, 27, -38, 30, 31, -33, 34, 35, -28, -24, -20, -18, -7, -3}), frozenset({2, 3, 7, 9, 15, 18, 19, 23, 24, -40, 26, -38, 30, 31, -33, 34, 35, -28, -27, -20, -16, -6, -5}), frozenset({3, 5, 7, 9, 16, 18, 19, 23, 24, -40, -38, 27, 30, 31, -33, 34, 35, -28, -26, -20, -15, -6, -2}), frozenset({2, 3, 7, 9, 16, 18, 19, 23, -40, 26, 27, -38, 30, 31, -34, 33, 35, -28, -24, -20, -15, -6, -5}), frozenset({3, 5, 6, 9, 15, 16, 19, 23, 24, -40, -38, 27, 30, 31, -33, 34, 35, -28, -26, -20, -18, -7, -2}), frozenset({3, 5, 7, 9, 16, 18, 19, 23, -40, 26, 27, 28, -38, 31, -33, 34, 35, -30, -24, -20, -15, -6, -2}), frozenset({3, 5, 7, 9, 16, 18, 19, 23, -40, 26, 27, 28, -38, 30, -33, -31, 34, 35, -24, -20, -15, -6, -2}), frozenset({3, 5, 6, 7, 10, 11, 13, 17, 18, 19, -40, -39, 26, 27, 31, -33, 34, 36, -28, -24, -15, -12, -9, -2}), frozenset({3, 5, 6, 9, 10, 12, 13, 15, 18, 19, 24, -39, 26, -40, 31, -33, 34, 36, -28, -27, -17, -11, -7, -2}), frozenset({3, 5, 7, 9, 10, 12, 13, 17, 18, 19, -40, -39, 26, 27, 31, -33, 34, 36, -28, -24, -15, -11, -6, -2}), frozenset({3, 5, 7, 9, 11, 12, 13, 17, 18, 19, -40, -39, 26, 27, -36, 31, 33, 34, -28, -24, -15, -10, -6, -2}), frozenset({2, 3, 6, 7, 10, 11, 12, 17, 18, 19, -40, -39, 26, 27, 31, -33, 34, 36, -28, -24, -15, -13, -9, -5}), frozenset({3, 5, 7, 9, 10, 11, 12, 15, 17, 19, 24, -39, 26, -40, 31, -33, 34, 36, -28, -27, -18, -13, -6, -2}), frozenset({3, 5, 6, 7, 10, 11, 13, 17, 18, 19, -40, -39, 26, 27, -34, 31, 33, 36, -28, -24, -15, -12, -9, -2}), frozenset({3, 5, 7, 9, 10, 12, 13, 15, 18, 19, -40, -39, 26, 27, 28, -33, -31, 34, 36, -24, -17, -11, -6, -2}), frozenset({2, 3, 6, 9, 10, 12, 13, 17, 18, 19, -40, -39, 26, 27, -34, 31, 33, 36, -28, -24, -15, -11, -7, -5}), frozenset({2, 3, 6, 7, 11, 12, 13, 15, 18, 19, -40, -39, 26, 27, -34, 31, 33, 36, -28, -24, -17, -10, -9, -5}), frozenset({3, 5, 7, 9, 10, 11, 12, 17, 18, 19, 24, -39, 26, -40, 31, -33, 34, 36, -28, -27, -15, -13, -6, -2}), frozenset({3, 5, 6, 7, 11, 12, 13, 15, 18, 19, -40, -39, 26, 27, 31, -33, 34, 36, -28, -24, -17, -10, -9, -2}), frozenset({2, 5, 7, 9, 10, 12, 13, 17, 18, 19, -40, -39, 26, 27, 31, -33, 34, 36, -28, -24, -15, -11, -6, -3}), frozenset({3, 5, 7, 9, 10, 12, 13, 17, 18, 19, -40, -39, 26, 27, -36, 31, 33, 34, -28, -24, -15, -11, -6, -2}), frozenset({3, 5, 7, 9, 11, 12, 13, 15, 18, 19, -40, -39, 26, 27, 31, -33, 34, 36, -28, -24, -17, -10, -6, -2}), frozenset({3, 5, 6, 7, 10, 11, 13, 15, 17, 19, -40, -39, 26, 27, 31, -33, 34, 36, -28, -24, -18, -12, -9, -2})]
138	itemsets left after W operation 	: [frozenset({-24, 41, 26, 27}), frozenset({2, 3, 5, 6, 7, 8, 16, 18, 19, 23, -41, -38, 30, 31, 32, 33, -34, 35, -28, 37, -20, -15, -9, -4}), frozenset({3, 4, 5, 7, 8, 9, 16, 18, 19, 23, -41, -38, 28, 30, 31, -33, -32, 34, 35, 37, -20, -15, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 15, 16, 19, 23, -41, -38, -37, 28, 30, 31, -32, 33, 34, 35, -20, -18, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 16, 18, 19, 23, -41, -38, -37, 30, 31, 32, 33, 34, 35, -28, -20, -15, -9, -2}), frozenset({3, 4, 5, 6, 7, 8, 15, 16, 18, 20, -41, -38, 28, 30, 31, -33, -32, 34, 35, 37, -23, -19, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 16, 18, 19, 23, -41, -38, -37, 30, 31, 32, 33, 34, 35, -28, -20, -15, -6, -2}), frozenset({2, 3, 5, 7, 8, 9, 16, 18, 19, 23, -41, -38, 30, 31, 32, -33, 34, 35, -28, 37, -20, -15, -6, -4}), frozenset({3, 4, 5, 6, 8, 9, 16, 18, 19, 23, -41, -38, -37, 30, 31, 32, 33, 34, 35, -28, -20, -15, -7, -2}), frozenset({3, 4, 5, 6, 7, 8, 16, 18, 19, 20, -41, -38, -37, 30, 31, 32, 33, 34, 35, -28, -23, -15, -9, -2}), frozenset({3, 4, 5, 6, 7, 9, 16, 18, 19, 23, -41, -38, 30, 31, 32, -33, 34, 35, -28, 37, -20, -15, -8, -2}), frozenset({2, 3, 4, 6, 7, 9, 15, 18, 19, 23, -41, -38, 30, 31, 32, -33, 34, 35, -28, 37, -20, -16, -8, -5}), frozenset({2, 3, 5, 6, 8, 9, 15, 16, 18, 23, -41, -38, 28, 30, -34, 32, 33, -31, 35, 37, -20, -19, -7, -4}), frozenset({2, 3, 5, 6, 7, 8, 16, 18, 19, 23, -41, -38, 30, 31, 32, -33, 34, 35, -28, 37, -20, -15, -9, -4}), frozenset({3, 4, 5, 6, 7, 8, 16, 18, 19, 23, -41, -38, 28, 30, 31, -33, -32, 34, 35, 37, -20, -15, -9, -2}), frozenset({3, 4, 5, 6, 7, 8, 15, 16, 18, 23, -41, -38, -37, 30, 31, 32, 33, 34, 35, -28, -20, -19, -9, -2}), frozenset({3, 4, 5, 6, 7, 9, 15, 16, 19, 23, -41, -38, 30, 31, 32, -33, 34, 35, -28, 37, -20, -18, -8, -2}), frozenset({3, 4, 5, 6, 7, 9, 11, 12, 13, 17, 18, 19, -41, -39, -36, 31, 32, 33, 34, -28, 37, -15, -10, -8, -2}), frozenset({3, 5, 6, 7, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, -40, 25, -41, 29, 30, 31, -33, 34, 35, 36, -28, -22, -15, -10, -9, -2}), frozenset({3, 5, 7, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, -40, 25, -41, 28, 30, 31, -33, 34, 35, 36, -29, -20, -15, -10, -6, -2}), frozenset({3, 5, 6, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, -40, 25, -41, 29, 30, 31, -33, 34, 35, 36, -28, -21, -15, -10, -7, -2}), frozenset({2, 5, 6, 7, 16, 18, 19, 23, -40, -41, -38, 28, 30, -33, -31, 34, 35, -20, -15, -9, -3}), frozenset({2, 3, 7, 9, 16, 18, 19, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -15, -6, -5}), frozenset({2, 5, 6, 7, 16, 18, 19, 23, -40, -41, -38, 28, 30, -34, 33, -31, 35, -20, -15, -9, -3}), frozenset({3, 5, 6, 7, 16, 18, 19, 20, -41, -40, -38, 28, 30, -33, -31, 34, 35, -23, -15, -9, -2}), frozenset({3, 5, 6, 9, 16, 18, 19, 23, -40, -41, -38, 30, 31, -34, 33, 35, -28, -20, -15, -7, -2}), frozenset({2, 5, 7, 9, 16, 18, 19, 23, -40, -41, -38, 28, 30, -34, 33, -31, 35, -20, -15, -6, -3}), frozenset({3, 5, 6, 7, 16, 18, 19, 23, -40, -41, -38, 30, 31, -34, 33, 35, -28, -20, -15, -9, -2}), frozenset({3, 5, 6, 7, 16, 18, 19, 23, -40, -41, -38, 28, -35, 30, 33, 34, -31, -20, -15, -9, -2}), frozenset({3, 5, 6, 7, 15, 16, 19, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -18, -9, -2}), frozenset({2, 5, 6, 9, 16, 18, 19, 23, -40, -41, -38, -35, 30, 31, 33, 34, -28, -20, -15, -7, -3}), frozenset({3, 5, 6, 7, 16, 18, 19, 20, -41, -40, -38, 30, 31, -33, 34, 35, -28, -23, -15, -9, -2}), frozenset({3, 5, 7, 9, 16, 18, 19, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -15, -6, -2}), frozenset({3, 5, 6, 9, 16, 18, 19, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -15, -7, -2}), frozenset({2, 5, 6, 7, 16, 18, 19, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -15, -9, -3}), frozenset({3, 5, 7, 9, 16, 18, 19, 23, -40, -41, -38, 30, 31, -34, 33, 35, -28, -20, -15, -6, -2}), frozenset({3, 5, 6, 7, 16, 18, 19, 23, -40, -41, -38, 28, 30, -33, -31, 34, 35, -20, -15, -9, -2}), frozenset({3, 5, 6, 7, 16, 18, 19, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -15, -9, -2}), frozenset({3, 5, 6, 7, 15, 16, 18, 20, -41, -40, -38, 30, 31, -33, 34, 35, -28, -23, -19, -9, -2}), frozenset({2, 3, 6, 7, 16, 18, 19, 23, -40, -41, -38, 28, 30, -34, 33, -31, 35, -20, -15, -9, -5}), frozenset({3, 5, 7, 9, 15, 16, 18, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -19, -6, -2}), frozenset({3, 5, 7, 9, 15, 18, 19, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -16, -6, -2}), frozenset({3, 5, 6, 7, 16, 18, 19, 23, -40, -41, -38, 28, 31, -33, 34, 35, -30, -20, -15, -9, -2}), frozenset({3, 5, 7, 9, 15, 16, 19, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -18, -6, -2}), frozenset({2, 5, 7, 9, 16, 18, 19, 23, -40, -41, -38, 28, 30, -33, -31, 34, 35, -20, -15, -6, -3}), frozenset({2, 3, 6, 7, 16, 18, 19, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -15, -9, -5}), frozenset({2, 5, 7, 9, 16, 18, 19, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -15, -6, -3}), frozenset({3, 5, 7, 9, 15, 18, 19, 23, -40, -41, -38, 28, 31, -33, 34, 35, -30, -20, -16, -6, -2}), frozenset({3, 5, 7, 9, 15, 16, 18, 23, -40, -41, -38, 28, 31, -33, 34, 35, -30, -20, -19, -6, -2}), frozenset({3, 5, 6, 7, 15, 16, 19, 20, -41, -40, -38, -35, 30, 31, 33, 34, -28, -23, -18, -9, -2}), frozenset({3, 5, 6, 7, 16, 18, 19, 23, -40, -41, -38, 28, 30, -34, 33, -31, 35, -20, -15, -9, -2}), frozenset({3, 5, 7, 9, 16, 18, 19, 20, -41, -40, -38, 30, 31, -34, 33, 35, -28, -23, -15, -6, -2}), frozenset({2, 5, 6, 9, 15, 16, 19, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -18, -7, -3}), frozenset({2, 3, 7, 9, 16, 18, 19, 23, -40, -41, -38, 30, 31, -34, 33, 35, -28, -20, -15, -6, -5}), frozenset({3, 5, 7, 9, 16, 18, 19, 23, -40, -41, -38, 28, 31, -33, 34, 35, -30, -20, -15, -6, -2}), frozenset({3, 5, 7, 9, 16, 18, 19, 23, -40, -41, -38, 28, 30, -33, -31, 34, 35, -20, -15, -6, -2}), frozenset({3, 5, 6, 7, 10, 11, 13, 17, 18, 19, -41, -40, -39, 31, -33, 34, 36, -28, -15, -12, -9, -2}), frozenset({3, 5, 7, 9, 10, 12, 13, 17, 18, 19, -41, -40, -39, 31, -33, 34, 36, -28, -15, -11, -6, -2}), frozenset({3, 5, 7, 9, 11, 12, 13, 17, 18, 19, -41, -40, -39, -36, 31, 33, 34, -28, -15, -10, -6, -2}), frozenset({2, 3, 6, 7, 10, 11, 12, 17, 18, 19, -41, -40, -39, 31, -33, 34, 36, -28, -15, -13, -9, -5}), frozenset({3, 5, 6, 7, 10, 11, 13, 17, 18, 19, -41, -40, -39, -34, 31, 33, 36, -28, -15, -12, -9, -2}), frozenset({3, 5, 7, 9, 10, 12, 13, 15, 18, 19, -41, -40, -39, 28, -33, -31, 34, 36, -17, -11, -6, -2}), frozenset({2, 3, 6, 9, 10, 12, 13, 17, 18, 19, -41, -40, -39, -34, 31, 33, 36, -28, -15, -11, -7, -5}), frozenset({2, 3, 6, 7, 11, 12, 13, 15, 18, 19, -41, -40, -39, -34, 31, 33, 36, -28, -17, -10, -9, -5}), frozenset({3, 5, 6, 7, 11, 12, 13, 15, 18, 19, -41, -40, -39, 31, -33, 34, 36, -28, -17, -10, -9, -2}), frozenset({2, 5, 7, 9, 10, 12, 13, 17, 18, 19, -41, -40, -39, 31, -33, 34, 36, -28, -15, -11, -6, -3}), frozenset({3, 5, 7, 9, 10, 12, 13, 17, 18, 19, -41, -40, -39, -36, 31, 33, 34, -28, -15, -11, -6, -2}), frozenset({3, 5, 7, 9, 11, 12, 13, 15, 18, 19, -41, -40, -39, 31, -33, 34, 36, -28, -17, -10, -6, -2}), frozenset({3, 5, 6, 7, 10, 11, 13, 15, 17, 19, -41, -40, -39, 31, -33, 34, 36, -28, -18, -12, -9, -2})]
107	itemsets left after W operation 	: [frozenset({42, 3, 7}), frozenset({2, 5, 8, 9, 16, 18, 19, -42, 23, 24, -38, 27, 28, 30, -33, 32, -31, 34, 35, 37, -26, -20, -15, -6, -4}), frozenset({4, 5, 6, 8, 15, 16, 18, -42, 23, 24, 26, -38, 28, 30, 31, -33, -32, 34, 35, 37, -27, -20, -19, -9, -2}), frozenset({5, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 29, 30, 31, 34, 35, 36, -42, -40, -33, -28, -26, -21, -15, -10, -6, -2}), frozenset({5, 6, 15, 16, 19, -42, 23, 24, -40, 26, -38, 30, 31, -33, 34, 35, -28, -27, -20, -18, -9, -2}), frozenset({5, 6, 16, 18, 19, -42, 23, 24, -40, 26, -38, 30, 31, -33, 34, 35, -28, -27, -20, -15, -9, -2}), frozenset({5, 9, 15, 16, 19, -42, 23, 24, -40, -38, 27, 30, 31, -33, 34, 35, -28, -26, -20, -18, -6, -2}), frozenset({5, 9, 15, 16, 19, -42, 23, 24, -40, 26, -38, 30, 31, -33, 34, 35, -28, -27, -20, -18, -6, -2}), frozenset({5, 6, 16, 18, 19, -42, 23, 24, -40, -38, 27, 30, 31, -33, 34, 35, -28, -26, -20, -15, -9, -2}), frozenset({2, 9, 16, 18, 19, -42, 23, 24, -40, 26, -38, 30, 31, -33, 34, 35, -28, -27, -20, -15, -6, -5}), frozenset({5, 9, 15, 16, 18, -42, 23, 24, -40, 26, -38, 30, 31, -33, 34, 35, -28, -27, -20, -19, -6, -2}), frozenset({5, 6, 15, 16, 18, -42, 23, 24, -40, 26, -38, 30, 31, -33, 34, 35, -28, -27, -20, -19, -9, -2}), frozenset({2, 9, 15, 18, 19, -42, 23, 24, -40, 26, -38, 30, 31, -33, 34, 35, -28, -27, -20, -16, -6, -5}), frozenset({5, 9, 16, 18, 19, -42, 23, 24, -40, -38, 27, 30, 31, -33, 34, 35, -28, -26, -20, -15, -6, -2}), frozenset({5, 9, 10, 11, 12, 15, 17, 19, -42, 24, -39, 26, -40, 31, -33, 34, 36, -28, -27, -18, -13, -6, -2}), frozenset({5, 9, 10, 11, 12, 17, 18, 19, -42, 24, -39, 26, -40, 31, -33, 34, 36, -28, -27, -15, -13, -6, -2}), frozenset({2, 5, 6, 8, 16, 18, 19, -42, 23, -41, -38, 30, 31, 32, 33, -34, 35, -28, 37, -20, -15, -9, -4}), frozenset({4, 5, 8, 9, 16, 18, 19, -42, 23, -41, -38, 28, 30, 31, -33, -32, 34, 35, 37, -20, -15, -6, -2}), frozenset({4, 5, 8, 9, 15, 16, 19, -42, 23, -41, -38, -37, 28, 30, 31, -32, 33, 34, 35, -20, -18, -6, -2}), frozenset({4, 5, 6, 8, 16, 18, 19, -42, 23, -41, -38, -37, 30, 31, 32, 33, 34, 35, -28, -20, -15, -9, -2}), frozenset({4, 5, 6, 8, 15, 16, 18, 20, -42, -41, -38, 28, 30, 31, -33, -32, 34, 35, 37, -23, -19, -9, -2}), frozenset({4, 5, 8, 9, 16, 18, 19, -42, 23, -41, -38, -37, 30, 31, 32, 33, 34, 35, -28, -20, -15, -6, -2}), frozenset({2, 5, 8, 9, 16, 18, 19, -42, 23, -41, -38, 30, 31, 32, -33, 34, 35, -28, 37, -20, -15, -6, -4}), frozenset({4, 5, 6, 8, 16, 18, 19, 20, -42, -41, -38, -37, 30, 31, 32, 33, 34, 35, -28, -23, -15, -9, -2}), frozenset({4, 5, 6, 9, 16, 18, 19, -42, 23, -41, -38, 30, 31, 32, -33, 34, 35, -28, 37, -20, -15, -8, -2}), frozenset({2, 4, 6, 9, 15, 18, 19, -42, 23, -41, -38, 30, 31, 32, -33, 34, 35, -28, 37, -20, -16, -8, -5}), frozenset({2, 5, 6, 8, 16, 18, 19, -42, 23, -41, -38, 30, 31, 32, -33, 34, 35, -28, 37, -20, -15, -9, -4}), frozenset({4, 5, 6, 8, 16, 18, 19, -42, 23, -41, -38, 28, 30, 31, -33, -32, 34, 35, 37, -20, -15, -9, -2}), frozenset({4, 5, 6, 8, 15, 16, 18, -42, 23, -41, -38, -37, 30, 31, 32, 33, 34, 35, -28, -20, -19, -9, -2}), frozenset({4, 5, 6, 9, 15, 16, 19, -42, 23, -41, -38, 30, 31, 32, -33, 34, 35, -28, 37, -20, -18, -8, -2}), frozenset({4, 5, 6, 9, 11, 12, 13, 17, 18, 19, -42, -41, -39, -36, 31, 32, 33, 34, -28, 37, -15, -10, -8, -2}), frozenset({5, 6, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, -42, 23, -40, 25, -41, 29, 30, 31, -33, 34, 35, 36, -28, -22, -15, -10, -9, -2}), frozenset({5, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, -40, 25, -41, -42, 28, 30, 31, -33, 34, 35, 36, -29, -20, -15, -10, -6, -2}), frozenset({2, 9, 16, 18, 19, -42, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -15, -6, -5}), frozenset({5, 6, 16, 18, 19, 20, -42, -41, -40, -38, 28, 30, -33, -31, 34, 35, -23, -15, -9, -2}), frozenset({5, 6, 16, 18, 19, -42, 23, -40, -41, -38, 30, 31, -34, 33, 35, -28, -20, -15, -9, -2}), frozenset({5, 6, 16, 18, 19, -42, 23, -40, -41, -38, 28, -35, 30, 33, 34, -31, -20, -15, -9, -2}), frozenset({5, 6, 15, 16, 19, -42, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -18, -9, -2}), frozenset({5, 6, 16, 18, 19, 20, -42, -41, -40, -38, 30, 31, -33, 34, 35, -28, -23, -15, -9, -2}), frozenset({5, 9, 16, 18, 19, -42, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -15, -6, -2}), frozenset({5, 9, 16, 18, 19, -42, 23, -40, -41, -38, 30, 31, -34, 33, 35, -28, -20, -15, -6, -2}), frozenset({5, 6, 16, 18, 19, -42, 23, -40, -41, -38, 28, 30, -33, -31, 34, 35, -20, -15, -9, -2}), frozenset({5, 6, 16, 18, 19, -42, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -15, -9, -2}), frozenset({5, 6, 15, 16, 18, 20, -42, -41, -40, -38, 30, 31, -33, 34, 35, -28, -23, -19, -9, -2}), frozenset({2, 6, 16, 18, 19, -42, 23, -40, -41, -38, 28, 30, -34, 33, -31, 35, -20, -15, -9, -5}), frozenset({5, 9, 15, 16, 18, -42, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -19, -6, -2}), frozenset({5, 9, 15, 18, 19, -42, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -16, -6, -2}), frozenset({5, 6, 16, 18, 19, -42, 23, -40, -41, -38, 28, 31, -33, 34, 35, -30, -20, -15, -9, -2}), frozenset({5, 9, 15, 16, 19, -42, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -18, -6, -2}), frozenset({2, 6, 16, 18, 19, -42, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -15, -9, -5}), frozenset({5, 9, 15, 18, 19, -42, 23, -40, -41, -38, 28, 31, -33, 34, 35, -30, -20, -16, -6, -2}), frozenset({5, 9, 15, 16, 18, -42, 23, -40, -41, -38, 28, 31, -33, 34, 35, -30, -20, -19, -6, -2}), frozenset({5, 6, 15, 16, 19, 20, -42, -41, -40, -38, -35, 30, 31, 33, 34, -28, -23, -18, -9, -2}), frozenset({5, 6, 16, 18, 19, -42, 23, -40, -41, -38, 28, 30, -34, 33, -31, 35, -20, -15, -9, -2}), frozenset({5, 9, 16, 18, 19, 20, -42, -41, -40, -38, 30, 31, -34, 33, 35, -28, -23, -15, -6, -2}), frozenset({2, 9, 16, 18, 19, -42, 23, -40, -41, -38, 30, 31, -34, 33, 35, -28, -20, -15, -6, -5}), frozenset({5, 9, 16, 18, 19, -42, 23, -40, -41, -38, 28, 31, -33, 34, 35, -30, -20, -15, -6, -2}), frozenset({5, 9, 16, 18, 19, -42, 23, -40, -41, -38, 28, 30, -33, -31, 34, 35, -20, -15, -6, -2}), frozenset({5, 6, 10, 11, 13, 17, 18, 19, -42, -41, -40, -39, 31, -33, 34, 36, -28, -15, -12, -9, -2}), frozenset({5, 9, 10, 12, 13, 17, 18, 19, -42, -41, -40, -39, 31, -33, 34, 36, -28, -15, -11, -6, -2}), frozenset({5, 9, 11, 12, 13, 17, 18, 19, -42, -41, -40, -39, -36, 31, 33, 34, -28, -15, -10, -6, -2}), frozenset({2, 6, 10, 11, 12, 17, 18, 19, -42, -41, -40, -39, 31, -33, 34, 36, -28, -15, -13, -9, -5}), frozenset({5, 6, 10, 11, 13, 17, 18, 19, -42, -41, -40, -39, -34, 31, 33, 36, -28, -15, -12, -9, -2}), frozenset({5, 9, 10, 12, 13, 15, 18, 19, -42, -41, -40, -39, 28, -33, -31, 34, 36, -17, -11, -6, -2}), frozenset({2, 6, 11, 12, 13, 15, 18, 19, -42, -41, -40, -39, -34, 31, 33, 36, -28, -17, -10, -9, -5}), frozenset({5, 6, 11, 12, 13, 15, 18, 19, -42, -41, -40, -39, 31, -33, 34, 36, -28, -17, -10, -9, -2}), frozenset({5, 9, 10, 12, 13, 17, 18, 19, -42, -41, -40, -39, -36, 31, 33, 34, -28, -15, -11, -6, -2}), frozenset({5, 9, 11, 12, 13, 15, 18, 19, -42, -41, -40, -39, 31, -33, 34, 36, -28, -17, -10, -6, -2}), frozenset({5, 6, 10, 11, 13, 15, 17, 19, -42, -41, -40, -39, 31, -33, 34, 36, -28, -18, -12, -9, -2})]
82	itemsets left after W operation 	: [frozenset({19, 43, 5}), frozenset({2, 6, 7, 10, 11, 12, 14, 16, 17, 18, 21, 22, 23, 24, 26, 27, 29, 30, 31, 33, 34, 35, -43, -40, -36, -28, -25, -20, -15, -13, -9, -3}), frozenset({3, 6, 9, 15, 16, -43, 23, 24, -40, -38, 27, 30, 31, -33, 34, 35, -28, -26, -20, -18, -7, -2}), frozenset({3, 6, 9, 10, 12, 13, 15, 18, -43, 24, -39, 26, -40, 31, -33, 34, 36, -28, -27, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 16, 18, -43, 23, -41, -38, -37, 30, 31, 32, 33, 34, 35, -28, -20, -15, -7, -2}), frozenset({3, 6, 9, 11, 12, 13, 14, 16, 17, 18, 20, -43, 22, 23, -40, 25, -41, 29, 30, 31, -33, 34, 35, 36, -28, -21, -15, -10, -7, -2}), frozenset({2, 6, 7, 16, 18, -43, 23, -40, -41, -38, 28, 30, -33, -31, 34, 35, -20, -15, -9, -3}), frozenset({2, 6, 7, 16, 18, -43, 23, -40, -41, -38, 28, 30, -34, 33, -31, 35, -20, -15, -9, -3}), frozenset({3, 6, 9, 16, 18, -43, 23, -40, -41, -38, 30, 31, -34, 33, 35, -28, -20, -15, -7, -2}), frozenset({2, 7, 9, 16, 18, -43, 23, -40, -41, -38, 28, 30, -34, 33, -31, 35, -20, -15, -6, -3}), frozenset({2, 6, 9, 16, 18, -43, 23, -40, -41, -38, -35, 30, 31, 33, 34, -28, -20, -15, -7, -3}), frozenset({3, 6, 9, 16, 18, -43, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -15, -7, -2}), frozenset({2, 6, 7, 16, 18, -43, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -15, -9, -3}), frozenset({2, 7, 9, 16, 18, -43, 23, -40, -41, -38, 28, 30, -33, -31, 34, 35, -20, -15, -6, -3}), frozenset({2, 7, 9, 16, 18, -43, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -15, -6, -3}), frozenset({2, 6, 9, 15, 16, -43, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -18, -7, -3}), frozenset({2, 7, 9, 10, 12, 13, 17, 18, -43, -41, -40, -39, 31, -33, 34, 36, -28, -15, -11, -6, -3}), frozenset({2, 8, 9, 16, 18, -43, -42, 23, 24, -38, 27, 28, 30, -33, 32, -31, 34, 35, 37, -26, -20, -15, -6, -4}), frozenset({9, 11, 12, 13, 14, 16, 17, 18, 20, -43, 22, 23, 24, 25, -42, 27, -40, 29, 30, 31, -33, 34, 35, 36, -28, -26, -21, -15, -10, -6, -2}), frozenset({6, 15, 16, -43, -42, 23, 24, -40, 26, -38, 30, 31, -33, 34, 35, -28, -27, -20, -18, -9, -2}), frozenset({6, 16, 18, -43, -42, 23, 24, -40, 26, -38, 30, 31, -33, 34, 35, -28, -27, -20, -15, -9, -2}), frozenset({9, 15, 16, -43, -42, 23, 24, -40, -38, 27, 30, 31, -33, 34, 35, -28, -26, -20, -18, -6, -2}), frozenset({9, 15, 16, -43, -42, 23, 24, -40, 26, -38, 30, 31, -33, 34, 35, -28, -27, -20, -18, -6, -2}), frozenset({6, 16, 18, -43, -42, 23, 24, -40, -38, 27, 30, 31, -33, 34, 35, -28, -26, -20, -15, -9, -2}), frozenset({9, 16, 18, -43, -42, 23, 24, -40, -38, 27, 30, 31, -33, 34, 35, -28, -26, -20, -15, -6, -2}), frozenset({9, 10, 11, 12, 15, 17, -43, -42, 24, -39, 26, -40, 31, -33, 34, 36, -28, -27, -18, -13, -6, -2}), frozenset({9, 10, 11, 12, 17, 18, -43, -42, 24, -39, 26, -40, 31, -33, 34, 36, -28, -27, -15, -13, -6, -2}), frozenset({2, 6, 8, 16, 18, -43, -42, 23, -41, -38, 30, 31, 32, 33, -34, 35, -28, 37, -20, -15, -9, -4}), frozenset({4, 8, 9, 16, 18, -43, -42, 23, -41, -38, 28, 30, 31, -33, -32, 34, 35, 37, -20, -15, -6, -2}), frozenset({4, 8, 9, 15, 16, -43, -42, 23, -41, -38, -37, 28, 30, 31, -32, 33, 34, 35, -20, -18, -6, -2}), frozenset({4, 6, 8, 16, 18, -43, -42, 23, -41, -38, -37, 30, 31, 32, 33, 34, 35, -28, -20, -15, -9, -2}), frozenset({4, 8, 9, 16, 18, -43, -42, 23, -41, -38, -37, 30, 31, 32, 33, 34, 35, -28, -20, -15, -6, -2}), frozenset({2, 8, 9, 16, 18, -43, -42, 23, -41, -38, 30, 31, 32, -33, 34, 35, -28, 37, -20, -15, -6, -4}), frozenset({4, 6, 8, 16, 18, 20, -43, -42, -41, -38, -37, 30, 31, 32, 33, 34, 35, -28, -23, -15, -9, -2}), frozenset({4, 6, 9, 16, 18, -43, -42, 23, -41, -38, 30, 31, 32, -33, 34, 35, -28, 37, -20, -15, -8, -2}), frozenset({2, 6, 8, 16, 18, -43, -42, 23, -41, -38, 30, 31, 32, -33, 34, 35, -28, 37, -20, -15, -9, -4}), frozenset({4, 6, 8, 16, 18, -43, -42, 23, -41, -38, 28, 30, 31, -33, -32, 34, 35, 37, -20, -15, -9, -2}), frozenset({4, 6, 9, 15, 16, -43, -42, 23, -41, -38, 30, 31, 32, -33, 34, 35, -28, 37, -20, -18, -8, -2}), frozenset({4, 6, 9, 11, 12, 13, 17, 18, -43, -42, -41, -39, -36, 31, 32, 33, 34, -28, 37, -15, -10, -8, -2}), frozenset({6, 11, 12, 13, 14, 16, 17, 18, 20, 21, -42, 23, -40, 25, -41, -43, 29, 30, 31, -33, 34, 35, 36, -28, -22, -15, -10, -9, -2}), frozenset({9, 11, 12, 13, 14, 16, 17, 18, 21, 22, 23, -40, 25, -41, -42, 28, -43, 30, 31, -33, 34, 35, 36, -29, -20, -15, -10, -6, -2}), frozenset({6, 16, 18, 20, -43, -42, -41, -40, -38, 28, 30, -33, -31, 34, 35, -23, -15, -9, -2}), frozenset({6, 16, 18, -43, -42, 23, -40, -41, -38, 30, 31, -34, 33, 35, -28, -20, -15, -9, -2}), frozenset({6, 16, 18, -43, -42, 23, -40, -41, -38, 28, -35, 30, 33, 34, -31, -20, -15, -9, -2}), frozenset({6, 15, 16, -43, -42, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -18, -9, -2}), frozenset({6, 16, 18, 20, -43, -42, -41, -40, -38, 30, 31, -33, 34, 35, -28, -23, -15, -9, -2}), frozenset({9, 16, 18, -43, -42, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -15, -6, -2}), frozenset({9, 16, 18, -43, -42, 23, -40, -41, -38, 30, 31, -34, 33, 35, -28, -20, -15, -6, -2}), frozenset({6, 16, 18, -43, -42, 23, -40, -41, -38, 28, 30, -33, -31, 34, 35, -20, -15, -9, -2}), frozenset({6, 16, 18, -43, -42, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -15, -9, -2}), frozenset({9, 15, 18, -43, -42, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -16, -6, -2}), frozenset({6, 16, 18, -43, -42, 23, -40, -41, -38, 28, 31, -33, 34, 35, -30, -20, -15, -9, -2}), frozenset({9, 15, 16, -43, -42, 23, -40, -41, -38, 30, 31, -33, 34, 35, -28, -20, -18, -6, -2}), frozenset({9, 15, 18, -43, -42, 23, -40, -41, -38, 28, 31, -33, 34, 35, -30, -20, -16, -6, -2}), frozenset({6, 15, 16, 20, -43, -42, -41, -40, -38, -35, 30, 31, 33, 34, -28, -23, -18, -9, -2}), frozenset({6, 16, 18, -43, -42, 23, -40, -41, -38, 28, 30, -34, 33, -31, 35, -20, -15, -9, -2}), frozenset({9, 16, 18, 20, -43, -42, -41, -40, -38, 30, 31, -34, 33, 35, -28, -23, -15, -6, -2}), frozenset({9, 16, 18, -43, -42, 23, -40, -41, -38, 28, 31, -33, 34, 35, -30, -20, -15, -6, -2}), frozenset({9, 16, 18, -43, -42, 23, -40, -41, -38, 28, 30, -33, -31, 34, 35, -20, -15, -6, -2}), frozenset({6, 10, 11, 13, 17, 18, -43, -42, -41, -40, -39, 31, -33, 34, 36, -28, -15, -12, -9, -2}), frozenset({9, 10, 12, 13, 17, 18, -43, -42, -41, -40, -39, 31, -33, 34, 36, -28, -15, -11, -6, -2}), frozenset({9, 11, 12, 13, 17, 18, -43, -42, -41, -40, -39, -36, 31, 33, 34, -28, -15, -10, -6, -2}), frozenset({6, 10, 11, 13, 17, 18, -43, -42, -41, -40, -39, -34, 31, 33, 36, -28, -15, -12, -9, -2}), frozenset({9, 10, 12, 13, 15, 18, -43, -42, -41, -40, -39, 28, -33, -31, 34, 36, -17, -11, -6, -2}), frozenset({6, 11, 12, 13, 15, 18, -43, -42, -41, -40, -39, 31, -33, 34, 36, -28, -17, -10, -9, -2}), frozenset({9, 10, 12, 13, 17, 18, -43, -42, -41, -40, -39, -36, 31, 33, 34, -28, -15, -11, -6, -2}), frozenset({9, 11, 12, 13, 15, 18, -43, -42, -41, -40, -39, 31, -33, 34, 36, -28, -17, -10, -6, -2}), frozenset({6, 10, 11, 13, 15, 17, -43, -42, -41, -40, -39, 31, -33, 34, 36, -28, -18, -12, -9, -2})]
60	itemsets left after W operation 	: [frozenset({34, 44, 31}), frozenset({4, 5, 6, 8, 15, 16, 18, -44, -42, 23, 24, 26, -38, 28, 30, -33, -32, 35, 37, -27, -20, -19, -9, -2}), frozenset({2, 9, 16, 18, 19, -44, -42, 23, 24, -40, 26, -38, 30, -33, 35, -28, -27, -20, -15, -6, -5}), frozenset({5, 9, 15, 16, 18, -44, -42, 23, 24, -40, 26, -38, 30, -33, 35, -28, -27, -20, -19, -6, -2}), frozenset({5, 6, 15, 16, 18, -44, -42, 23, 24, -40, 26, -38, 30, -33, 35, -28, -27, -20, -19, -9, -2}), frozenset({2, 9, 15, 18, 19, -44, -42, 23, 24, -40, 26, -38, 30, -33, 35, -28, -27, -20, -16, -6, -5}), frozenset({4, 5, 6, 8, 15, 16, 18, 20, -44, -42, -41, -38, 28, 30, -33, -32, 35, 37, -23, -19, -9, -2}), frozenset({2, 4, 6, 9, 15, 18, 19, -44, -42, 23, -41, -38, 30, -33, 32, 35, -28, 37, -20, -16, -8, -5}), frozenset({4, 5, 6, 8, 15, 16, 18, -44, -42, 23, -41, -38, -37, 30, 32, 33, 35, -28, -20, -19, -9, -2}), frozenset({2, 9, 16, 18, 19, -44, -42, 23, -40, -41, -38, 30, -33, 35, -28, -20, -15, -6, -5}), frozenset({5, 6, 15, 16, 18, 20, -44, -42, -41, -40, -38, 30, -33, 35, -28, -23, -19, -9, -2}), frozenset({5, 9, 15, 16, 18, -44, -42, 23, -40, -41, -38, 30, -33, 35, -28, -20, -19, -6, -2}), frozenset({2, 6, 16, 18, 19, -44, -42, 23, -40, -41, -38, 30, -33, 35, -28, -20, -15, -9, -5}), frozenset({5, 9, 15, 16, 18, -44, -42, 23, -40, -41, -38, 28, -33, -30, 35, -20, -19, -6, -2}), frozenset({2, 6, 10, 11, 12, 17, 18, 19, -44, -42, -41, -40, -39, -33, 36, -28, -15, -13, -9, -5}), frozenset({2, 6, 7, 10, 11, 12, 14, 16, 17, 18, -44, 21, 22, 23, 24, -43, 26, 27, -40, 29, 30, -36, 33, 35, -28, -25, -20, -15, -13, -9, -3}), frozenset({3, 6, 9, 15, 16, -44, -43, 23, 24, -40, -38, 27, 30, -33, 35, -28, -26, -20, -18, -7, -2}), frozenset({3, 6, 9, 10, 12, 13, 15, 18, -44, -43, 24, -39, 26, -40, -33, 36, -28, -27, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 16, 18, -44, -43, 23, -41, -38, -37, 30, 32, 33, 35, -28, -20, -15, -7, -2}), frozenset({3, 6, 9, 11, 12, 13, 14, 16, 17, 18, 20, -43, 22, 23, -40, 25, -41, -44, 29, 30, -33, 35, 36, -28, -21, -15, -10, -7, -2}), frozenset({2, 6, 9, 16, 18, -44, -43, 23, -40, -41, -38, -35, 30, 33, -28, -20, -15, -7, -3}), frozenset({3, 6, 9, 16, 18, -44, -43, 23, -40, -41, -38, 30, -33, 35, -28, -20, -15, -7, -2}), frozenset({2, 6, 7, 16, 18, -44, -43, 23, -40, -41, -38, 30, -33, 35, -28, -20, -15, -9, -3}), frozenset({2, 7, 9, 16, 18, -44, -43, 23, -40, -41, -38, 30, -33, 35, -28, -20, -15, -6, -3}), frozenset({2, 6, 9, 15, 16, -44, -43, 23, -40, -41, -38, 30, -33, 35, -28, -20, -18, -7, -3}), frozenset({2, 7, 9, 10, 12, 13, 17, 18, -44, -43, -41, -40, -39, -33, 36, -28, -15, -11, -6, -3}), frozenset({9, 11, 12, 13, 14, 16, 17, 18, 20, -43, 22, 23, 24, 25, -42, 27, -40, 29, 30, -33, 35, 36, -28, -26, -44, -21, -15, -10, -6, -2}), frozenset({6, 15, 16, -44, -43, -42, 23, 24, -40, 26, -38, 30, -33, 35, -28, -27, -20, -18, -9, -2}), frozenset({6, 16, 18, -44, -43, -42, 23, 24, -40, 26, -38, 30, -33, 35, -28, -27, -20, -15, -9, -2}), frozenset({9, 15, 16, -44, -43, -42, 23, 24, -40, -38, 27, 30, -33, 35, -28, -26, -20, -18, -6, -2}), frozenset({9, 15, 16, -44, -43, -42, 23, 24, -40, 26, -38, 30, -33, 35, -28, -27, -20, -18, -6, -2}), frozenset({6, 16, 18, -44, -43, -42, 23, 24, -40, -38, 27, 30, -33, 35, -28, -26, -20, -15, -9, -2}), frozenset({9, 16, 18, -44, -43, -42, 23, 24, -40, -38, 27, 30, -33, 35, -28, -26, -20, -15, -6, -2}), frozenset({9, 10, 11, 12, 15, 17, -44, -43, -42, 24, -39, 26, -40, -33, 36, -28, -27, -18, -13, -6, -2}), frozenset({9, 10, 11, 12, 17, 18, -44, -43, -42, 24, -39, 26, -40, -33, 36, -28, -27, -15, -13, -6, -2}), frozenset({4, 8, 9, 16, 18, -44, -43, -42, 23, -41, -38, 28, 30, -33, -32, 35, 37, -20, -15, -6, -2}), frozenset({4, 8, 9, 15, 16, -44, -43, -42, 23, -41, -38, -37, 28, 30, -32, 33, 35, -20, -18, -6, -2}), frozenset({4, 6, 8, 16, 18, -44, -43, -42, 23, -41, -38, -37, 30, 32, 33, 35, -28, -20, -15, -9, -2}), frozenset({4, 8, 9, 16, 18, -44, -43, -42, 23, -41, -38, -37, 30, 32, 33, 35, -28, -20, -15, -6, -2}), frozenset({2, 8, 9, 16, 18, -44, -43, -42, 23, -41, -38, 30, -33, 32, 35, -28, 37, -20, -15, -6, -4}), frozenset({4, 6, 8, 16, 18, 20, -43, -42, -41, -44, -38, -37, 30, 32, 33, 35, -28, -23, -15, -9, -2}), frozenset({4, 6, 9, 16, 18, -44, -43, -42, 23, -41, -38, 30, -33, 32, 35, -28, 37, -20, -15, -8, -2}), frozenset({2, 6, 8, 16, 18, -44, -43, -42, 23, -41, -38, 30, -33, 32, 35, -28, 37, -20, -15, -9, -4}), frozenset({4, 6, 8, 16, 18, -44, -43, -42, 23, -41, -38, 28, 30, -33, -32, 35, 37, -20, -15, -9, -2}), frozenset({4, 6, 9, 15, 16, -44, -43, -42, 23, -41, -38, 30, -33, 32, 35, -28, 37, -20, -18, -8, -2}), frozenset({4, 6, 9, 11, 12, 13, 17, 18, -44, -43, -42, -41, -39, -36, 32, 33, -28, 37, -15, -10, -8, -2}), frozenset({6, 11, 12, 13, 14, 16, 17, 18, 20, 21, -42, 23, -40, 25, -41, -43, -44, 29, 30, -33, 35, 36, -28, -22, -15, -10, -9, -2}), frozenset({9, 11, 12, 13, 14, 16, 17, 18, -44, 21, 22, 23, -40, 25, -41, -42, 28, -43, 30, -33, 35, 36, -29, -20, -15, -10, -6, -2}), frozenset({6, 15, 16, -44, -43, -42, 23, -40, -41, -38, 30, -33, 35, -28, -20, -18, -9, -2}), frozenset({6, 16, 18, 20, -43, -42, -41, -40, -44, -38, 30, -33, 35, -28, -23, -15, -9, -2}), frozenset({9, 16, 18, -44, -43, -42, 23, -40, -41, -38, 30, -33, 35, -28, -20, -15, -6, -2}), frozenset({6, 16, 18, -44, -43, -42, 23, -40, -41, -38, 30, -33, 35, -28, -20, -15, -9, -2}), frozenset({9, 15, 18, -44, -43, -42, 23, -40, -41, -38, 30, -33, 35, -28, -20, -16, -6, -2}), frozenset({6, 16, 18, -44, -43, -42, 23, -40, -41, -38, 28, -33, -30, 35, -20, -15, -9, -2}), frozenset({9, 15, 16, -44, -43, -42, 23, -40, -41, -38, 30, -33, 35, -28, -20, -18, -6, -2}), frozenset({9, 15, 18, -44, -43, -42, 23, -40, -41, -38, 28, -33, -30, 35, -20, -16, -6, -2}), frozenset({6, 15, 16, 20, -43, -42, -41, -40, -44, -38, -35, 30, 33, -28, -23, -18, -9, -2}), frozenset({9, 16, 18, -44, -43, -42, 23, -40, -41, -38, 28, -33, -30, 35, -20, -15, -6, -2}), frozenset({6, 10, 11, 13, 17, 18, -44, -43, -42, -41, -40, -39, -33, 36, -28, -15, -12, -9, -2}), frozenset({9, 10, 12, 13, 17, 18, -44, -43, -42, -41, -40, -39, -33, 36, -28, -15, -11, -6, -2}), frozenset({9, 11, 12, 13, 17, 18, -44, -43, -42, -41, -40, -39, -36, 33, -28, -15, -10, -6, -2}), frozenset({6, 11, 12, 13, 15, 18, -44, -43, -42, -41, -40, -39, -33, 36, -28, -17, -10, -9, -2}), frozenset({9, 10, 12, 13, 17, 18, -44, -43, -42, -41, -40, -39, -36, 33, -28, -15, -11, -6, -2}), frozenset({9, 11, 12, 13, 15, 18, -44, -43, -42, -41, -40, -39, -33, 36, -28, -17, -10, -6, -2}), frozenset({6, 10, 11, 13, 15, 17, -44, -43, -42, -41, -40, -39, -33, 36, -28, -18, -12, -9, -2})]
Initial DL				: 109019.69407604229
Final DL				: 16759.846576132237
Compression (wrt me)	: 0.8462677159555952
Operator Counters		: {'D': 0, 'W': 7, 'V': 0, 'S': 0, 'R': 0, 'T': 0}
Misle Learning Runtime	: 32.82213807106018


[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([32, 30, 19])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {32: False, 30: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 17, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {5: False, 17: False, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 12, 15])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {6: True, 12: False, 15: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 24, 25])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {13: False, 24: True, 25: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 21, 36])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {8: False, 21: False, 36: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 29, 19])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {6: True, 29: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([34, 18, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {34: False, 18: False, 14: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 31, 20])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {6: True, 31: False, 20: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 32, 36])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {3: False, 32: False, 36: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 27, 37])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {6: True, 27: False, 37: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 18, 11])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {15: True, 18: False, 11: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 18, 25])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {16: False, 18: False, 25: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 18, 30])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {14: False, 18: False, 30: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 22, 25])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {2: True, 22: False, 25: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 33, 26])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 33: True, 26: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 31, 10])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 31: False, 10: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 18, 34])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 18: False, 34: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([18, 21, 25])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {18: False, 21: False, 25: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([34, 26, 11])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {34: False, 26: False, 11: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([35, 4, 2])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {35: False, 4: False, 2: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([29, 32, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {29: False, 32: False, 14: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 26, 34])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: False, 26: False, 34: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 19, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {5: False, 19: False, 14: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 8, 9])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 8: False, 9: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 28, 18])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: False, 28: True, 18: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 37, 16])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {5: False, 37: False, 16: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 28, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {9: False, 28: True, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 31, 3])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 31: False, 3: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([29, 37, 27])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {29: False, 37: False, 27: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 20, 16])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {21: False, 20: True, 16: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 25, 19])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {5: False, 25: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([32, 16, 3])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {32: False, 16: False, 3: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 22, 10])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {9: False, 22: False, 10: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 28, 5])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: False, 28: True, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 24, 4])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {11: False, 24: True, 4: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([32, 34, 20])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {32: False, 34: False, 20: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 34, 21])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {17: False, 34: False, 21: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([32, 27, 26])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {32: False, 27: False, 26: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([22, 35, 6])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {22: False, 35: False, 6: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 28, 10])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {15: True, 28: True, 10: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 27, 22])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {13: False, 27: False, 22: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 21, 13])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {23: False, 21: False, 13: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 35, 16])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {17: False, 35: False, 16: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 22, 25])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {2: True, 22: False, 25: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([29, 36, 32])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {29: False, 36: False, 32: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 14, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: False, 14: False, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 21, 5])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {26: False, 21: False, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 27, 16])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {13: False, 27: False, 16: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 22, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {28: True, 22: False, 8: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 34, 25])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {14: False, 34: False, 25: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 35, 10])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {30: False, 35: False, 10: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 19, 4])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {30: False, 19: False, 4: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 12, 13])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {6: True, 12: False, 13: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 16, 3])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {20: True, 16: False, 3: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 29, 17])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {20: True, 29: False, 17: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([29, 17, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {29: False, 17: False, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 23, 22])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 23: False, 22: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 20, 5])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: False, 20: True, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 23, 6])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 23: False, 6: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 34, 36])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {17: False, 34: False, 36: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 13, 34])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {5: False, 13: False, 34: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 37, 23])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {28: True, 37: False, 23: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 21, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 21: False, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 26, 37])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {13: False, 26: False, 37: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 21, 9])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {26: False, 21: False, 9: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 20, 35])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: False, 20: True, 35: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([29, 30, 12])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {29: False, 30: False, 12: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 36, 20])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {26: False, 36: False, 20: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([36, 26, 3])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {36: False, 26: False, 3: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([32, 31, 16])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {32: False, 31: False, 16: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 36, 3])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {5: False, 36: False, 3: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 21, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {31: False, 21: False, 14: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 5, 19])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {2: True, 5: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([32, 30, 3])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {32: False, 30: False, 3: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 12, 18])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {6: True, 12: False, 18: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 29, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {2: True, 29: False, 14: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 14, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {13: False, 14: False, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 29, 21])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {5: False, 29: False, 21: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 9, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {23: False, 9: False, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 33, 24])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {9: False, 33: True, 24: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([29, 16, 12])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {29: False, 16: False, 12: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 31, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {10: True, 31: False, 14: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([33, 16, 13])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {33: True, 16: False, 13: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([34, 20, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {34: False, 20: True, 14: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([18, 30, 35])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {18: False, 30: False, 35: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 17, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {20: True, 17: False, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 26, 37])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {10: True, 26: False, 37: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 19, 6])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 19: False, 6: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 26, 15])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 26: False, 15: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 6, 10])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {5: False, 6: True, 10: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 14, 6])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {9: False, 14: False, 6: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([34, 30, 25])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {34: False, 30: False, 25: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 25, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {15: True, 25: False, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([29, 12, 11])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {29: False, 12: False, 11: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([27, 34, 35])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {27: False, 34: False, 35: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 14, 5])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {23: False, 14: False, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([22, 25, 2])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {22: False, 25: False, 2: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 31, 34])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {10: True, 31: False, 34: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 23, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {6: True, 23: False, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([35, 21, 13])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {35: False, 21: False, 13: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 28, 24])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {25: False, 28: True, 24: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 21, 5])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {14: False, 21: False, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 12, 10])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {14: False, 12: False, 10: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 34, 16])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {5: False, 34: False, 16: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 28, 3])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {5: False, 28: True, 3: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793, 1.3862915940033793]
Min Score = 1.3862915940033793 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 21, 5])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 21: False, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 32, 5])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {28: True, 32: False, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([22, 24, 16])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {22: False, 24: True, 16: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 36, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {20: True, 36: False, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([27, 21, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {27: False, 21: False, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 20, 2])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: False, 20: True, 2: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 30, 10])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {19: False, 30: False, 10: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([32, 12, 3])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {32: False, 12: False, 3: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 26, 34])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {10: True, 26: False, 34: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 16, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {23: False, 16: False, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 10, 21])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 10: True, 21: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 24, 21])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {31: False, 24: True, 21: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 29, 5])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {28: True, 29: False, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([22, 23, 9])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {22: False, 23: False, 9: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 23, 9])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {24: True, 23: False, 9: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 13, 3])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {19: False, 13: False, 3: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 11, 6])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {16: False, 11: False, 6: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 31, 19])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {24: True, 31: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 19, 21])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {17: False, 19: False, 21: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 28, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {19: False, 28: True, 7: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 19, 37])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: False, 19: False, 37: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 37, 28])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {15: True, 37: False, 28: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 26, 35])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {10: True, 26: False, 35: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 21, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {2: True, 21: False, 8: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 13, 24])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 13: False, 24: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 18, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {9: False, 18: False, 14: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([32, 22, 4])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {32: False, 22: False, 4: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([35, 30, 13])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {35: False, 30: False, 13: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([35, 13, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {35: False, 13: False, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 17, 37])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {6: True, 17: False, 37: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([22, 17, 9])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {22: False, 17: False, 9: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 36, 27])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {26: False, 36: False, 27: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 36, 27])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {19: False, 36: False, 27: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([29, 25, 23])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {29: False, 25: False, 23: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 35, 36])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {11: False, 35: False, 36: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 27, 15])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {14: False, 27: False, 15: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 18, 17])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {19: False, 18: False, 17: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 10, 2])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 10: True, 2: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 22, 32])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {8: False, 22: False, 32: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 25, 22])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {17: False, 25: False, 22: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 17, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {2: True, 17: False, 14: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 26, 5])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: False, 26: False, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 27, 18])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {21: False, 27: False, 18: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([22, 32, 28])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {22: False, 32: False, 28: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 18, 16])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {13: False, 18: False, 16: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 17, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {24: True, 17: False, 14: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([35, 27, 25])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {35: False, 27: False, 25: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([32, 19, 11])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {32: False, 19: False, 11: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([33, 15, 6])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {33: True, 15: True, 6: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 37, 11])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {17: False, 37: False, 11: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 29, 23])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {17: False, 29: False, 23: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 18, 27])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {14: False, 18: False, 27: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([22, 30, 3])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {22: False, 30: False, 3: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([22, 33, 12])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {22: False, 33: True, 12: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481, 1.277262151557481]
Min Score = 1.277262151557481 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 27, 35])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {3: False, 27: False, 35: False}

Dataset				: pima.dat
Metric				: length
Minsups				: [3]
MF Accuracy			: [(0.89375, 0.63125, 160, 160)]
Mistle Accuracy		: [0.89375]
CNFAlgo Accuracy	: []
Randomized Accuracy	: [0.125]

# Test Examples		: 160
Mistle # Ties		: [(0, 0)]
CNFAlgo # Ties		: []
