>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 87
 Number of frequent closed itemsets: 17688
 Total time ~: 365 ms
>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 172
 Number of frequent closed itemsets: 16228
 Total time ~: 436 ms
Current Minsup[0.5] yields 17688 itemsets.
Top-k minsup for at least 10000 paterns = 0.5 or 44
1  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({2, 3, 4, 5, 7, 8, 9, 11, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 34, 36, 37, 38, 40, 41, 42, 44, -43, -39, -35, -33, -29, -27, -23, -19, -17, -13, -10, -6})}
DL of initial theory	: 59173.41314872611
9062	itemsets left after T operation 	: [frozenset({32, 34, 2, 26, -27, 5, -29, 8, 7, 4, 11, 15, -33, 28, 30, 31})]
2563	itemsets left after W operation 	: [frozenset({3, 4, 7, 11, 15, 25, 28, 30, 31, 32, -33, 34, -29, -27, 38, 42, 45}), frozenset({2, 5, 9, 10, 12, 13, 17, 18, -45, 20, 21, 22, -43, 24, -39, 26, -35, 36, 37, 40, 41, -23, 44, -19, -16, -14, -8, -6}), frozenset({2, 5, 9, 10, 13, 14, 17, 18, 19, -45, 21, 22, 23, -43, -40, 26, -36, 35, 37, 39, -24, 41, 44, -20, -16, -12, -8, -6}), frozenset({2, 5, 9, 10, 12, 14, 16, 18, 19, -44, 21, 22, 23, -41, -45, 26, -37, 35, 36, 39, 40, -24, 43, -20, -17, -13, -8, -6}), frozenset({2, 5, 8, 10, 12, 14, 16, 18, 19, 20, 21, -43, 23, 24, -41, -45, -35, 36, 37, -26, 39, 40, -22, 44, -17, -13, -9, -6}), frozenset({2, 6, 8, 10, 12, 14, 16, 18, 19, 20, 21, -44, -41, 24, -45, 26, -37, 35, 36, 39, 40, -23, -22, 43, -17, -13, -9, -5}), frozenset({2, 5, 8, 10, 12, 13, 16, 17, 19, 20, 21, -43, 23, 24, -40, -45, -37, 35, 36, -26, 39, 41, -22, 44, -18, -14, -9, -6}), frozenset({5, 6, 9, 10, 13, 14, 17, 18, 19, -45, 21, 22, 23, -43, -41, 26, -37, 35, 36, 39, 40, -24, 44, -20, -16, -12, -8, -2}), frozenset({2, 6, 8, 10, 12, 13, 16, 18, 19, -45, 21, 22, -43, 24, -41, 26, -37, 35, 36, 39, 40, -23, 44, -20, -17, -14, -9, -5}), frozenset({2, 6, 9, 10, 12, 14, 16, 18, 19, 20, -43, 22, -41, 24, -45, 26, -37, 35, 36, 39, 40, -23, -21, 44, -17, -13, -8, -5}), frozenset({2, 6, 8, 10, 12, 14, 16, 18, -45, 20, 21, 22, 23, -43, -40, 26, -37, 35, 36, 39, -24, 41, 44, -19, -17, -13, -9, -5}), frozenset({5, 6, 8, 9, 12, 14, 17, 18, 19, -45, 21, 22, -43, 24, -40, 26, -37, 35, 36, 39, 41, -23, 44, -20, -16, -13, -10, -2})]
70	itemsets left after T operation 	: [frozenset({32, 34, 36, -27, 5, 8, 11, 31, 15, 16, 28, -33})]
0	itemsets left after W operation 	: [frozenset({32, 2, 34, 4, -27, 7, 11, 46, 15, 26, 28, -33}), frozenset({3, 6, 9, 10, 13, 14, 17, 18, 19, 21, 22, 23, 25, 29, 31, 35, 36, 38, 39, 40, 41, 44, -46, -43, -42, -37, -30, -24, -20, -16, -12, -8, -5}), frozenset({3, 5, 9, 10, 13, 14, 16, 18, 19, 20, 22, 23, 24, 29, 30, 35, 37, 38, 39, 40, 42, 44, -46, -43, -41, -36, -31, -25, -21, -17, -12, -8, -6}), frozenset({-46, -29, 5, 8, 30, 31})]
# of frequent itemsets	: 0
Time of DCI Closed		: 0.32453298568725586
Initial DL				: 65811.93411125071
Final DL				: 11410.578213636149
Compression (wrt me)	: 0.8266184033681896
Operator Counters		: {'D': 0, 'W': 2, 'V': 0, 'S': 0, 'R': 0, 'T': 2}
Misle Learning Runtime	: 3.4762659072875977

Timeout of 20 seconds reached while mining patterns with minsup = 0.5
Current Minsup[0.75] yields 16228 itemsets.
Top-k minsup for at least 10000 paterns = 0.75 or 129
1  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({2, 3, 4, 5, 7, 8, 9, 11, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 34, 36, 37, 38, 40, 41, 42, 44, -43, -39, -35, -33, -29, -27, -23, -19, -17, -13, -10, -6})}
DL of initial theory	: 59173.41314872611
9999	itemsets left after T operation 	: [frozenset({32, -29, 36, 37, 38, 7, 40, 41, 42, 4, 44, -43, -39, -35, 30, 31})]
7705	itemsets left after W operation 	: [frozenset({4, 5, 38, 7, 42, 11, 45, 18, 26}), frozenset({2, 3, 8, 9, 12, 14, 16, 17, 19, 20, 22, 24, 25, 28, 30, 31, 32, 34, 36, 37, 40, 41, 43, -45, -44, -39, -35, -33, -29, -27, -23, -21, -15, -13, -10, -6}), frozenset({2, 3, 9, 10, 13, 14, 15, 17, 19, 20, 21, 24, 25, 28, 29, 31, 32, 34, 36, 37, 40, 41, 44, -45, -43, -39, -35, -33, -30, -27, -23, -22, -16, -12, -8, -6}), frozenset({2, 3, 9, 10, 12, 14, 15, 17, 19, 21, 22, 24, 25, 28, 30, 31, 32, 34, 36, 37, 39, 41, 44, -45, -43, -40, -35, -33, -29, -27, -23, -20, -16, -13, -8, -6}), frozenset({2, 6, 8, 10, 12, 14, 16, 17, 19, 21, 22, 24, 25, 28, 29, 30, 32, 34, 35, 36, 40, 41, 44, -45, -43, -39, -37, -33, -31, -27, -23, -20, -15, -13, -9, -3}), frozenset({3, 6, 8, 10, 13, 14, 15, 17, 19, 20, 22, 24, 25, 28, 29, 30, 31, 34, 35, 37, 39, 40, 44, -45, -43, -41, -36, -33, -32, -27, -23, -21, -16, -12, -9, -2}), frozenset({3, 6, 8, 10, 12, 14, 15, 17, 20, 21, 22, 24, 25, 28, 29, 30, 32, 34, 35, 36, 40, 41, 44, -45, -43, -39, -37, -33, -31, -27, -23, -19, -16, -13, -9, -2}), frozenset({2, 6, 8, 9, 12, 13, 15, 17, 19, 20, 22, 24, 25, 28, 30, 31, 32, 34, 36, 37, 39, 41, 44, -45, -43, -40, -35, -33, -29, -27, -23, -21, -16, -14, -10, -3}), frozenset({2, 6, 8, 10, 13, 14, 15, 17, 19, 20, 21, 24, 25, 28, 29, 31, 32, 34, 36, 37, 40, 41, 44, -45, -43, -39, -35, -33, -30, -27, -23, -22, -16, -12, -9, -3}), frozenset({3, 6, 8, 10, 12, 14, 15, 17, 20, 21, 22, 24, 25, 28, 29, 30, 31, 34, 35, 36, 40, 41, 43, -45, -44, -39, -37, -33, -32, -27, -23, -19, -16, -13, -9, -2}), frozenset({2, 3, 8, 9, 12, 14, 16, 17, 19, 21, 22, 24, 25, 28, 30, 31, 32, 34, 36, 37, 39, 41, 44, -45, -43, -40, -35, -33, -29, -27, -23, -20, -15, -13, -10, -6}), frozenset({3, 6, 8, 10, 12, 14, 15, 16, 20, 21, 22, 24, 25, 28, 29, 30, 32, 34, 35, 36, 40, 41, 44, -45, -43, -39, -37, -33, -31, -27, -23, -19, -17, -13, -9, -2}), frozenset({3, 6, 9, 10, 13, 14, 16, 17, 19, 21, 22, 24, 25, 28, 29, 30, 31, 34, 35, 37, 40, 41, 44, -45, -43, -39, -36, -33, -32, -27, -23, -20, -15, -12, -8, -2}), frozenset({2, 3, 8, 9, 12, 14, 16, 17, 19, 20, 22, 24, 25, 28, 30, 31, 32, 34, 36, 37, 39, 40, 44, -45, -43, -41, -35, -33, -29, -27, -23, -21, -15, -13, -10, -6}), frozenset({2, 3, 8, 10, 13, 14, 15, 16, 19, 20, 22, 24, 25, 27, 30, 31, 32, 34, 36, 37, 39, 41, 44, -45, -43, -40, -35, -33, -29, -28, -23, -21, -17, -12, -9, -6}), frozenset({3, 6, 8, 9, 12, 14, 15, 16, 20, 21, 22, 24, 25, 28, 29, 30, 31, 34, 35, 37, 40, 41, 43, -45, -44, -39, -36, -33, -32, -27, -23, -19, -17, -13, -10, -2}), frozenset({2, 3, 6, 8, 10, 13, 14, 15, 16, 19, 20, 21, 23, 24, 27, 30, 31, 32, 33, 36, 37, 40, 41, 43, -45, -44, -39, -35, -34, -29, -28, -25, -22, -17, -12, -9}), frozenset({3, 6, 8, 10, 12, 14, 15, 16, 20, 21, 22, 24, 25, 28, 29, 31, 32, 34, 35, 37, 40, 41, 43, -45, -44, -39, -36, -33, -30, -27, -23, -19, -17, -13, -9, -2}), frozenset({3, 6, 8, 10, 12, 14, 15, 17, 19, 21, 22, 24, 25, 28, 29, 31, 32, 34, 35, 37, 39, 41, 43, -45, -44, -40, -36, -33, -30, -27, -23, -20, -16, -13, -9, -2}), frozenset({2, 3, 8, 9, 13, 14, 15, 16, 19, 20, 21, 24, 25, 27, 30, 31, 32, 34, 36, 37, 39, 41, 44, -45, -43, -40, -35, -33, -29, -28, -23, -22, -17, -12, -10, -6}), frozenset({3, 6, 8, 10, 12, 14, 15, 17, 20, 21, 22, 24, 25, 28, 29, 30, 32, 34, 35, 36, 40, 41, 43, -45, -44, -39, -37, -33, -31, -27, -23, -19, -16, -13, -9, -2}), frozenset({3, 6, 8, 9, 12, 14, 16, 17, 19, 21, 22, 24, 25, 28, 29, 30, 32, 34, 35, 37, 40, 41, 43, -45, -44, -39, -36, -33, -31, -27, -23, -20, -15, -13, -10, -2}), frozenset({3, 6, 8, 10, 12, 14, 15, 16, 19, 21, 22, 24, 25, 28, 29, 30, 32, 34, 35, 36, 39, 40, 43, -45, -44, -41, -37, -33, -31, -27, -23, -20, -17, -13, -9, -2}), frozenset({2, 6, 9, 10, 13, 14, 16, 17, 19, 20, 22, 24, 25, 28, 29, 31, 32, 34, 36, 37, 40, 41, 44, -45, -43, -39, -35, -33, -30, -27, -23, -21, -15, -12, -8, -3}), frozenset({2, 3, 6, 9, 10, 13, 14, 16, 17, 19, 20, 22, 24, 25, 28, 30, 31, 32, 34, 35, 37, 40, 41, 44, -45, -43, -39, -36, -33, -29, -27, -23, -21, -15, -12, -8}), frozenset({3, 6, 8, 10, 12, 14, 15, 17, 19, 21, 22, 24, 25, 28, 29, 30, 32, 34, 36, 37, 40, 41, 44, -45, -43, -39, -35, -33, -31, -27, -23, -20, -16, -13, -9, -2}), frozenset({2, 6, 8, 10, 12, 14, 15, 17, 19, 21, 22, 24, 25, 28, 30, 31, 32, 34, 35, 37, 40, 41, 44, -45, -43, -39, -36, -33, -29, -27, -23, -20, -16, -13, -9, -3}), frozenset({2, 3, 8, 10, 12, 14, 16, 17, 19, 20, 22, 24, 25, 28, 29, 31, 32, 34, 36, 37, 40, 41, 44, -45, -43, -39, -35, -33, -30, -27, -23, -21, -15, -13, -9, -6}), frozenset({2, 6, 8, 10, 12, 14, 15, 16, 19, 20, 21, 24, 25, 28, 29, 31, 32, 34, 36, 37, 40, 41, 44, -45, -43, -39, -35, -33, -30, -27, -23, -22, -17, -13, -9, -3}), frozenset({2, 3, 9, 10, 13, 14, 15, 16, 19, 20, 22, 24, 25, 28, 30, 31, 32, 34, 35, 37, 40, 41, 44, -45, -43, -39, -36, -33, -29, -27, -23, -21, -17, -12, -8, -6}), frozenset({2, 3, 8, 9, 12, 14, 15, 17, 19, 20, 21, 24, 25, 28, 30, 31, 32, 34, 36, 37, 40, 41, 43, -45, -44, -39, -35, -33, -29, -27, -23, -22, -16, -13, -10, -6}), frozenset({2, 3, 8, 10, 12, 13, 16, 17, 19, 20, 21, 24, 25, 28, 30, 31, 32, 34, 36, 37, 39, 40, 44, -45, -43, -41, -35, -33, -29, -27, -23, -22, -15, -14, -9, -6}), frozenset({3, 6, 8, 9, 12, 14, 16, 17, 20, 21, 22, 24, 25, 28, 29, 30, 32, 34, 35, 36, 39, 40, 44, -45, -43, -41, -37, -33, -31, -27, -23, -19, -15, -13, -10, -2}), frozenset({2, 3, 9, 10, 13, 14, 16, 17, 19, 21, 22, 24, 25, 28, 29, 30, 32, 34, 36, 37, 40, 41, 44, -45, -43, -39, -35, -33, -31, -27, -23, -20, -15, -12, -8, -6}), frozenset({3, 6, 8, 10, 12, 14, 15, 17, 19, 21, 22, 24, 25, 28, 29, 30, 32, 34, 35, 36, 40, 41, 43, -45, -44, -39, -37, -33, -31, -27, -23, -20, -16, -13, -9, -2})]
906	itemsets left after T operation 	: [frozenset({32, 36, 37, 38, 40, 41, 42, 44, -43, -39, -35, 30})]
1	itemsets left after W operation 	: [frozenset({36, 40, 41, 42, 44, 46, -43, -39, 30}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 31, 32, 34, 35, 38, -46, -37, -33, -29, -28, -26, -22, -18, -12, -9, -4}), frozenset({3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 28, 29, 31, 34, 35, 37, -46, -38, -33, -32, -27, -23, -19, -17, -12, -9, -2}), frozenset({32, -46, 37, 38, -35})]
# of frequent itemsets	: 0
Time of DCI Closed		: 0.3184468746185303
Initial DL				: 65811.93411125071
Final DL				: 9189.143088429166
Compression (wrt me)	: 0.8603726936075831
Operator Counters		: {'D': 0, 'W': 2, 'V': 0, 'S': 0, 'R': 0, 'T': 2}
Misle Learning Runtime	: 25.43324613571167


[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[5]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.041666666666666664, 0.0, 0.0]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 12, 6])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {10: False, 12: False, 6: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 13, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {20: False, 13: True, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.041666666666666664, 0.0, 0.041666666666666664, 0.0, 0.041666666666666664, 0.0, 0.041666666666666664]
Max Score = 0.041666666666666664 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 23])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {28: False, 21: False, 23: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.041666666666666664, 0.0, 0.041666666666666664, 0.0, 0.041666666666666664, 0.0, 0.041666666666666664]
Max Score = 0.041666666666666664 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 14])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {5: False, 7: False, 14: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 40, 32])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {20: False, 40: False, 32: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.041666666666666664, 0.041666666666666664, 0.0, 0.0, 0.041666666666666664, 0.041666666666666664]
Max Score = 0.041666666666666664 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 44])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {5: False, 30: False, 44: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.041666666666666664, 0.0, 0.041666666666666664, 0.0, 0.041666666666666664, 0.0, 0.041666666666666664]
Max Score = 0.041666666666666664 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 26])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {8: False, 14: False, 26: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.041666666666666664, 0.0, 0.041666666666666664, 0.0, 0.041666666666666664, 0.0, 0.041666666666666664]
Max Score = 0.041666666666666664 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 17])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {16: False, 10: False, 17: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 35, 21])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {23: True, 35: False, 21: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.041666666666666664, 0.041666666666666664, 0.041666666666666664, 0.041666666666666664]
Max Score = 0.041666666666666664 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([35, 21])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {31: False, 35: False, 21: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 40, 3])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {16: False, 40: False, 3: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.041666666666666664, 0.0, 0.041666666666666664, 0.0, 0.041666666666666664, 0.0, 0.041666666666666664]
Max Score = 0.041666666666666664 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 30])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {8: False, 9: True, 30: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([22, 26, 43])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {22: False, 26: False, 43: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.041666666666666664, 0.041666666666666664, 0.041666666666666664, 0.041666666666666664, 0.041666666666666664, 0.041666666666666664, 0.041666666666666664, 0.041666666666666664]
Max Score = 0.041666666666666664 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 9, 22])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 9: True, 22: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([44, 42, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {44: False, 42: False, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[3, 7]
[0.0, 0.0, 0.0, 0.041666666666666664, 0.0, 0.0, 0.0, 0.041666666666666664]
Max Score = 0.041666666666666664 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([38])
Tie Breaking Levels	: [3]; Predicted Values	: {11: False, 5: False, 38: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[4, 6]
[0.0, 0.0, 0.0, 0.0, 0.041666666666666664, 0.0, 0.041666666666666664, 0.0]
Max Score = 0.041666666666666664 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([38])
Tie Breaking Levels	: [3]; Predicted Values	: {33: True, 15: False, 38: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 18, 4])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 18: False, 4: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.041666666666666664, 0.041666666666666664, 0.0, 0.0, 0.041666666666666664, 0.041666666666666664]
Max Score = 0.041666666666666664 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 7])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {28: False, 20: False, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726, 0.36214470284237726]
Min Score = 0.36214470284237726 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.041666666666666664, 0.041666666666666664, 0.041666666666666664, 0.041666666666666664]
Max Score = 0.041666666666666664 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([35, 24])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {28: False, 35: False, 24: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 41, 28])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {24: False, 41: False, 28: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 36, 32])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {6: True, 36: False, 32: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 37, 29])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {8: False, 37: False, 29: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 13, 12])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 13: True, 12: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 42, 10])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: False, 42: False, 10: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 27, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: False, 27: True, 8: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([32, 43, 36])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {32: False, 43: True, 36: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 37, 28])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {3: False, 37: False, 28: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 43, 39])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {19: False, 43: True, 39: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 23, 3])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: False, 23: True, 3: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([44, 40, 20])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {44: False, 40: False, 20: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([43, 37, 30])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {43: True, 37: False, 30: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 23, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {8: False, 23: True, 14: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 8, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {16: False, 8: False, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 18, 15])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {21: False, 18: False, 15: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 26, 29])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {5: False, 26: False, 29: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 25, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {8: False, 25: False, 14: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([18, 33, 27])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {18: False, 33: True, 27: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 28, 12])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {16: False, 28: False, 12: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 38, 33])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {11: False, 38: False, 33: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 40, 31])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {21: False, 40: False, 31: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 25, 35])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {14: False, 25: False, 35: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 30, 25])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {11: False, 30: False, 25: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.33317417876241406, 0.33317417876241406, 0.33317417876241406, 0.33317417876241406, 0.33317417876241406, 0.33317417876241406, 0.33317417876241406, 0.33317417876241406]
Min Score = 0.33317417876241406 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 18, 44])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 18: False, 44: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 32, 21])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {19: False, 32: False, 21: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 14, 13])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {28: False, 14: False, 13: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([22, 23, 19])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {22: False, 23: True, 19: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 44, 43])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 44: False, 43: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 30, 44])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {26: False, 30: False, 44: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([37, 42, 36])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {37: False, 42: False, 36: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 39, 10])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {2: False, 39: True, 10: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[1, 5]
[0.3748408454290807, 0.33317417876241406, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.33317417876241406, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.33317417876241406 tied among 2/8 candidates.
[1, 5]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([7])
Tie Breaking Levels	: [3]; Predicted Values	: {27: True, 32: False, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 38, 16])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {11: False, 38: False, 16: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 31, 32])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {21: False, 31: False, 32: False}

[3, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.33317417876241406, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.33317417876241406]
Min Score = 0.33317417876241406 tied among 2/8 candidates.
[3, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([22])
Tie Breaking Levels	: [3]; Predicted Values	: {34: False, 8: False, 22: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.33317417876241406, 0.33317417876241406, 0.33317417876241406, 0.33317417876241406, 0.33317417876241406, 0.33317417876241406, 0.33317417876241406, 0.33317417876241406]
Min Score = 0.33317417876241406 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 26, 39])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {10: False, 26: False, 39: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 36, 25])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {3: False, 36: False, 25: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([36, 32, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {36: False, 32: False, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([40, 35, 5])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {40: False, 35: True, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 21, 43])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {6: True, 21: False, 43: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 20, 24])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 20: False, 24: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 31, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {15: False, 31: False, 14: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([37, 25, 22])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {37: False, 25: False, 22: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 38, 10])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {17: False, 38: False, 10: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([36, 40, 32])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {36: False, 40: False, 32: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 39, 24])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: False, 39: True, 24: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 41, 13])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {10: False, 41: False, 13: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 30, 4])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {13: True, 30: False, 4: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 42, 20])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {21: False, 42: False, 20: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 11, 25])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {9: True, 11: False, 25: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807, 0.3748408454290807]
Min Score = 0.3748408454290807 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 40, 19])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {3: False, 40: False, 19: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

Dataset				: dermatology.dat
Metric				: length
Minsups				: [3]
MF Accuracy			: [(0.625, 0.4861111111111111, 72, 72)]
Mistle Accuracy		: [0.625]
CNFAlgo Accuracy	: []
Randomized Accuracy	: [0.125]

# Test Examples		: 72
Mistle # Ties		: [(0, 0)]
CNFAlgo # Ties		: []
