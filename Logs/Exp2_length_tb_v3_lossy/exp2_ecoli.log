>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 11
 Number of frequent closed itemsets: 366
 Total time ~: 22 ms
>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 71
 Number of frequent closed itemsets: 31400
 Total time ~: 303 ms
Current Minsup[0.5] yields 183 itemsets.
Current Minsup[0.25] yields 336 itemsets.
Current Minsup[0.125] yields 355 itemsets.
Top-k minsup for at least 10000 paterns = 0.09090909090909091 or 1
5  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({3, 4, 5, 6, 8, 9, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -7, -2}), frozenset({3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -10, -2}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -11, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -8, -2}), frozenset({3, 4, 5, 6, 7, 8, 9, 10, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -11, -2})}
DL of initial theory	: 9561.90959613437
1	itemsets left after W operation 	: [frozenset({6, 9, 13, 15, 18, 21, 22, 23, 24, 25, 27, 28, -26, -20, -14, -12}), frozenset({3, 4, 5, -28, 7, 8, 10, -17, 16, 19, -11, -2}), frozenset({3, 4, 5, -28, 7, 8, 11, -16, 17, 19, -10, -2}), frozenset({3, 4, 5, -28, 8, 10, 11, -16, 17, 19, -7, -2}), frozenset({3, 4, 5, -28, 8, 10, 11, -19, 16, 17, -7, -2}), frozenset({2, 3, 4, -28, 8, 10, 11, -16, 17, 19, -7, -5}), frozenset({2, 3, 4, -28, 7, 8, 11, -16, 17, 19, -10, -5}), frozenset({3, 4, 5, -28, 7, 10, 11, -16, 17, 19, -8, -2}), frozenset({2, 3, -28, 5, 7, 8, 10, -16, 17, 19, -11, -4}), frozenset({3, 4, 5, -28, 7, 8, 10, -16, 17, 19, -11, -2}), frozenset({2, 4, 5, -28, 8, 10, 11, -16, 17, 19, -7, -3})]
0	itemsets left after W operation 	: [frozenset({6, 9, -20, 13, 15, 18, -14, -12, 21, 22, 23, 25, 27, 29}), frozenset({3, 4, 5, -29, 8, -24, 10, 11, -16, 17, 19, -7, 26, -2}), frozenset({24, -29, 28, -26})]
# of frequent itemsets	: 368
Time of DCI Closed		: 0.3211710453033447
281	itemsets left after W operation 	: [frozenset({-16, 17, 3, 4, 19, 11, 30}), frozenset({-30, -28, 5, -10, 7, 8, -2}), frozenset({-30, -28, 5, 8, -7, 10, -2}), frozenset({2, -30, -28, 8, -7, 10, -5}), frozenset({2, -30, -28, -10, 7, 8, -5}), frozenset({-30, -28, 5, 7, -8, 10, -2}), frozenset({-30, -29, 5, 8, -24, 10, -7, 26, -2})]
33	itemsets left after W operation 	: [frozenset({-28, 5, 8, 10, 31}), frozenset({-31, 3, 4, 7, -17, 16, 19, -11, -2}), frozenset({-31, 3, 4, 11, -19, 16, 17, -7, -2}), frozenset({-31, 2, 3, 7, -16, 17, 19, -11, -4}), frozenset({-31, 3, 4, 7, -16, 17, 19, -11, -2}), frozenset({-31, 2, 4, 11, -16, 17, 19, -7, -3}), frozenset({-31, -30, -7, -2})]
Initial DL				: 32415.119743342657
Final DL				: 1439.68045844962
Compression (wrt me)	: 0.9555861440633642
Operator Counters		: {'D': 0, 'W': 4, 'V': 0, 'S': 0, 'R': 0, 'T': 0}
Misle Learning Runtime	: 1.8005471229553223

Current Minsup[0.5] yields 2444 itemsets.
Current Minsup[0.25] yields 31400 itemsets.
Top-k minsup for at least 10000 paterns = 0.25 or 18
5  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({3, 4, 5, 6, 8, 9, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -7, -2}), frozenset({3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -10, -2}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -11, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -8, -2}), frozenset({3, 4, 5, 6, 7, 8, 9, 10, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 27, -26, -20, -16, -14, -12, -11, -2})}
DL of initial theory	: 9561.90959613437
9709	itemsets left after T operation 	: [frozenset({4, 9, 10, 13, 15, -14, 18, -12, 24, 25})]
227	itemsets left after T operation 	: [frozenset({3, 8, 15, 17, -14, 22, 24, 25})]
6	itemsets left after T operation 	: [frozenset({4, 8, 9, 10, 15, 17, -14, 19, 21, 22, 24})]
0	itemsets left after T operation 	: [frozenset({8, 15, 17, -14, 22, 24})]
# of frequent itemsets	: 0
Time of DCI Closed		: 0.3073720932006836
Initial DL				: 32415.119743342657
Final DL				: 1317.1914311016217
Compression (wrt me)	: 0.9593649062063964
Operator Counters		: {'D': 0, 'W': 0, 'V': 0, 'S': 0, 'R': 0, 'T': 4}
Misle Learning Runtime	: 3.353790044784546


[0, 1, 2, 3, 4, 5, 6, 7]
[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]
Min Score = 0.1 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 16, 11])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {23: False, 16: True, 11: False}

[7]
[0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.16666666666666666, 0.26666666666666666, 0.1, 0.26666666666666666, 0.0]

[3, 7]
[0.26666666666666666, 0.16666666666666666, 0.26666666666666666, 0.0, 0.26666666666666666, 0.16666666666666666, 0.26666666666666666, 0.0]
Min Score = 0.0 tied among 2/8 candidates.
[3, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([11])
Tie Breaking Levels	: [3]; Predicted Values	: {24: False, 8: False, 11: False}

[1, 3, 5, 7]
[0.26666666666666666, 0.0, 0.26666666666666666, 0.0, 0.26666666666666666, 0.0, 0.26666666666666666, 0.0]
Min Score = 0.0 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 11])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {24: False, 23: False, 11: False}

[4, 5, 6, 7]
[0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
Min Score = 0.16666666666666666 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 11])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 26: True, 11: False}

[1, 5]
[0.26666666666666666, 0.16666666666666666, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.16666666666666666, 0.26666666666666666, 0.26666666666666666]
Min Score = 0.16666666666666666 tied among 2/8 candidates.
[1, 5]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([5])
Tie Breaking Levels	: [3]; Predicted Values	: {12: True, 25: False, 5: False}

[3, 7]
[0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.16666666666666666, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.16666666666666666]
Min Score = 0.16666666666666666 tied among 2/8 candidates.
[3, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([6])
Tie Breaking Levels	: [3]; Predicted Values	: {13: False, 10: False, 6: False}

[2, 3, 6, 7]
[0.26666666666666666, 0.26666666666666666, 0.0, 0.0, 0.26666666666666666, 0.26666666666666666, 0.0, 0.0]
Min Score = 0.0 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 23])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 26: True, 23: False}

[3, 7]
[0.1, 0.1, 0.1, 0.0, 0.1, 0.1, 0.1, 0.0]
Min Score = 0.0 tied among 2/8 candidates.
[3, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([23])
Tie Breaking Levels	: [3]; Predicted Values	: {25: False, 18: False, 23: False}

[6]
[0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.1, 0.1, 0.0, 0.1]

[2, 3]
[0.1, 0.1, 0.0, 0.0, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666]
Min Score = 0.0 tied among 2/8 candidates.
[2, 3]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([11])
Tie Breaking Levels	: [3]; Predicted Values	: {14: True, 13: False, 11: False}

[5, 7]
[0.26666666666666666, 0.16666666666666666, 0.26666666666666666, 0.16666666666666666, 0.1, 0.0, 0.1, 0.0]
Min Score = 0.0 tied among 2/8 candidates.
[5, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([27])
Tie Breaking Levels	: [3]; Predicted Values	: {25: False, 22: False, 27: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Min Score = 0.0 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 21, 16])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {2: True, 21: False, 16: True}

[1, 3, 5, 7]
[0.16666666666666666, 0.0, 0.16666666666666666, 0.0, 0.16666666666666666, 0.0, 0.16666666666666666, 0.0]
Min Score = 0.0 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 26])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {8: False, 7: True, 26: True}

[1, 3, 5, 7]
[0.16666666666666666, 0.0, 0.16666666666666666, 0.0, 0.16666666666666666, 0.0, 0.16666666666666666, 0.0]
Min Score = 0.0 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 23])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {8: False, 16: True, 23: False}

[6, 7]
[0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.16666666666666666, 0.16666666666666666, 0.0, 0.0]
Min Score = 0.0 tied among 2/8 candidates.
[6, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking Levels	: [3]; Predicted Values	: {22: False, 15: False, 19: False}

[6]
[0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.1, 0.1, 0.0, 0.1]

[3, 7]
[0.26666666666666666, 0.1, 0.26666666666666666, 0.0, 0.26666666666666666, 0.1, 0.26666666666666666, 0.0]
Min Score = 0.0 tied among 2/8 candidates.
[3, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([6])
Tie Breaking Levels	: [3]; Predicted Values	: {25: False, 24: False, 6: False}

[2, 3, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.0, 0.0, 0.16666666666666666, 0.16666666666666666, 0.0, 0.0]
Min Score = 0.0 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 27])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {17: False, 11: False, 27: False}

[6]
[0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.16666666666666666, 0.26666666666666666, 0.0, 0.1]

[1, 3, 5, 7]
[0.1, 0.0, 0.1, 0.0, 0.1, 0.0, 0.1, 0.0]
Min Score = 0.0 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 3])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {9: False, 2: True, 3: False}

[1, 3, 5, 7]
[0.16666666666666666, 0.0, 0.16666666666666666, 0.0, 0.16666666666666666, 0.0, 0.16666666666666666, 0.0]
Min Score = 0.0 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 11])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {8: False, 23: False, 11: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Min Score = 0.0 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 20, 27])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {11: False, 20: True, 27: False}

[5, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.0, 0.16666666666666666, 0.0]
Min Score = 0.0 tied among 2/8 candidates.
[5, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([16])
Tie Breaking Levels	: [3]; Predicted Values	: {17: False, 8: False, 16: True}

[5]
[0.1, 0.1, 0.1, 0.1, 0.1, 0.0, 0.1, 0.1]

[4, 5, 6, 7]
[0.1, 0.1, 0.1, 0.1, 0.0, 0.0, 0.0, 0.0]
Min Score = 0.0 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([27, 16])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {13: False, 27: False, 16: True}

[4, 5, 6, 7]
[0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
Min Score = 0.16666666666666666 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 20])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 6: False, 20: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[5, 7]
[0.0, 0.0, 0.0, 0.0, 0.16666666666666666, 0.26666666666666666, 0.16666666666666666, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([6])
Tie Breaking Levels	: [3]; Predicted Values	: {15: False, 4: False, 6: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.1, 0.1, 0.1, 0.1, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 3])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {22: False, 20: False, 3: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.26666666666666666, 0.26666666666666666, 0.16666666666666666, 0.16666666666666666, 0.26666666666666666, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 6])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {13: False, 19: False, 6: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[5, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.26666666666666666, 0.16666666666666666, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([11])
Tie Breaking Levels	: [3]; Predicted Values	: {13: False, 10: False, 11: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[3, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.26666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([7])
Tie Breaking Levels	: [3]; Predicted Values	: {18: False, 10: False, 7: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[1, 5]
[0.16666666666666666, 0.26666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.26666666666666666, 0.16666666666666666, 0.16666666666666666]
Max Score = 0.26666666666666666 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([21])
Tie Breaking Levels	: [3]; Predicted Values	: {12: True, 4: False, 21: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.1, 0.26666666666666666, 0.1, 0.26666666666666666, 0.1, 0.26666666666666666, 0.1, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 19])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {8: False, 7: False, 19: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[5]
[0.0, 0.1, 0.0, 0.0, 0.16666666666666666, 0.26666666666666666, 0.16666666666666666, 0.16666666666666666]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.16666666666666666, 0.26666666666666666, 0.16666666666666666, 0.26666666666666666, 0.16666666666666666, 0.26666666666666666, 0.16666666666666666, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 26])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {9: False, 2: False, 26: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.0, 0.0, 0.1, 0.1, 0.26666666666666666, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([26])
Tie Breaking Levels	: [3]; Predicted Values	: {22: False, 15: False, 26: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 21, 5])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {3: False, 21: False, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
Max Score = 0.16666666666666666 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 11, 16])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {10: False, 11: False, 16: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.16666666666666666, 0.26666666666666666, 0.16666666666666666, 0.26666666666666666, 0.16666666666666666, 0.26666666666666666, 0.16666666666666666, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 2])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {18: False, 5: False, 2: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[1, 3]
[0.0, 0.26666666666666666, 0.0, 0.26666666666666666, 0.0, 0.16666666666666666, 0.0, 0.16666666666666666]
Max Score = 0.26666666666666666 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking Levels	: [3]; Predicted Values	: {12: True, 24: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.1, 0.1, 0.26666666666666666, 0.26666666666666666, 0.1, 0.1, 0.26666666666666666, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 23])
Tie Breaking Levels	: [3, 4]; Predicted Values	: {17: False, 16: True, 23: True}
INCORRECT Prediction at tie levels: [3, 4]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.1, 0.26666666666666666, 0.1, 0.26666666666666666, 0.1, 0.26666666666666666, 0.1, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 7])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {8: False, 3: False, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 26, 6])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {3: False, 26: False, 6: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]
Max Score = 0.1 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 22, 2])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {5: False, 22: False, 2: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[7]
[0.0, 0.0, 0.0, 0.1, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.26666666666666666]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[1, 3]
[0.1, 0.26666666666666666, 0.1, 0.26666666666666666, 0.0, 0.16666666666666666, 0.0, 0.16666666666666666]
Max Score = 0.26666666666666666 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([20])
Tie Breaking Levels	: [3]; Predicted Values	: {12: True, 8: False, 20: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 3])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {4: False, 26: False, 3: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[5, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.26666666666666666, 0.16666666666666666, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([26])
Tie Breaking Levels	: [3]; Predicted Values	: {13: False, 9: False, 26: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 5])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 16: True, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.16666666666666666, 0.0, 0.16666666666666666, 0.0, 0.16666666666666666, 0.0, 0.16666666666666666]
Max Score = 0.16666666666666666 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 7])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {17: False, 25: False, 7: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[3, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.26666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([7])
Tie Breaking Levels	: [3]; Predicted Values	: {9: False, 4: False, 7: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[7]
[0.0, 0.0, 0.1, 0.1, 0.0, 0.16666666666666666, 0.1, 0.26666666666666666]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.1, 0.0, 0.1, 0.0, 0.1, 0.0, 0.1]
Max Score = 0.1 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 21])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {10: False, 5: False, 21: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.26666666666666666, 0.0, 0.26666666666666666, 0.0, 0.26666666666666666, 0.0, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 19])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {24: False, 21: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.26666666666666666, 0.26666666666666666, 0.16666666666666666, 0.16666666666666666, 0.26666666666666666, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 21])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {4: False, 26: False, 21: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.26666666666666666, 0.0, 0.26666666666666666, 0.0, 0.26666666666666666, 0.0, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 5])
Tie Breaking Levels	: [4, 3]; Predicted Values	: {24: False, 23: True, 5: False}
INCORRECT Prediction at tie levels: [4, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[3]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.26666666666666666, 0.0, 0.0, 0.0, 0.0]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.26666666666666666]
Tie Breaking: Level 1
INCORRECT Prediction at tie levels: 1

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
Max Score = 0.16666666666666666 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 27, 10])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {13: False, 27: True, 10: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[7]
[0.0, 0.0, 0.0, 0.1, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.26666666666666666]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.26666666666666666, 0.0, 0.26666666666666666, 0.0, 0.26666666666666666, 0.0, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 23])
Tie Breaking Levels	: [3, 4]; Predicted Values	: {24: False, 20: False, 23: True}
INCORRECT Prediction at tie levels: [3, 4]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[3, 7]
[0.0, 0.1, 0.16666666666666666, 0.26666666666666666, 0.0, 0.1, 0.16666666666666666, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([6])
Tie Breaking Levels	: [3]; Predicted Values	: {25: False, 22: False, 6: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253, 0.7753968253968253]
Min Score = 0.7753968253968253 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.1, 0.26666666666666666, 0.1, 0.26666666666666666, 0.1, 0.26666666666666666, 0.1, 0.26666666666666666]
Max Score = 0.26666666666666666 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 6])
Tie Breaking Levels	: [4, 3]; Predicted Values	: {8: False, 23: True, 6: False}

Dataset				: ecoli.dat
Metric				: length
Minsups				: [3]
MF Accuracy			: [(0.7833333333333333, 0.21875, 60, 64)]
Mistle Accuracy		: [0.75]
CNFAlgo Accuracy	: []
Randomized Accuracy	: [0.125]

# Test Examples		: 64
Mistle # Ties		: [(0, 0)]
CNFAlgo # Ties		: []
