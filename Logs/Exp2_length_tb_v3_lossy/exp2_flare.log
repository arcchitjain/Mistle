>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 281
 Number of frequent closed itemsets: 19616
 Total time ~: 575 ms
Current Minsup[0.5] yields 3504 itemsets.
Current Minsup[0.25] yields 61814 itemsets.
Current Minsup[0.34828477900273686] yields 19616 itemsets.
Top-k minsup for at least 10000 paterns = 0.34828477900273686 or 98
73  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 17, 19, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -18, -16, -12, -7, -2}), frozenset({2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -20, -16, -14, -11, -3}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -8, -4}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -8, -3}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -20, -16, -13, -7, -2}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -17, -14, -9, -5}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -19, -16, -13, -8, -4}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -9, -5}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -11, -4}), frozenset({2, 3, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -7, -4}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -17, -14, -11, -4}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -14, -9, -5}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -13, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -9, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 16, 18, 20, 22, 23, 25, 27, 29, 31, -30, -28, -26, -24, -21, -19, -17, -12, -8, -2}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -8, -4}), frozenset({2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -9, -6}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -8, -4}), frozenset({2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -7, -4}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -19, -16, -13, -8, -3}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -20, -16, -14, -8, -4}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -14, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -11, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 19, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -18, -16, -12, -8, -2}), frozenset({2, 3, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -7, -4}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -13, -9, -5}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -9, -5}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -12, -8, -2}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -20, -16, -13, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -20, -16, -13, -11, -4}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -14, -7, -2}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -8, -4}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -13, -7, -2}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -8, -4}), frozenset({2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 16, 18, 20, 21, 23, 24, 26, 28, 31, -30, -29, -27, -25, -22, -19, -17, -15, -11, -5}), frozenset({2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -8, -6}), frozenset({2, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -10, -3}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -9, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -12, -8, -2}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 20, 22, 23, 25, 27, 29, 31, -30, -28, -26, -24, -21, -19, -16, -12, -8, -2}), frozenset({2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -8, -6}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -8, -3}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -7, -2}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 22, 24, 26, 29, 31, -30, -28, -27, -25, -23, -19, -17, -13, -8, -3}), frozenset({3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 18, 20, 22, 23, 25, 27, 29, 31, -30, -28, -26, -24, -21, -19, -16, -12, -9, -2}), frozenset({2, 3, 4, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -8, -5}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -13, -8, -3}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -7, -3}), frozenset({3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 25, 27, 29, 30, -31, -28, -26, -24, -21, -20, -16, -12, -9, -2}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -7, -3}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -7, -3}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -17, -14, -9, -4}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -20, -16, -13, -8, -4}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -14, -7, -3}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -17, -14, -9, -4}), frozenset({2, 3, 4, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -8, -5}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -8, -3}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -7, -2}), frozenset({2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 16, 18, 20, 21, 22, 24, 26, 28, 31, -30, -29, -27, -25, -23, -19, -17, -15, -11, -5}), frozenset({2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -14, -9, -6}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -17, -13, -8, -3}), frozenset({2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -8, -5}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -8, -3}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -20, -16, -14, -9, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -12, -8, -2}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -9, -4}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -19, -16, -13, -8, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 25, 27, 29, 31, -30, -28, -26, -24, -21, -20, -16, -12, -8, -2}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 17, 18, 19, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -20, -16, -15, -11, -4}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -9, -5}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -7, -3})}>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 120
 Number of frequent closed itemsets: 18870
 Total time ~: 296 ms

DL of initial theory	: 48444.03252043957
9964	itemsets left after T operation 	: [frozenset({-28, -27, 6, 10, 11, -21, 15, 22, 23, 26, 29})]
9456	itemsets left after T operation 	: [frozenset({2, -28, -27, 7, 12, 18, 22, 26, 29})]
7839	itemsets left after T operation 	: [frozenset({3, -28, 5, 6, -21, 15, -16, 17, 22, 23, 29})]
2023	itemsets left after T operation 	: [frozenset({-28, 5, -27, 10, 11, 15, 26, 29})]
634	itemsets left after T operation 	: [frozenset({2, 4, -27, 10, -21, 12, 22, 23, 26})]
109	itemsets left after T operation 	: [frozenset({3, -28, 5, 6, 15, 22, 29})]
48	itemsets left after T operation 	: [frozenset({-28, -27, 11, 15, 26, 29})]
# of frequent itemsets	: 0
Time of DCI Closed		: 0.32439494132995605
Initial DL				: 157333.08110911513
Final DL				: 16495.099485944018
Compression (wrt me)	: 0.895158097905016
Operator Counters		: {'D': 0, 'W': 0, 'V': 0, 'S': 0, 'R': 0, 'T': 7}
Misle Learning Runtime	: 9.95953893661499

Current Minsup[0.5] yields 4449 itemsets.
Current Minsup[0.25] yields 58553 itemsets.
Current Minsup[0.35420009830100135] yields 18870 itemsets.
Top-k minsup for at least 10000 paterns = 0.35420009830100135 or 43
73  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 17, 19, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -18, -16, -12, -7, -2}), frozenset({2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -20, -16, -14, -11, -3}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -8, -4}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -8, -3}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -20, -16, -13, -7, -2}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -17, -14, -9, -5}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -19, -16, -13, -8, -4}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -11, -4}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -9, -5}), frozenset({2, 3, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -7, -4}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -14, -9, -5}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -17, -14, -11, -4}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -13, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -9, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 16, 18, 20, 22, 23, 25, 27, 29, 31, -30, -28, -26, -24, -21, -19, -17, -12, -8, -2}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -8, -4}), frozenset({2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -9, -6}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -8, -4}), frozenset({2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -7, -4}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -19, -16, -13, -8, -3}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -20, -16, -14, -8, -4}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -14, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -11, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 19, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -18, -16, -12, -8, -2}), frozenset({2, 3, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -7, -4}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -13, -9, -5}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -9, -5}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -12, -8, -2}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -20, -16, -13, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -20, -16, -13, -11, -4}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -14, -7, -2}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -8, -4}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -13, -7, -2}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -8, -4}), frozenset({2, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -10, -3}), frozenset({2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -8, -6}), frozenset({2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 16, 18, 20, 21, 23, 24, 26, 28, 31, -30, -29, -27, -25, -22, -19, -17, -15, -11, -5}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -9, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -12, -8, -2}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 20, 22, 23, 25, 27, 29, 31, -30, -28, -26, -24, -21, -19, -16, -12, -8, -2}), frozenset({2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -14, -8, -6}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -8, -3}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -7, -2}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 22, 24, 26, 29, 31, -30, -28, -27, -25, -23, -19, -17, -13, -8, -3}), frozenset({3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 18, 20, 22, 23, 25, 27, 29, 31, -30, -28, -26, -24, -21, -19, -16, -12, -9, -2}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -16, -13, -8, -3}), frozenset({2, 3, 4, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -8, -5}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -7, -3}), frozenset({3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 25, 27, 29, 30, -31, -28, -26, -24, -21, -20, -16, -12, -9, -2}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -7, -3}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -7, -3}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -14, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -9, -4}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -17, -14, -9, -4}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -20, -16, -13, -8, -4}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -14, -7, -3}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 19, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -20, -17, -14, -9, -4}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -13, -8, -3}), frozenset({2, 3, 4, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -8, -5}), frozenset({3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -7, -2}), frozenset({2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 16, 18, 20, 21, 22, 24, 26, 28, 31, -30, -29, -27, -25, -23, -19, -17, -15, -11, -5}), frozenset({2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -16, -14, -9, -6}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -17, -13, -8, -3}), frozenset({2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -8, -5}), frozenset({2, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -8, -3}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -20, -16, -14, -9, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -12, -8, -2}), frozenset({2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 18, 20, 22, 23, 24, 26, 29, 31, -30, -28, -27, -25, -21, -19, -17, -14, -9, -4}), frozenset({2, 3, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 30, -31, -28, -27, -24, -21, -19, -16, -13, -8, -4}), frozenset({3, 4, 5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 22, 23, 25, 27, 29, 31, -30, -28, -26, -24, -21, -20, -16, -12, -8, -2}), frozenset({2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 17, 18, 19, 22, 23, 24, 26, 29, 30, -31, -28, -27, -25, -21, -20, -16, -15, -11, -4}), frozenset({2, 3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 19, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -20, -16, -13, -9, -5}), frozenset({2, 4, 5, 6, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 23, 25, 26, 29, 31, -30, -28, -27, -24, -21, -19, -16, -13, -7, -3})}
DL of initial theory	: 48444.03252043957
9857	itemsets left after W operation 	: [frozenset({32, 2, -28, -27, 10, -21, 12, 18, 22, 23, 26, 29}), frozenset({4, 5, 6, 7, 8, 9, 13, 15, 17, 19, 24, 30, -32, -31, -25, -20, -16, -14, -11, -3}), frozenset({4, 5, 6, 8, 9, 11, 13, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -14, -7, -3}), frozenset({4, 5, 6, 7, 9, 11, 14, 15, 17, 20, 25, 31, -32, -30, -24, -19, -16, -13, -8, -3}), frozenset({3, 4, 5, 8, 9, 11, 13, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -14, -7, -6}), frozenset({4, 5, 6, 7, 9, 11, 14, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -13, -8, -3}), frozenset({3, 4, 5, 7, 8, 9, 13, 15, 17, 20, 24, 30, -32, -31, -25, -19, -16, -14, -11, -6}), frozenset({3, 5, 6, 7, 8, 11, 14, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -13, -9, -4}), frozenset({3, 5, 6, 8, 9, 11, 13, 14, 17, 19, 24, 31, -32, -30, -25, -20, -16, -15, -7, -4}), frozenset({3, 5, 6, 7, 8, 11, 14, 15, 17, 19, 25, 30, -32, -31, -24, -20, -16, -13, -9, -4}), frozenset({3, 5, 6, 7, 8, 11, 14, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -13, -9, -4}), frozenset({4, 5, 6, 8, 9, 11, 14, 15, 17, 20, 25, 31, -32, -30, -24, -19, -16, -13, -7, -3}), frozenset({3, 4, 5, 7, 9, 11, 13, 15, 17, 19, 24, 31, -32, -30, -25, -20, -16, -14, -8, -6}), frozenset({3, 5, 6, 8, 9, 11, 14, 15, 16, 20, 25, 30, -32, -31, -24, -19, -17, -13, -7, -4}), frozenset({3, 4, 6, 7, 8, 11, 14, 15, 16, 20, 24, 31, -32, -30, -25, -19, -17, -13, -9, -5}), frozenset({3, 5, 6, 7, 9, 11, 14, 15, 17, 19, 25, 30, -32, -31, -24, -20, -16, -13, -8, -4}), frozenset({3, 5, 6, 7, 9, 11, 14, 15, 17, 20, 25, 31, -32, -30, -24, -19, -16, -13, -8, -4}), frozenset({3, 5, 6, 7, 8, 11, 13, 14, 16, 19, 25, 31, -32, -30, -24, -20, -17, -15, -9, -4}), frozenset({3, 5, 6, 7, 9, 11, 14, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -13, -8, -4}), frozenset({3, 5, 6, 7, 8, 11, 13, 15, 16, 20, 24, 31, -32, -30, -25, -19, -17, -14, -9, -4}), frozenset({3, 4, 6, 7, 8, 11, 14, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -13, -9, -5}), frozenset({3, 4, 6, 7, 8, 11, 13, 15, 16, 20, 25, 31, -32, -30, -24, -19, -17, -14, -9, -5}), frozenset({3, 4, 6, 7, 9, 11, 14, 15, 16, 19, 24, 31, -32, -30, -25, -20, -17, -13, -8, -5}), frozenset({4, 5, 6, 7, 9, 11, 14, 15, 16, 20, 25, 31, -32, -30, -24, -19, -17, -13, -8, -3}), frozenset({3, 5, 6, 8, 9, 11, 13, 14, 16, 19, 25, 31, -32, -30, -24, -20, -17, -15, -7, -4}), frozenset({3, 5, 6, 8, 9, 11, 13, 15, 16, 19, 24, 31, -32, -30, -25, -20, -17, -14, -7, -4}), frozenset({4, 5, 6, 7, 9, 11, 14, 15, 17, 20, 25, 30, -32, -31, -24, -19, -16, -13, -8, -3}), frozenset({3, 4, 6, 7, 9, 11, 13, 15, 16, 20, 24, 31, -32, -30, -25, -19, -17, -14, -8, -5}), frozenset({3, 4, 6, 7, 8, 9, 13, 15, 17, 20, 24, 30, -32, -31, -25, -19, -16, -14, -11, -5}), frozenset({3, 5, 6, 8, 9, 11, 14, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -13, -7, -4}), frozenset({3, 4, 6, 7, 8, 9, 13, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -14, -11, -5}), frozenset({3, 5, 6, 7, 8, 11, 13, 15, 16, 19, 24, 31, -32, -30, -25, -20, -17, -14, -9, -4}), frozenset({3, 5, 6, 7, 9, 11, 13, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -14, -8, -4}), frozenset({4, 5, 6, 7, 8, 9, 14, 15, 17, 20, 25, 31, -32, -30, -24, -19, -16, -13, -11, -3}), frozenset({3, 5, 6, 7, 9, 11, 13, 15, 17, 19, 24, 30, -32, -31, -25, -20, -16, -14, -8, -4}), frozenset({4, 5, 6, 8, 9, 11, 14, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -13, -7, -3}), frozenset({3, 5, 6, 7, 9, 11, 13, 15, 17, 19, 24, 31, -32, -30, -25, -20, -16, -14, -8, -4}), frozenset({4, 5, 6, 8, 9, 11, 14, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -13, -7, -3}), frozenset({3, 5, 6, 7, 8, 11, 14, 15, 17, 19, 24, 31, -32, -30, -25, -20, -16, -13, -9, -4}), frozenset({3, 5, 6, 7, 9, 11, 14, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -13, -8, -4}), frozenset({3, 5, 6, 7, 8, 11, 13, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -14, -9, -4}), frozenset({4, 5, 6, 8, 9, 11, 13, 15, 17, 20, 25, 31, -32, -30, -24, -19, -16, -14, -7, -3}), frozenset({3, 5, 6, 7, 8, 9, 14, 15, 17, 19, 24, 30, -32, -31, -25, -20, -16, -13, -11, -4}), frozenset({4, 5, 6, 7, 9, 11, 13, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -14, -8, -3}), frozenset({3, 5, 6, 7, 9, 11, 14, 15, 17, 20, 24, 30, -32, -31, -25, -19, -16, -13, -8, -4}), frozenset({3, 4, 6, 7, 8, 11, 13, 15, 16, 20, 24, 30, -32, -31, -25, -19, -17, -14, -9, -5}), frozenset({3, 5, 6, 7, 8, 9, 13, 15, 16, 19, 24, 31, -32, -30, -25, -20, -17, -14, -11, -4}), frozenset({3, 4, 6, 7, 8, 11, 13, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -14, -9, -5}), frozenset({3, 4, 6, 7, 9, 11, 14, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -13, -8, -5}), frozenset({4, 5, 6, 7, 9, 11, 14, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -13, -8, -3}), frozenset({3, 5, 6, 7, 8, 9, 13, 14, 17, 19, 24, 30, -32, -31, -25, -20, -16, -15, -11, -4}), frozenset({3, 5, 6, 7, 8, 9, 14, 15, 17, 19, 25, 30, -32, -31, -24, -20, -16, -13, -11, -4}), frozenset({4, 5, 6, 8, 9, 11, 13, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -14, -7, -3}), frozenset({3, 5, 6, 7, 8, 11, 13, 15, 16, 19, 25, 31, -32, -30, -24, -20, -17, -14, -9, -4}), frozenset({3, 5, 6, 7, 8, 11, 13, 15, 17, 19, 24, 31, -32, -30, -25, -20, -16, -14, -9, -4}), frozenset({3, 4, 5, 7, 8, 11, 13, 15, 16, 20, 24, 31, -32, -30, -25, -19, -17, -14, -9, -6}), frozenset({3, 4, 6, 7, 9, 11, 13, 15, 17, 19, 24, 31, -32, -30, -25, -20, -16, -14, -8, -5}), frozenset({3, 5, 6, 7, 8, 11, 13, 15, 17, 19, 24, 30, -32, -31, -25, -20, -16, -14, -9, -4}), frozenset({3, 5, 6, 7, 8, 11, 13, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -14, -9, -4}), frozenset({3, 4, 6, 7, 8, 9, 14, 15, 17, 19, 25, 30, -32, -31, -24, -20, -16, -13, -11, -5}), frozenset({3, 4, 6, 7, 8, 11, 13, 14, 17, 19, 25, 31, -32, -30, -24, -20, -16, -15, -9, -5}), frozenset({3, 4, 6, 7, 8, 11, 13, 15, 17, 19, 24, 31, -32, -30, -25, -20, -16, -14, -9, -5}), frozenset({3, 5, 6, 7, 8, 9, 13, 15, 16, 20, 24, 31, -32, -30, -25, -19, -17, -14, -11, -4}), frozenset({3, 4, 5, 7, 9, 11, 13, 15, 16, 20, 24, 31, -32, -30, -25, -19, -17, -14, -8, -6}), frozenset({3, 5, 6, 7, 8, 9, 13, 14, 16, 19, 24, 30, -32, -31, -25, -20, -17, -15, -11, -4}), frozenset({3, 4, 5, 7, 8, 9, 13, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -14, -11, -6}), frozenset({3, 4, 6, 7, 9, 11, 14, 15, 17, 20, 25, 31, -32, -30, -24, -19, -16, -13, -8, -5}), frozenset({4, 5, 6, 7, 9, 11, 14, 15, 17, 19, 24, 31, -32, -30, -25, -20, -16, -13, -8, -3}), frozenset({3, 4, 6, 7, 8, 11, 13, 15, 16, 19, 24, 31, -32, -30, -25, -20, -17, -14, -9, -5}), frozenset({3, 5, 6, 8, 9, 11, 13, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -14, -7, -4}), frozenset({3, 5, 6, 7, 8, 9, 13, 15, 17, 19, 24, 31, -32, -30, -25, -20, -16, -14, -11, -4}), frozenset({3, 4, 5, 7, 8, 11, 13, 15, 17, 20, 24, 31, -32, -30, -25, -19, -16, -14, -9, -6}), frozenset({3, 4, 5, 7, 8, 11, 13, 14, 16, 20, 24, 31, -32, -30, -25, -19, -17, -15, -9, -6}), frozenset({3, 5, 6, 7, 9, 11, 14, 15, 17, 20, 25, 30, -32, -31, -24, -19, -16, -13, -8, -4}), frozenset({3, 4, 6, 7, 8, 11, 14, 15, 17, 19, 25, 31, -32, -30, -24, -20, -16, -13, -9, -5}), frozenset({3, 5, 6, 8, 9, 11, 14, 15, 17, 20, 25, 31, -32, -30, -24, -19, -16, -13, -7, -4})]
8781	itemsets left after W operation 	: [frozenset({33, 3, -28, 5, 6, 10, -21, 11, 15, 22, 23, 29}), frozenset({4, 8, 9, 13, 14, 17, 19, 20, 25, 26, 31, -33, -30, -27, -24, -18, -16, -12, -7, -2}), frozenset({4, 7, 8, 13, 14, 17, 18, 19, 25, 27, 30, -33, -31, -26, -24, -20, -16, -12, -9, -2}), frozenset({4, 7, 9, 13, 14, 17, 18, 20, 25, 26, 31, -33, -30, -27, -24, -19, -16, -12, -8, -2}), frozenset({4, 7, 9, 13, 14, 17, 18, 19, 25, 27, 31, -33, -30, -26, -24, -20, -16, -12, -8, -2}), frozenset({2, 7, 8, 12, 13, 17, 19, 20, 24, 26, 31, -33, -30, -27, -25, -18, -16, -14, -9, -4}), frozenset({4, 7, 9, 13, 14, 17, 18, 19, 25, 26, 31, -33, -30, -27, -24, -20, -16, -12, -8, -2}), frozenset({4, 7, 9, 13, 14, 17, 18, 20, 25, 27, 31, -33, -30, -26, -24, -19, -16, -12, -8, -2}), frozenset({4, 7, 8, 13, 14, 17, 18, 20, 25, 27, 31, -33, -30, -26, -24, -19, -16, -12, -9, -2}), frozenset({4, 8, 9, 12, 14, 17, 18, 19, 25, 26, 30, -33, -31, -27, -24, -20, -16, -13, -7, -2}), frozenset({4, 8, 9, 12, 14, 17, 18, 19, 25, 26, 31, -33, -30, -27, -24, -20, -16, -13, -7, -2}), frozenset({4, 8, 9, 12, 14, 16, 18, 20, 24, 26, 31, -33, -30, -27, -25, -19, -17, -13, -7, -2}), frozenset({4, 8, 9, 12, 13, 16, 18, 19, 25, 26, 30, -33, -31, -27, -24, -20, -17, -14, -7, -2}), frozenset({4, 7, 9, 13, 14, 16, 18, 20, 25, 27, 31, -33, -30, -26, -24, -19, -17, -12, -8, -2}), frozenset({4, 8, 9, 12, 14, 17, 18, 20, 25, 26, 31, -33, -30, -27, -24, -19, -16, -13, -7, -2}), frozenset({4, 7, 9, 13, 14, 17, 19, 20, 24, 26, 31, -33, -30, -27, -25, -18, -16, -12, -8, -2}), frozenset({4, 7, 9, 13, 14, 17, 18, 19, 24, 26, 31, -33, -30, -27, -25, -20, -16, -12, -8, -2}), frozenset({4, 8, 9, 12, 14, 16, 19, 20, 25, 26, 31, -33, -30, -27, -24, -18, -17, -13, -7, -2}), frozenset({4, 8, 9, 12, 13, 17, 18, 20, 24, 26, 31, -33, -30, -27, -25, -19, -16, -14, -7, -2})]
6209	itemsets left after W operation 	: [frozenset({2, 3, 34, -27, -25, 8, 7, 12, 18, 24, 26}), frozenset({4, 6, 9, 10, 13, 15, 16, 19, 22, 23, 28, -34, 31, -30, -29, -21, -20, -17, -14, -11, -5}), frozenset({5, 6, 9, 10, 13, 14, 16, 19, 21, 22, 29, 30, -34, -31, -28, -23, -20, -17, -15, -11, -4}), frozenset({4, 5, 9, 10, 13, 14, 16, 19, 21, 22, 28, -34, 31, -30, -29, -23, -20, -17, -15, -11, -6}), frozenset({5, 6, 10, 11, 13, 15, 16, 19, 21, 22, 29, -34, 31, -30, -28, -23, -20, -17, -14, -9, -4}), frozenset({4, 6, 9, 10, 13, 14, 16, 19, 21, 22, 28, -34, 31, -30, -29, -23, -20, -17, -15, -11, -5}), frozenset({5, 6, 9, 10, 13, 15, 16, 19, 21, 23, 29, -34, 31, -30, -28, -22, -20, -17, -14, -11, -4}), frozenset({5, 6, 9, 10, 13, 14, 16, 19, 22, 23, 28, -34, 31, -30, -29, -21, -20, -17, -15, -11, -4}), frozenset({5, 6, 9, 10, 13, 14, 16, 19, 22, 23, 28, 30, -34, -31, -29, -21, -20, -17, -15, -11, -4}), frozenset({4, 6, 9, 10, 13, 14, 16, 19, 22, 23, 28, -34, 31, -30, -29, -21, -20, -17, -15, -11, -5}), frozenset({4, 5, 10, 11, 13, 15, 16, 19, 22, 23, 28, -34, 31, -30, -29, -21, -20, -17, -14, -9, -6}), frozenset({5, 6, 9, 10, 13, 14, 16, 20, 21, 22, 28, 30, -34, -31, -29, -23, -19, -17, -15, -11, -4}), frozenset({4, 6, 9, 10, 13, 14, 17, 19, 22, 23, 28, -34, 31, -30, -29, -21, -20, -16, -15, -11, -5}), frozenset({5, 6, 9, 10, 13, 14, 16, 20, 22, 23, 28, 30, -34, -31, -29, -21, -19, -17, -15, -11, -4}), frozenset({4, 5, 9, 11, 14, 15, 17, 20, 22, 23, 29, -34, 31, -30, -28, -21, -19, -16, -13, -10, -6}), frozenset({4, 6, 9, 10, 13, 14, 16, 20, 21, 22, 28, -34, 31, -30, -29, -23, -19, -17, -15, -11, -5}), frozenset({4, 6, 9, 10, 13, 14, 16, 20, 21, 23, 28, -34, 31, -30, -29, -22, -19, -17, -15, -11, -5}), frozenset({4, 6, 10, 11, 13, 15, 16, 19, 21, 22, 29, -34, 31, -30, -28, -23, -20, -17, -14, -9, -5}), frozenset({4, 5, 10, 11, 13, 15, 17, 20, 22, 23, 28, -34, 31, -30, -29, -21, -19, -16, -14, -9, -6}), frozenset({4, 6, 9, 11, 13, 15, 17, 19, 22, 23, 29, -34, 31, -30, -28, -21, -20, -16, -14, -10, -5})]
# of frequent itemsets	: 214
Time of DCI Closed		: 0.3640739917755127
213	itemsets left after W operation 	: [frozenset({-30, 35, 6, 11, 31, 15}), frozenset({3, 4, 5, 7, 8, 9, 13, 14, 17, 18, 20, 22, 23, 24, 26, 29, -35, -28, -27, -25, -21, -19, -16, -12, -10, -2}), frozenset({2, 3, 5, 7, 9, 10, 12, 14, 16, 18, 19, 21, 23, 25, 26, 29, -35, -28, -27, -24, -22, -20, -17, -13, -8, -4}), frozenset({2, 4, 5, 7, 8, 9, 12, 14, 17, 18, 19, 22, 23, 25, 26, 29, -35, -28, -27, -24, -21, -20, -16, -13, -10, -3}), frozenset({2, 4, 5, 7, 9, 10, 12, 14, 16, 18, 20, 21, 22, 24, 26, 29, -35, -28, -27, -25, -23, -19, -17, -13, -8, -3}), frozenset({2, 3, 5, 7, 9, 10, 12, 14, 16, 18, 20, 21, 23, 24, 26, 29, -35, -28, -27, -25, -22, -19, -17, -13, -8, -4}), frozenset({2, 3, 5, 7, 8, 10, 12, 13, 16, 18, 19, 21, 22, 25, 26, 29, -35, -28, -27, -24, -23, -20, -17, -14, -9, -4}), frozenset({4, 5, 8, 9, 13, 17, 20, 24, -35, -32, -25, -19, -16, -14, -7, -3}), frozenset({4, 5, 7, 9, 14, 17, 20, 25, -35, -32, -24, -19, -16, -13, -8, -3}), frozenset({4, 5, 7, 9, 14, 17, 19, 25, -35, -32, -24, -20, -16, -13, -8, -3}), frozenset({3, 5, 7, 8, 14, 17, 19, 25, -35, -32, -24, -20, -16, -13, -9, -4}), frozenset({3, 5, 7, 8, 14, 17, 20, 24, -35, -32, -25, -19, -16, -13, -9, -4}), frozenset({4, 5, 8, 9, 14, 17, 20, 25, -35, -32, -24, -19, -16, -13, -7, -3}), frozenset({3, 4, 7, 8, 14, 16, 20, 24, -35, -32, -25, -19, -17, -13, -9, -5}), frozenset({3, 5, 7, 9, 14, 17, 20, 25, -35, -32, -24, -19, -16, -13, -8, -4}), frozenset({3, 5, 7, 9, 14, 17, 19, 25, -35, -32, -24, -20, -16, -13, -8, -4}), frozenset({3, 5, 7, 8, 13, 16, 20, 24, -35, -32, -25, -19, -17, -14, -9, -4}), frozenset({3, 4, 7, 8, 14, 17, 20, 24, -35, -32, -25, -19, -16, -13, -9, -5}), frozenset({3, 4, 7, 8, 13, 16, 20, 25, -35, -32, -24, -19, -17, -14, -9, -5}), frozenset({3, 4, 7, 9, 14, 16, 19, 24, -35, -32, -25, -20, -17, -13, -8, -5}), frozenset({4, 5, 7, 9, 14, 16, 20, 25, -35, -32, -24, -19, -17, -13, -8, -3}), frozenset({3, 5, 8, 9, 13, 16, 19, 24, -35, -32, -25, -20, -17, -14, -7, -4}), frozenset({3, 4, 7, 9, 13, 16, 20, 24, -35, -32, -25, -19, -17, -14, -8, -5}), frozenset({3, 5, 8, 9, 14, 17, 19, 25, -35, -32, -24, -20, -16, -13, -7, -4}), frozenset({3, 5, 7, 8, 13, 16, 19, 24, -35, -32, -25, -20, -17, -14, -9, -4}), frozenset({3, 5, 7, 9, 13, 17, 19, 25, -35, -32, -24, -20, -16, -14, -8, -4}), frozenset({4, 5, 8, 9, 14, 17, 20, 24, -35, -32, -25, -19, -16, -13, -7, -3}), frozenset({3, 5, 7, 9, 13, 17, 19, 24, -35, -32, -25, -20, -16, -14, -8, -4}), frozenset({4, 5, 8, 9, 14, 17, 19, 25, -35, -32, -24, -20, -16, -13, -7, -3}), frozenset({3, 5, 7, 8, 14, 17, 19, 24, -35, -32, -25, -20, -16, -13, -9, -4}), frozenset({3, 5, 7, 9, 14, 17, 20, 24, -35, -32, -25, -19, -16, -13, -8, -4}), frozenset({3, 5, 7, 8, 13, 17, 20, 24, -35, -32, -25, -19, -16, -14, -9, -4}), frozenset({4, 5, 8, 9, 13, 17, 20, 25, -35, -32, -24, -19, -16, -14, -7, -3}), frozenset({4, 5, 7, 9, 13, 17, 19, 25, -35, -32, -24, -20, -16, -14, -8, -3}), frozenset({3, 4, 7, 8, 13, 17, 20, 24, -35, -32, -25, -19, -16, -14, -9, -5}), frozenset({3, 4, 7, 9, 14, 17, 19, 25, -35, -32, -24, -20, -16, -13, -8, -5}), frozenset({4, 5, 7, 9, 14, 17, 20, 24, -35, -32, -25, -19, -16, -13, -8, -3}), frozenset({4, 5, 8, 9, 13, 17, 19, 25, -35, -32, -24, -20, -16, -14, -7, -3}), frozenset({3, 5, 7, 8, 13, 16, 19, 25, -35, -32, -24, -20, -17, -14, -9, -4}), frozenset({3, 5, 7, 8, 13, 17, 19, 24, -35, -32, -25, -20, -16, -14, -9, -4}), frozenset({3, 4, 7, 9, 13, 17, 19, 24, -35, -32, -25, -20, -16, -14, -8, -5}), frozenset({3, 5, 7, 8, 13, 17, 19, 25, -35, -32, -24, -20, -16, -14, -9, -4}), frozenset({3, 4, 7, 8, 13, 17, 19, 24, -35, -32, -25, -20, -16, -14, -9, -5}), frozenset({3, 4, 7, 9, 14, 17, 20, 25, -35, -32, -24, -19, -16, -13, -8, -5}), frozenset({4, 5, 7, 9, 14, 17, 19, 24, -35, -32, -25, -20, -16, -13, -8, -3}), frozenset({3, 4, 7, 8, 13, 16, 19, 24, -35, -32, -25, -20, -17, -14, -9, -5}), frozenset({3, 5, 8, 9, 13, 17, 19, 25, -35, -32, -24, -20, -16, -14, -7, -4}), frozenset({3, 4, 7, 8, 14, 17, 19, 25, -35, -32, -24, -20, -16, -13, -9, -5}), frozenset({3, 5, 8, 9, 14, 17, 20, 25, -35, -32, -24, -19, -16, -13, -7, -4}), frozenset({5, 10, 13, 16, 19, 21, 22, 29, -34, -35, -28, -23, -20, -17, -14, -9, -4}), frozenset({4, 10, 13, 16, 19, 21, 22, 29, -34, -35, -28, -23, -20, -17, -14, -9, -5}), frozenset({4, 9, 13, 17, 19, 22, 23, 29, -34, -35, -28, -21, -20, -16, -14, -10, -5})]
210	itemsets left after W operation 	: [frozenset({-32, -16, 17, 36, 5}), frozenset({4, 6, 7, 8, 9, 13, 15, 19, 24, -36, 30, -31, -25, -20, -14, -11, -3}), frozenset({3, 4, 8, 9, 11, 13, 15, 20, 24, -36, 31, -30, -25, -19, -14, -7, -6}), frozenset({3, 4, 7, 8, 9, 13, 15, 20, 24, -36, 30, -31, -25, -19, -14, -11, -6}), frozenset({3, 6, 8, 9, 11, 13, 14, 19, 24, -36, 31, -30, -25, -20, -15, -7, -4}), frozenset({3, 6, 7, 8, 11, 14, 15, 19, 25, -36, 30, -31, -24, -20, -13, -9, -4}), frozenset({3, 4, 7, 9, 11, 13, 15, 19, 24, -36, 31, -30, -25, -20, -14, -8, -6}), frozenset({3, 6, 7, 9, 11, 14, 15, 19, 25, -36, 30, -31, -24, -20, -13, -8, -4}), frozenset({4, 6, 7, 9, 11, 14, 15, 20, 25, -36, 30, -31, -24, -19, -13, -8, -3}), frozenset({4, 6, 7, 8, 9, 14, 15, 20, 25, -36, 31, -30, -24, -19, -13, -11, -3}), frozenset({3, 6, 7, 9, 11, 13, 15, 19, 24, -36, 30, -31, -25, -20, -14, -8, -4}), frozenset({3, 6, 7, 8, 9, 14, 15, 19, 24, -36, 30, -31, -25, -20, -13, -11, -4}), frozenset({3, 6, 7, 9, 11, 14, 15, 20, 24, -36, 30, -31, -25, -19, -13, -8, -4}), frozenset({3, 6, 7, 8, 9, 13, 14, 19, 24, -36, 30, -31, -25, -20, -15, -11, -4}), frozenset({3, 6, 7, 8, 9, 14, 15, 19, 25, -36, 30, -31, -24, -20, -13, -11, -4}), frozenset({3, 6, 7, 8, 11, 13, 15, 19, 24, -36, 30, -31, -25, -20, -14, -9, -4}), frozenset({3, 4, 7, 8, 9, 13, 15, 20, 24, -36, 31, -30, -25, -19, -14, -11, -6}), frozenset({3, 6, 7, 8, 9, 13, 15, 19, 24, -36, 31, -30, -25, -20, -14, -11, -4}), frozenset({3, 4, 7, 8, 11, 13, 15, 20, 24, -36, 31, -30, -25, -19, -14, -9, -6}), frozenset({3, 6, 7, 9, 11, 14, 15, 20, 25, -36, 30, -31, -24, -19, -13, -8, -4}), frozenset({4, -25, 8, 9, 13, -19, -35, -14, 20, 24, -7, -36, -3}), frozenset({4, 7, -24, 9, -19, 14, -35, -13, 20, -8, 25, -36, -3}), frozenset({4, 7, -24, 9, -20, 14, -35, 19, -13, -8, 25, -36, -3}), frozenset({3, 7, 8, -24, -20, -4, 14, 19, -13, -9, 25, -36, -35}), frozenset({3, 7, 8, -25, -4, -19, 14, -13, 20, -9, 24, -36, -35}), frozenset({4, 8, 9, -24, -19, 14, -35, -13, 20, -7, -36, -3, 25}), frozenset({3, 7, -24, 9, -4, -19, 14, -13, 20, -8, 25, -36, -35}), frozenset({3, 7, -24, 9, -20, -4, 14, 19, -13, -8, 25, -36, -35}), frozenset({3, 8, 9, -24, -20, -4, 14, 19, -13, -7, -36, -35, 25}), frozenset({3, 7, -24, 9, -20, 13, -4, -14, 19, -8, 25, -36, -35}), frozenset({4, -25, 8, 9, -19, 14, -35, -13, 20, 24, -7, -36, -3}), frozenset({3, 7, -25, 9, -20, 13, -4, -14, 19, -8, 24, -36, -35}), frozenset({4, 8, 9, -24, -20, 14, -35, 19, -13, -7, -36, -3, 25}), frozenset({3, 7, 8, -25, -20, -4, 14, 19, -13, -9, 24, -36, -35}), frozenset({3, 7, -25, 9, -4, -19, 14, -13, 20, -8, 24, -36, -35}), frozenset({3, 7, 8, -25, -4, 13, -19, -14, 20, -9, 24, -36, -35}), frozenset({4, 8, 9, -24, 13, -19, -35, -14, 20, -7, -36, -3, 25}), frozenset({4, 7, -24, 9, -20, 13, -35, -14, 19, -8, 25, -36, -3}), frozenset({4, 7, -25, 9, -19, 14, -35, -13, 20, -8, 24, -36, -3}), frozenset({4, 8, 9, -24, -20, 13, -35, -14, 19, -7, -36, -3, 25}), frozenset({3, 7, 8, -25, -20, 13, -4, -14, 19, -9, 24, -36, -35}), frozenset({3, 7, 8, -24, -20, 13, -4, -14, 19, -9, 25, -36, -35}), frozenset({4, 7, -25, 9, -20, 14, -35, 19, -13, -8, 24, -36, -3}), frozenset({3, 8, 9, -24, -20, 13, -4, -14, 19, -7, -36, -35, 25}), frozenset({3, 8, 9, -24, -4, -19, 14, -13, 20, -7, -36, -35, 25})]
199	itemsets left after W operation 	: [frozenset({24, -25, 37, 7}), frozenset({2, 4, 5, 6, 8, 9, 11, 12, 13, 15, 17, 18, 20, 22, 23, 26, -37, 29, 30, -31, -28, -27, -21, -19, -16, -14, -10, -3}), frozenset({3, 4, 6, 8, 9, 13, 15, 17, 20, -37, 30, -32, -31, -19, -16, -14, -11, -5}), frozenset({3, 4, 6, 8, 9, 13, 15, 17, 20, -37, 31, -32, -30, -19, -16, -14, -11, -5}), frozenset({3, 4, 6, 8, 11, 13, 15, 16, 20, -37, 30, -32, -31, -19, -17, -14, -9, -5}), frozenset({3, 5, 6, 8, 9, 13, 15, 16, 19, -37, 31, -32, -30, -20, -17, -14, -11, -4}), frozenset({3, 4, 5, 8, 11, 13, 15, 16, 20, -37, 31, -32, -30, -19, -17, -14, -9, -6}), frozenset({3, 5, 6, 8, 9, 13, 15, 16, 20, -37, 31, -32, -30, -19, -17, -14, -11, -4}), frozenset({3, 4, 5, 9, 11, 13, 15, 16, 20, -37, 31, -32, -30, -19, -17, -14, -8, -6}), frozenset({3, 5, 6, 8, 9, 13, 14, 16, 19, -37, 30, -32, -31, -20, -17, -15, -11, -4}), frozenset({3, 4, 5, 8, 11, 13, 14, 16, 20, -37, 31, -32, -30, -19, -17, -15, -9, -6}), frozenset({2, 8, 12, 13, 17, 19, 20, 26, -37, 31, -33, -30, -27, -18, -16, -14, -9, -4}), frozenset({4, 9, 13, 14, 17, 19, 20, 26, -37, 31, -33, -30, -27, -18, -16, -12, -8, -2}), frozenset({4, 9, 13, 14, 17, 18, 19, 26, -37, 31, -33, -30, -27, -20, -16, -12, -8, -2}), frozenset({2, 3, 34, -27, 8, 12, 18, 26, -37}), frozenset({3, 4, 5, 8, 9, 13, 14, 17, 18, 20, 22, 23, 26, -37, 29, -35, -28, -27, -21, -19, -16, -12, -10, -2}), frozenset({2, 4, 5, 9, 10, 12, 14, 16, 18, 20, 21, 22, 26, -37, 29, -35, -28, -27, -23, -19, -17, -13, -8, -3}), frozenset({2, 3, 5, 9, 10, 12, 14, 16, 18, 20, 21, 23, 26, -37, 29, -35, -28, -27, -22, -19, -17, -13, -8, -4}), frozenset({-32, 3, 4, -5, 8, -19, 14, -17, 16, -13, 20, -9, -37, -35}), frozenset({-32, 3, 5, 8, 13, -19, -17, 16, -14, 20, -9, -37, -4, -35}), frozenset({-32, 3, 4, -5, 8, -19, 14, -16, 17, -13, 20, -9, -37, -35}), frozenset({-32, 3, 4, -5, 9, -20, 14, -17, 16, 19, -13, -8, -37, -35}), frozenset({-32, 3, 4, -5, 9, 13, -19, -17, 16, -14, 20, -8, -37, -35}), frozenset({-32, 3, 5, 8, -20, 13, -17, 16, -14, 19, -9, -37, -4, -35}), frozenset({-32, 3, 4, -5, 8, 13, -19, -16, 17, -14, 20, -9, -37, -35}), frozenset({-32, 3, 4, -5, 9, -20, 13, -16, 17, -14, 19, -8, -37, -35}), frozenset({-32, 3, 4, -5, 8, -20, 13, -16, 17, -14, 19, -9, -37, -35}), frozenset({-32, 3, 4, -5, 8, -20, 13, -17, 16, -14, 19, -9, -37, -35}), frozenset({-31, 4, 6, 8, 9, -20, 13, 15, -14, 19, -11, -37, -36, -3, 30}), frozenset({-31, 3, 4, 8, 9, 13, -19, 15, -14, 20, -11, -6, -37, -36, 30}), frozenset({-30, 3, 4, 9, 11, -20, 13, 15, -14, 19, -8, -6, -37, -36, 31}), frozenset({-31, 3, 6, 9, 11, -20, 13, -36, 15, -14, 19, -8, -37, -4, 30}), frozenset({-31, 3, 6, 8, 9, -36, -20, 14, 15, 19, -13, -11, -37, -4, 30}), frozenset({-31, 3, 6, 9, 11, -36, -19, 14, 15, -13, 20, -8, -37, -4, 30}), frozenset({-31, 3, 6, 8, 9, -36, -20, 13, 14, -15, 19, -11, -37, -4, 30}), frozenset({-31, 3, 6, 8, 11, -20, 13, -36, 15, -14, 19, -9, -37, -4, 30}), frozenset({-30, 3, 4, 8, 9, 13, -19, 15, -14, 20, -11, -6, -37, -36, 31}), frozenset({-30, 3, 6, 8, 9, -36, -20, 13, 15, -14, 19, -11, -37, -4, 31}), frozenset({-30, 3, 4, 8, 11, 13, -19, 15, -14, 20, -9, -6, -37, -36, 31}), frozenset({3, 8, -4, -19, 14, -13, 20, -9, -37, -36, -35}), frozenset({3, 9, -20, 13, -4, -14, 19, -8, -37, -36, -35}), frozenset({3, 8, -20, -4, 14, 19, -13, -9, -37, -36, -35}), frozenset({3, 9, -4, -19, 14, -13, 20, -8, -37, -36, -35}), frozenset({3, 8, -4, -19, 13, -14, 20, -9, -37, -36, -35}), frozenset({4, 9, -19, 14, -35, -13, 20, -8, -37, -36, -3}), frozenset({3, 8, -20, 13, -4, -14, 19, -9, -37, -36, -35}), frozenset({4, 9, -20, 14, -35, 19, -13, -8, -37, -36, -3})]
198	itemsets left after W operation 	: [frozenset({9, 19, -20, 38}), frozenset({3, 5, 6, 8, 11, 13, 14, 16, 25, -38, 31, -32, -30, -24, -17, -15, -7, -4}), frozenset({3, 4, 6, 7, 8, 14, 15, 17, 25, -38, 30, -32, -31, -24, -16, -13, -11, -5}), frozenset({4, 7, 13, 14, 17, 18, 25, -38, 27, 31, -33, -30, -26, -24, -16, -12, -8, -2}), frozenset({4, 7, 13, 14, 17, 18, 25, 26, -38, 31, -33, -30, -27, -24, -16, -12, -8, -2}), frozenset({4, 8, 12, 14, 17, 18, 25, 26, -38, 30, -33, -31, -27, -24, -16, -13, -7, -2}), frozenset({4, 8, 12, 14, 17, 18, 25, 26, -38, 31, -33, -30, -27, -24, -16, -13, -7, -2}), frozenset({4, 8, 12, 13, 16, 18, 25, 26, -38, 30, -33, -31, -27, -24, -17, -14, -7, -2}), frozenset({4, 6, 10, 13, 15, 16, 22, 23, -38, 28, -34, 31, -30, -29, -21, -17, -14, -11, -5}), frozenset({5, 6, 10, 13, 14, 16, 21, 22, -38, 29, 30, -34, -31, -28, -23, -17, -15, -11, -4}), frozenset({4, 5, 10, 13, 14, 16, 21, 22, -38, 28, -34, 31, -30, -29, -23, -17, -15, -11, -6}), frozenset({4, 6, 10, 13, 14, 16, 21, 22, -38, 28, -34, 31, -30, -29, -23, -17, -15, -11, -5}), frozenset({5, 6, 10, 13, 15, 16, 21, 23, -38, 29, -34, 31, -30, -28, -22, -17, -14, -11, -4}), frozenset({5, 6, 10, 13, 14, 16, 22, 23, -38, 28, -34, 31, -30, -29, -21, -17, -15, -11, -4}), frozenset({5, 6, 10, 13, 14, 16, 22, 23, -38, 28, 30, -34, -31, -29, -21, -17, -15, -11, -4}), frozenset({4, 6, 10, 13, 14, 16, 22, 23, -38, 28, -34, 31, -30, -29, -21, -17, -15, -11, -5}), frozenset({4, 6, 10, 13, 14, 17, 22, 23, -38, 28, -34, 31, -30, -29, -21, -16, -15, -11, -5}), frozenset({2, 3, 5, 7, 10, 12, 14, 16, 18, 21, 23, 25, 26, -38, 29, -35, -28, -27, -24, -22, -17, -13, -8, -4}), frozenset({2, 4, 5, 7, 8, 12, 14, 17, 18, 22, 23, 25, 26, -38, 29, -35, -28, -27, -24, -21, -16, -13, -10, -3}), frozenset({-32, 3, 5, -25, 8, 13, -17, 16, -14, 24, -7, -38, -4, -35}), frozenset({-32, 3, 4, 7, -24, 14, -16, 17, -13, -8, 25, -38, -5, -35}), frozenset({4, -28, -21, 13, -16, 17, -14, 29, 22, 23, -10, -38, -5, -35, -34}), frozenset({-30, 3, 6, -25, 8, 11, -36, 13, 14, -15, 24, -7, -38, -4, 31}), frozenset({-31, 3, 6, 7, -24, 11, -36, 14, 15, -13, -8, 25, -38, -4, 30}), frozenset({-31, 3, 6, 7, 8, -24, -36, 14, 15, -13, -11, 25, -38, -4, 30}), frozenset({4, 7, -24, 14, -35, -13, -8, 25, -38, -36, -3}), frozenset({3, 7, -24, -4, 14, -13, -8, 25, -38, -36, -35}), frozenset({3, 8, -24, -4, 14, -13, -7, -38, -36, -35, 25}), frozenset({3, 7, -24, -4, 13, -14, -8, 25, -38, -36, -35}), frozenset({4, 8, -24, 14, -35, -13, -7, -38, -36, -3, 25}), frozenset({4, 7, -24, 13, -35, -14, -8, 25, -38, -36, -3}), frozenset({4, 8, -24, 13, -35, -14, -7, -38, -36, -3, 25}), frozenset({3, 8, -24, -4, 13, -14, -7, -38, -36, -35, 25}), frozenset({3, 5, 6, 8, 13, 15, 16, -38, -37, 31, -32, -30, -17, -14, -11, -4}), frozenset({3, 5, 6, 8, 13, 14, 16, -38, -37, 30, -32, -31, -17, -15, -11, -4}), frozenset({4, 13, 14, 17, 18, -38, 26, -37, -33, 31, -30, -27, -16, -12, -8, -2}), frozenset({-32, 3, 4, -5, 14, -17, 16, -13, -8, -38, -37, -35}), frozenset({-32, 3, 4, -5, 13, -16, 17, -14, -8, -38, -37, -35}), frozenset({-31, 4, 6, 8, 13, 15, -14, -11, -38, -37, -36, -3, 30}), frozenset({-30, 3, 4, -6, 11, 13, 15, -14, -8, -38, -37, -36, 31}), frozenset({-31, 3, 6, 11, -36, 13, 15, -14, -8, -38, -37, -4, 30}), frozenset({-31, 3, 6, 8, -36, 14, 15, -13, -11, -38, -37, -4, 30}), frozenset({-31, 3, 6, 8, -36, 13, 14, -15, -11, -38, -37, -4, 30}), frozenset({-30, 3, 6, 8, -36, 13, 15, -14, -11, -38, -37, -4, 31}), frozenset({3, -4, 13, -14, -8, -38, -37, -36, -35}), frozenset({4, 14, -35, -13, -8, -38, -37, -36, -3})]
171	itemsets left after W operation 	: [frozenset({-30, 31, 13, 39}), frozenset({3, 5, 6, 7, 8, 11, 14, 16, 19, 25, -39, -32, -24, -20, -17, -15, -9, -4}), frozenset({3, 4, 6, 7, 8, 11, 14, 17, 19, 25, -39, -32, -24, -20, -16, -15, -9, -5}), frozenset({4, 8, 9, 14, 17, 19, 20, 25, 26, -39, -33, -27, -24, -18, -16, -12, -7, -2}), frozenset({4, 7, 9, 14, 17, 18, 20, 25, 26, -39, -33, -27, -24, -19, -16, -12, -8, -2}), frozenset({4, 7, 9, 14, 17, 18, 20, 25, -39, 27, -33, -26, -24, -19, -16, -12, -8, -2}), frozenset({4, 7, 8, 14, 17, 18, 20, 25, -39, 27, -33, -26, -24, -19, -16, -12, -9, -2}), frozenset({4, 7, 9, 14, 16, 18, 20, 25, -39, 27, -33, -26, -24, -19, -17, -12, -8, -2}), frozenset({4, 8, 9, 12, 17, 18, 20, 24, -39, 26, -33, -27, -25, -19, -16, -14, -7, -2}), frozenset({4, 5, 10, 11, 15, 16, 19, 22, 23, -39, 28, -34, -29, -21, -20, -17, -14, -9, -6}), frozenset({4, 6, 9, 10, 14, 16, 20, 21, 22, -39, 28, -34, -29, -23, -19, -17, -15, -11, -5}), frozenset({4, 6, 9, 10, 14, 16, 20, 21, 23, -39, 28, -34, -29, -22, -19, -17, -15, -11, -5}), frozenset({4, 5, 10, 11, 15, 17, 20, 22, 23, -39, 28, -34, -29, -21, -19, -16, -14, -9, -6}), frozenset({3, 4, -25, 8, 9, 11, -19, 15, -14, 20, 24, -39, -6, -36, -7}), frozenset({3, 4, 6, 8, 9, 15, 17, 20, -39, -37, -32, -19, -16, -14, -11, -5}), frozenset({3, 4, 5, 8, 11, 15, 16, 20, -39, -37, -32, -19, -17, -14, -9, -6}), frozenset({3, 5, 6, 8, 9, 15, 16, 20, -39, -37, -32, -19, -17, -14, -11, -4}), frozenset({3, 4, 5, 9, 11, 15, 16, 20, -39, -37, -32, -19, -17, -14, -8, -6}), frozenset({3, 4, 5, 8, 11, 14, 16, 20, -39, -37, -32, -19, -17, -15, -9, -6}), frozenset({2, 8, 12, 17, 19, 20, -39, 26, -37, -33, -27, -18, -16, -14, -9, -4}), frozenset({4, 9, 14, 17, 19, 20, -39, 26, -37, -33, -27, -18, -16, -12, -8, -2}), frozenset({3, 4, 8, 9, -19, 15, -14, 20, -11, -39, -6, -37, -36}), frozenset({3, 4, 8, 11, -19, 15, -14, 20, -9, -39, -6, -37, -36}), frozenset({3, 5, 6, 8, 11, 14, 16, -39, 25, -38, -32, -24, -17, -15, -7, -4}), frozenset({4, 7, 14, 17, 18, 25, -38, 27, -39, -33, -26, -24, -16, -12, -8, -2}), frozenset({4, 7, 14, 17, 18, 25, -38, 26, -39, -33, -27, -24, -16, -12, -8, -2}), frozenset({4, 6, 10, 15, 16, 22, 23, -39, -38, 28, -34, -29, -21, -17, -14, -11, -5}), frozenset({4, 5, 10, 14, 16, 21, 22, -39, -38, 28, -34, -29, -23, -17, -15, -11, -6}), frozenset({4, 6, 10, 14, 16, 21, 22, -39, -38, 28, -34, -29, -23, -17, -15, -11, -5}), frozenset({5, 6, 10, 15, 16, 21, 23, -39, -38, 29, -34, -28, -22, -17, -14, -11, -4}), frozenset({5, 6, 10, 14, 16, 22, 23, -39, -38, 28, -34, -29, -21, -17, -15, -11, -4}), frozenset({4, 6, 10, 14, 16, 22, 23, -39, -38, 28, -34, -29, -21, -17, -15, -11, -5}), frozenset({4, 6, 10, 14, 17, 22, 23, -39, -38, 28, -34, -29, -21, -16, -15, -11, -5}), frozenset({3, 6, -25, 8, 11, -36, 14, -15, 24, -39, -38, -4, -7}), frozenset({-32, 3, 5, 6, 8, 15, 16, -17, -14, -11, -39, -38, -37, -4}), frozenset({-38, 4, -27, 14, -16, 17, 18, -12, -8, -39, 26, -37, -2, -33}), frozenset({-6, 3, 4, 11, 15, -14, -8, -39, -38, -37, -36}), frozenset({3, 6, 8, -36, 15, -14, -11, -39, -38, -37, -4})]
147	itemsets left after W operation 	: [frozenset({-16, 17, 40, 4}), frozenset({7, 8, 13, 14, 18, 19, -40, 25, 27, 30, -33, -31, -26, -24, -20, -12, -9, -2}), frozenset({8, 9, 12, 14, 18, 20, -40, 25, 26, 31, -33, -30, -27, -24, -19, -13, -7, -2}), frozenset({5, 9, 11, 14, 15, 20, 22, 23, -40, 29, -34, 31, -30, -28, -21, -19, -13, -10, -6}), frozenset({-32, 3, 7, -24, 9, -8, -19, 14, -13, 20, -40, 25, -5, -35}), frozenset({-32, 3, 7, 8, -24, -20, 14, 19, -13, -9, -40, 25, -5, -35}), frozenset({2, 5, 6, 8, 9, 11, 12, 13, 15, 18, 20, 22, 23, -40, 26, -37, 29, 30, -31, -28, -27, -21, -19, -14, -10, -3}), frozenset({3, 6, 8, 9, 13, 15, 20, -40, -37, 30, -32, -31, -19, -14, -11, -5}), frozenset({3, 5, 8, 9, 13, 14, 18, 20, 22, 23, -40, 26, -37, 29, -35, -28, -27, -21, -19, -12, -10, -2}), frozenset({-32, 3, -5, 8, -19, 14, -13, 20, -9, -40, -37, -35}), frozenset({-32, 3, -5, 8, 13, -19, -14, 20, -9, -40, -37, -35}), frozenset({-32, 3, -5, 8, -20, 13, -14, 19, -9, -40, -37, -35}), frozenset({3, 6, 7, 8, 14, 15, -40, 25, -38, 30, -32, -31, -24, -13, -11, -5}), frozenset({8, 12, 14, 18, -40, 25, -38, 26, 30, -33, -31, -27, -24, -13, -7, -2}), frozenset({8, 12, 14, 18, -40, 25, -38, 26, -33, 31, -30, -27, -24, -13, -7, -2}), frozenset({2, 5, 7, 8, 12, 14, 18, 22, 23, -40, 25, 26, -38, 29, -35, -28, -27, -24, -21, -13, -10, -3}), frozenset({-32, 3, 7, -24, -8, 14, -13, -40, 25, -38, -5, -35}), frozenset({-28, -21, 13, -14, 29, 22, 23, -40, -10, -38, -5, -35, -34}), frozenset({-32, 3, -5, -8, 13, -14, -40, -38, -37, -35}), frozenset({3, 6, 7, 8, 11, 14, 19, -40, 25, -39, -32, -24, -20, -15, -9, -5}), frozenset({8, 9, 14, 19, 20, -40, 25, 26, -39, -33, -27, -24, -18, -12, -7, -2}), frozenset({7, 9, 14, 18, 20, -40, 25, 26, -39, -33, -27, -24, -19, -12, -8, -2}), frozenset({7, 9, 14, 18, 20, -40, 25, -39, 27, -33, -26, -24, -19, -12, -8, -2}), frozenset({7, 8, 14, 18, 20, -40, 25, -39, 27, -33, -26, -24, -19, -12, -9, -2}), frozenset({8, 9, 12, 18, 20, -40, 24, -39, 26, -33, -27, -25, -19, -14, -7, -2}), frozenset({5, 10, 11, 15, 20, 22, 23, -40, -39, 28, -34, -29, -21, -19, -14, -9, -6}), frozenset({-32, 3, 6, -37, 8, 9, -19, 15, -14, 20, -11, -40, -39, -5}), frozenset({-27, -8, 9, 14, -18, 19, 20, -12, -40, -39, 26, -37, -2, -33}), frozenset({-26, 7, -24, -8, 14, 18, -12, -40, 25, -38, 27, -39, -2, -33}), frozenset({-38, -27, 7, -24, -8, 14, 18, -12, -40, 25, 26, -39, -2, -33}), frozenset({-29, 6, 10, -21, 14, -15, -11, 22, 23, -40, -39, -38, -5, 28, -34}), frozenset({-38, -27, -8, 14, 18, -12, -40, -39, 26, -37, -2, -33})]
144	itemsets left after W operation 	: [frozenset({41, 20, -19}), frozenset({2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 18, 21, 22, -41, 25, 26, 29, 30, -31, -28, -27, -24, -23, -17, -14, -10, -3}), frozenset({3, 5, 6, 8, 9, 11, 14, 15, 16, -41, 25, 30, -32, -31, -24, -17, -13, -7, -4}), frozenset({4, 8, 9, 12, 14, 16, 18, -41, 24, 26, 31, -33, -30, -27, -25, -17, -13, -7, -2}), frozenset({5, 6, 9, 10, 13, 14, 16, 21, 22, -41, 28, 30, -34, -31, -29, -23, -17, -15, -11, -4}), frozenset({5, 6, 9, 10, 13, 14, 16, 22, 23, -41, 28, 30, -34, -31, -29, -21, -17, -15, -11, -4}), frozenset({-32, 3, 4, 7, 8, -24, 13, -17, 16, -14, -9, -41, 25, -5, -35}), frozenset({-32, 4, 5, 7, -24, 9, 14, -17, 16, -35, -13, -41, -8, 25, -3}), frozenset({4, 6, 7, 9, 11, 14, 15, -41, 25, -36, 30, -31, -24, -13, -8, -3}), frozenset({4, 6, 7, 8, 9, 14, 15, -41, 25, -36, 31, -30, -24, -13, -11, -3}), frozenset({3, 6, 7, 9, 11, 14, 15, -41, 25, -36, 30, -31, -24, -13, -8, -4}), frozenset({4, -25, 8, 9, 13, -35, -14, -41, 24, -7, -36, -3}), frozenset({4, 7, -24, 9, 14, -35, -13, -41, -8, 25, -36, -3}), frozenset({4, 8, 9, -24, 14, -35, -13, -41, -7, -36, -3, 25}), frozenset({3, 7, -24, 9, -4, 14, -13, -41, -8, 25, -36, -35}), frozenset({4, -25, 8, 9, 14, -35, -13, -41, 24, -7, -36, -3}), frozenset({4, 8, 9, -24, 13, -35, -14, -41, -7, -36, -3, 25}), frozenset({3, 8, 9, -24, -4, 14, -13, -41, -7, -36, -35, 25}), frozenset({3, 4, 6, 8, 11, 13, 15, 16, -41, -37, 30, -32, -31, -17, -14, -9, -5}), frozenset({2, 4, 5, 9, 10, 12, 14, 16, 18, 21, 22, -41, 26, -37, 29, -35, -28, -27, -23, -17, -13, -8, -3}), frozenset({2, 3, 5, 9, 10, 12, 14, 16, 18, 21, 23, -41, 26, -37, 29, -35, -28, -27, -22, -17, -13, -8, -4}), frozenset({-32, 3, 4, -5, 8, 14, -17, 16, -13, -9, -41, -37, -35}), frozenset({-32, 3, 5, 8, 13, -17, 16, -14, -9, -41, -37, -4, -35}), frozenset({-32, 3, 4, -5, 9, 13, -17, 16, -14, -41, -8, -37, -35}), frozenset({-31, 3, 4, 8, 9, 13, 15, -14, -11, -41, -6, -37, -36, 30}), frozenset({-31, 3, 6, 9, 11, -36, 14, 15, -13, -41, -8, -37, -4, 30}), frozenset({3, 8, -4, 14, -13, -9, -41, -37, -36, -35}), frozenset({3, 9, -4, 14, -13, -41, -8, -37, -36, -35}), frozenset({3, 8, -4, 13, -14, -9, -41, -37, -36, -35}), frozenset({4, 9, 14, -35, -13, -41, -8, -37, -36, -3}), frozenset({4, 7, 9, 14, 16, 18, -41, 25, -39, 27, -33, -26, -24, -17, -12, -8, -2}), frozenset({4, 6, 9, 10, 14, 16, 21, 22, -41, -39, 28, -34, -29, -23, -17, -15, -11, -5}), frozenset({4, 6, 9, 10, 14, 16, 21, 23, -41, -39, 28, -34, -29, -22, -17, -15, -11, -5}), frozenset({3, 4, -25, 8, 9, 11, 15, -14, -41, 24, -39, -6, -36, -7}), frozenset({-32, 3, 4, 5, 8, 11, 15, 16, -17, -14, -9, -41, -39, -6, -37}), frozenset({-32, 3, 5, 6, 8, 9, 15, 16, -17, -14, -11, -41, -39, -37, -4}), frozenset({-32, 3, 4, 5, 9, 11, 15, 16, -17, -14, -41, -8, -39, -6, -37}), frozenset({-32, 3, 4, 5, 8, 11, 14, -17, 16, -15, -9, -41, -39, -6, -37}), frozenset({3, 4, 8, 9, 15, -14, -11, -41, -39, -6, -37, -36}), frozenset({3, 4, 8, 11, 15, -14, -9, -41, -39, -6, -37, -36}), frozenset({8, 9, 12, 14, 18, -41, -40, 25, 26, 31, -33, -30, -27, -24, -13, -7, -2}), frozenset({5, 9, 11, 14, 15, 22, 23, -40, -41, 29, -34, 31, -30, -28, -21, -13, -10, -6}), frozenset({-32, 3, 7, -24, 9, -8, 14, -13, -41, -40, 25, -5, -35}), frozenset({2, 5, 6, 8, 9, 11, 12, 13, 15, 18, 22, 23, -40, -41, 26, -37, 29, 30, -31, -28, -27, -21, -14, -10, -3}), frozenset({-32, -31, 3, 6, -37, 8, 9, 13, 15, -14, -11, -41, -40, -5, 30}), frozenset({3, 5, 8, 9, 13, 14, 18, 22, 23, -40, -41, 26, -37, 29, -35, -28, -27, -21, -12, -10, -2}), frozenset({-32, 3, -5, 8, 14, -13, -9, -41, -40, -37, -35}), frozenset({-32, 3, -5, 8, 13, -14, -9, -41, -40, -37, -35}), frozenset({-27, 7, -24, 9, 14, 18, -40, -12, -41, -8, 25, 26, -39, -2, -33}), frozenset({-26, 7, -24, 9, 14, 18, -40, -12, -41, -8, 25, 27, -39, -2, -33}), frozenset({-26, 7, 8, -24, 14, 18, -9, -12, -41, -40, 25, 27, -39, -2, -33}), frozenset({-27, -25, 8, 9, 12, 18, -14, -41, -40, 24, 26, -39, -7, -2, -33}), frozenset({5, 10, 11, 15, 22, -41, 23, -40, -39, 28, -34, -29, -21, -14, -9, -6}), frozenset({-32, 3, 6, -37, 8, 9, 15, -14, -11, -41, -40, -39, -5})]
143	itemsets left after W operation 	: [frozenset({-24, 25, 42}), frozenset({4, 8, 9, 12, 14, 16, 19, 20, -42, 26, 31, -33, -30, -27, -18, -17, -13, -7, -2}), frozenset({2, 3, 5, 7, 8, 10, 12, 13, 16, 18, 19, 21, 22, -42, 26, 29, -35, -28, -27, -23, -20, -17, -14, -9, -4}), frozenset({-32, 3, 5, 7, 8, -20, 13, -17, 16, -14, 19, -42, -9, -4, -35}), frozenset({3, 6, 7, 8, 11, 14, 15, 19, -42, -36, 30, -31, -20, -13, -9, -4}), frozenset({3, 7, 8, -36, -20, 14, 19, -13, -42, -9, -4, -35}), frozenset({3, 7, 8, -36, -20, 13, -14, 19, -42, -9, -4, -35}), frozenset({4, 8, 12, 13, 16, 18, -42, 26, -38, 30, -33, -31, -27, -17, -14, -7, -2}), frozenset({2, 3, 5, 7, 10, 12, 14, 16, 18, 21, -42, 23, 26, -38, 29, -35, -28, -27, -22, -17, -13, -8, -4}), frozenset({-31, 3, 6, 7, 11, -4, 14, 15, -13, -42, -8, -38, -36, 30}), frozenset({-31, 3, 6, 7, 8, -4, 14, 15, -13, -11, -42, -38, -36, 30}), frozenset({4, 7, 14, -3, -13, -42, -8, -38, -36, -35}), frozenset({3, 7, -36, 14, -13, -42, -8, -38, -4, -35}), frozenset({3, 8, -36, 14, -13, -42, -7, -38, -4, -35}), frozenset({3, 7, -36, 13, -14, -42, -8, -38, -4, -35}), frozenset({4, 8, 14, -3, -13, -42, -7, -38, -36, -35}), frozenset({4, 7, 13, -3, -14, -42, -8, -38, -36, -35}), frozenset({4, 8, 13, -3, -14, -42, -7, -38, -36, -35}), frozenset({3, 8, -36, 13, -14, -42, -7, -38, -4, -35}), frozenset({3, 5, 6, 7, 8, 11, 14, 16, 19, -42, -39, -32, -20, -17, -15, -9, -4}), frozenset({-32, 3, 5, 6, 8, 11, 14, -17, 16, -15, -42, -39, -38, -4, -7}), frozenset({7, 8, 13, 14, 18, 19, -42, -40, 27, 30, -33, -31, -26, -20, -12, -9, -2}), frozenset({-32, 3, 7, 8, -20, 14, 19, -13, -42, -9, -40, -5, -35}), frozenset({-32, -31, 3, 6, 7, 8, 14, 15, -13, -11, -42, -40, -38, -5, 30}), frozenset({-31, 26, -27, 8, 12, 14, 18, -13, -2, -42, -40, -7, -38, 30, -33}), frozenset({-30, 26, -27, 8, 12, 14, 18, -13, -42, -40, -7, -38, 31, -2, -33}), frozenset({2, 5, 7, 8, 12, 14, 18, 22, 23, -40, -42, 26, -38, 29, -35, -28, -27, -21, -13, -10, -3}), frozenset({-32, 3, 7, 14, -13, -42, -40, -8, -38, -5, -35}), frozenset({-32, 3, 6, 7, 8, 11, -20, 14, -15, 19, -42, -9, -40, -39, -5}), frozenset({-27, 8, 9, 14, -18, 19, 20, -12, -42, -40, -39, 26, -7, -2, -33}), frozenset({-26, 7, 14, 18, -12, -42, -40, -8, -39, -38, 27, -2, -33}), frozenset({26, -27, 7, 14, 18, -12, -42, -40, -8, -39, -38, -2, -33}), frozenset({2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 18, 21, 22, -41, -42, 26, 29, 30, -31, -28, -27, -23, -17, -14, -10, -3}), frozenset({3, 5, 6, 8, 9, 11, 14, 15, 16, -42, -41, 30, -32, -31, -17, -13, -7, -4}), frozenset({-32, 3, 4, 7, 8, 13, -17, 16, -14, -41, -42, -9, -5, -35}), frozenset({-32, 4, 5, 7, 9, 14, -17, 16, -3, -13, -42, -41, -8, -35}), frozenset({-31, 4, 6, 7, 9, 11, 14, 15, -13, -42, -41, -8, -36, -3, 30}), frozenset({-30, 4, 6, 7, 8, 9, 14, 15, -13, -11, -42, -41, -36, -3, 31}), frozenset({-31, 3, 6, 7, 9, 11, -4, 14, 15, -13, -42, -41, -8, -36, 30}), frozenset({4, 7, 9, 14, -3, -13, -42, -41, -8, -36, -35}), frozenset({4, 8, 9, 14, -3, -13, -42, -41, -7, -36, -35}), frozenset({3, 7, 9, -36, 14, -13, -42, -41, -8, -4, -35}), frozenset({4, 8, 9, 13, -3, -14, -42, -41, -7, -36, -35}), frozenset({3, 8, 9, -36, 14, -13, -42, -41, -7, -4, -35}), frozenset({4, 7, 9, 14, 16, 18, -42, -41, -39, 27, -33, -26, -17, -12, -8, -2}), frozenset({8, 9, 12, 14, 18, -42, -41, -40, 26, -33, 31, -30, -27, -13, -7, -2}), frozenset({-32, 3, 7, 9, 14, -13, -40, -42, -41, -8, -5, -35}), frozenset({-27, 7, -8, 9, 14, 18, -12, -42, -41, -40, -39, 26, -2, -33}), frozenset({-26, 7, -8, 9, 14, 18, -12, -42, -41, -40, -39, 27, -2, -33}), frozenset({-26, 7, 8, 14, 18, -41, -12, -42, -9, -40, -39, 27, -2, -33})]
115	itemsets left after W operation 	: [frozenset({-32, 8, 3, 43}), frozenset({5, -20, 13, -17, 16, -14, 19, -43, -9, -37, -4, -35}), frozenset({4, -5, -20, 13, -17, 16, -14, 19, -43, -9, -37, -35}), frozenset({5, -25, 13, -17, 16, -14, -43, 24, -7, -38, -4, -35}), frozenset({-31, 5, 6, 13, 14, -17, 16, -15, -11, -43, -38, -37, -4, 30}), frozenset({5, 6, -17, 16, 15, -14, -11, -43, -39, -38, -37, -4}), frozenset({-5, -20, 13, -14, 19, -43, -9, -40, -37, -35}), frozenset({-31, 4, 6, -37, 11, 13, 15, 16, -17, -14, -41, -43, -9, -5, 30}), frozenset({4, -5, 14, -17, 16, -13, -9, -43, -41, -37, -35}), frozenset({5, 13, -17, 16, -14, -9, -43, -41, -37, -4, -35}), frozenset({4, 5, 11, 15, 16, -17, -14, -9, -43, -41, -39, -6, -37}), frozenset({5, 6, 9, 15, 16, -17, -14, -11, -43, -41, -39, -37, -4}), frozenset({4, 5, 11, 14, -17, 16, -15, -9, -43, -41, -39, -6, -37}), frozenset({-31, 6, -5, 9, 13, 15, -14, -11, -43, -41, -40, -37, 30}), frozenset({-5, 14, -41, -13, -43, -9, -40, -37, -35}), frozenset({-5, 13, -14, -41, -43, -9, -40, -37, -35}), frozenset({6, -5, 9, 15, -14, -11, -43, -41, -40, -39, -37}), frozenset({5, 7, -20, 13, -17, 16, -14, 19, -43, -42, -9, -4, -35}), frozenset({5, 6, 7, 11, -20, 14, -17, 16, -15, 19, -43, -42, -9, -39, -4}), frozenset({5, 6, 11, 14, -17, 16, -15, -43, -42, -39, -38, -4, -7}), frozenset({7, -20, 14, -13, 19, -43, -42, -9, -40, -5, -35}), frozenset({-31, 6, 7, 14, 15, -13, -11, -42, -43, -40, -38, -5, 30}), frozenset({6, 7, 11, -20, 14, -15, 19, -43, -42, -9, -40, -39, -5}), frozenset({5, 6, 9, 11, 14, 15, 16, -43, -42, -41, 30, -31, -17, -13, -7, -4}), frozenset({4, 7, 13, -17, 16, -14, -41, -43, -42, -9, -5, -35})]
114	itemsets left after W operation 	: [frozenset({16, 44, -17}), frozenset({-31, 5, 6, 9, 11, 14, 15, -13, -44, -43, -42, -41, -7, -4, 30}), frozenset({5, 10, 13, 19, -44, 21, 22, -35, 29, -34, -28, -23, -20, -14, -9, -4}), frozenset({4, 10, 13, 19, -44, 21, 22, -35, 29, -34, -28, -23, -20, -14, -9, -5}), frozenset({4, 7, 13, -14, -41, -44, -43, -42, -9, -5, -35}), frozenset({5, 6, 10, 13, 14, -44, 21, 22, -38, 29, 30, -34, -31, -28, -23, -15, -11, -4}), frozenset({5, 6, 10, 13, 14, -44, 22, 23, -38, 28, 30, -34, -31, -29, -21, -15, -11, -4}), frozenset({-32, 3, 4, -5, 14, -13, -44, -8, -38, -37, -35}), frozenset({4, 5, 10, 11, 15, 19, -44, 22, 23, -39, 28, -34, -29, -21, -20, -14, -9, -6}), frozenset({4, 6, 10, 15, -44, 22, 23, -39, -38, 28, -34, -29, -21, -14, -11, -5}), frozenset({4, 5, 10, 14, -44, 21, 22, -39, -38, 28, -34, -29, -23, -15, -11, -6}), frozenset({4, 6, 10, 14, -44, 21, 22, -39, -38, 28, -34, -29, -23, -15, -11, -5}), frozenset({5, 6, 10, 15, -44, 21, 23, -39, -38, 29, -34, -28, -22, -14, -11, -4}), frozenset({5, 6, 10, 14, -44, 22, 23, -39, -38, 28, -34, -29, -21, -15, -11, -4}), frozenset({4, 6, 10, 14, -44, 22, 23, -39, -38, 28, -34, -29, -21, -15, -11, -5}), frozenset({4, 8, 9, 12, 14, 18, -44, -41, 24, 26, 31, -33, -30, -27, -25, -13, -7, -2}), frozenset({5, 6, 9, 10, 13, 14, -44, 21, 22, -41, 28, 30, -34, -31, -29, -23, -15, -11, -4}), frozenset({5, 6, 9, 10, 13, 14, -44, 22, 23, -41, 28, 30, -34, -31, -29, -21, -15, -11, -4}), frozenset({2, 4, 5, 9, 10, 12, 14, 18, -44, 21, 22, -41, 26, -37, 29, -35, -28, -27, -23, -13, -8, -3}), frozenset({2, 3, 5, 9, 10, 12, 14, 18, -44, 21, 23, -41, 26, -37, 29, -35, -28, -27, -22, -13, -8, -4}), frozenset({-32, 3, 4, -5, 9, 13, -14, -44, -41, -8, -37, -35}), frozenset({4, 6, 9, 10, 14, -44, 21, 22, -41, -39, 28, -34, -29, -23, -15, -11, -5}), frozenset({4, 6, 9, 10, 14, -44, 21, 23, -41, -39, 28, -34, -29, -22, -15, -11, -5}), frozenset({-32, 3, 4, 5, 9, 11, 15, -14, -44, -41, -8, -39, -6, -37}), frozenset({4, 8, 9, 12, 14, 19, 20, -44, -42, 26, 31, -33, -30, -27, -18, -13, -7, -2}), frozenset({2, 3, 5, 7, 8, 10, 12, 13, 18, 19, -44, 21, 22, -42, 26, 29, -35, -28, -27, -23, -20, -14, -9, -4}), frozenset({4, 8, 12, 13, 18, -44, -42, -38, 26, 30, -33, -31, -27, -14, -7, -2}), frozenset({2, 3, 5, 7, 10, 12, 14, 18, -44, 21, -42, 23, 26, -38, 29, -35, -28, -27, -22, -13, -8, -4}), frozenset({2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 18, -44, 21, 22, -41, -42, 26, 29, 30, -31, -28, -27, -23, -14, -10, -3}), frozenset({-32, 4, 5, 7, 9, 14, -3, -13, -44, -42, -41, -8, -35}), frozenset({4, -26, 7, 9, 14, 18, -12, -44, -42, -41, -8, -39, 27, -2, -33}), frozenset({5, -20, 13, -14, 19, -44, -43, -9, -37, -4, -35}), frozenset({4, -5, -20, 13, -14, 19, -44, -43, -9, -37, -35}), frozenset({5, -25, 13, -14, -44, -43, 24, -7, -38, -4, -35}), frozenset({-31, 5, 6, 13, 14, -15, -44, -11, -43, -38, -37, -4, 30}), frozenset({5, 6, 15, -14, -44, -11, -43, -39, -38, -37, -4}), frozenset({-31, 4, 6, -37, 11, 13, 15, -14, -41, -44, -43, -9, -5, 30}), frozenset({4, -5, 14, -13, -44, -43, -9, -41, -37, -35}), frozenset({5, 13, -14, -9, -44, -43, -41, -37, -4, -35}), frozenset({4, 5, 11, 15, -14, -9, -44, -43, -41, -39, -6, -37}), frozenset({5, 6, 9, 15, -14, -44, -11, -43, -41, -39, -37, -4}), frozenset({4, 5, 11, 14, -15, -9, -44, -43, -41, -39, -6, -37}), frozenset({5, 7, -20, 13, -14, 19, -44, -43, -42, -9, -4, -35}), frozenset({5, 6, 7, 11, -20, 14, -15, 19, -44, -43, -42, -9, -39, -4}), frozenset({5, 6, 11, 14, -15, -44, -43, -42, -39, -38, -4, -7})]
Initial DL				: 157333.08110911513
Final DL				: 24427.021293748123
Compression (wrt me)	: 0.8447432598309872
Operator Counters		: {'D': 0, 'W': 13, 'V': 0, 'S': 0, 'R': 0, 'T': 0}
Misle Learning Runtime	: 351.7188677787781


[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[5, 7]
[0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.4206349206349206, 0.2777777777777778, 0.4206349206349206]
Max Score = 0.4206349206349206 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([20])
Tie Breaking Levels	: [3]; Predicted Values	: {5: False, 3: False, 20: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[7]
[0.0, 0.16666666666666666, 0.0, 0.2222222222222222, 0.0, 0.16666666666666666, 0.0, 0.2777777777777778]
Tie Breaking: Level 1
INCORRECT Prediction at tie levels: 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 24])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {12: False, 8: False, 24: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 31, 19])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {20: False, 31: False, 19: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([25])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 3: False, 25: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.16666666666666666, 0.30952380952380953, 0.16666666666666666, 0.30952380952380953, 0.16666666666666666, 0.30952380952380953, 0.16666666666666666, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 12])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {3: False, 20: False, 12: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 9])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {5: False, 30: True, 9: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5]
[0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.0, 0.0]
Max Score = 0.14285714285714285 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([11])
Tie Breaking Levels	: [3]; Predicted Values	: {28: True, 22: False, 11: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3]
[0.16666666666666666, 0.16666666666666666, 0.2222222222222222, 0.2222222222222222, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.2222222222222222 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking Levels	: [3]; Predicted Values	: {27: True, 2: False, 17: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.30952380952380953, 0.0, 0.30952380952380953, 0.0, 0.30952380952380953, 0.0, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 13])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {29: False, 19: False, 13: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 8])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {3: False, 13: False, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.36507936507936506, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking Levels	: [3]; Predicted Values	: {12: False, 2: False, 17: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
Max Score = 0.05555555555555555 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 16, 30])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 16: True, 30: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 6]
[0.16666666666666666, 0.0, 0.16666666666666666, 0.0, 0.30952380952380953, 0.14285714285714285, 0.30952380952380953, 0.14285714285714285]
Max Score = 0.30952380952380953 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([21])
Tie Breaking Levels	: [3]; Predicted Values	: {27: True, 22: False, 21: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.36507936507936506, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking Levels	: [3]; Predicted Values	: {22: False, 12: False, 19: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[7]
[0.0, 0.05555555555555555, 0.0, 0.05555555555555555, 0.16666666666666666, 0.2222222222222222, 0.30952380952380953, 0.36507936507936506]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 20])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 14: False, 20: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5]
[0.16666666666666666, 0.16666666666666666, 0.0, 0.0, 0.30952380952380953, 0.30952380952380953, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.30952380952380953 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking Levels	: [3]; Predicted Values	: {27: True, 6: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[3]
[0.0, 0.05555555555555555, 0.16666666666666666, 0.2222222222222222, 0.0, 0.0, 0.16666666666666666, 0.16666666666666666]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 9])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {11: False, 19: False, 9: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([27, 9])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {5: False, 27: True, 9: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 31, 19])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {6: False, 31: False, 19: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 18])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {11: False, 17: False, 18: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[5, 7]
[0.05555555555555555, 0.1111111111111111, 0.05555555555555555, 0.1111111111111111, 0.2222222222222222, 0.2777777777777778, 0.2222222222222222, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([5])
Tie Breaking Levels	: [3]; Predicted Values	: {18: False, 15: False, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[7]
[0.0, 0.0, 0.16666666666666666, 0.2222222222222222, 0.05555555555555555, 0.05555555555555555, 0.2222222222222222, 0.2777777777777778]
Tie Breaking: Level 1
INCORRECT Prediction at tie levels: 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[5, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.0, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([12])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 3: False, 12: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 13])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {6: False, 9: False, 13: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 7, 25])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 7: False, 25: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222]
Max Score = 0.2222222222222222 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 13])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 31: False, 13: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 6]
[0.05555555555555555, 0.0, 0.05555555555555555, 0.0, 0.1111111111111111, 0.0, 0.1111111111111111, 0.0]
Max Score = 0.1111111111111111 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([14])
Tie Breaking Levels	: [3]; Predicted Values	: {27: True, 7: False, 14: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 24])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {29: False, 20: False, 24: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([8])
Tie Breaking Levels	: [3]; Predicted Values	: {26: False, 11: False, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 8])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {22: False, 16: True, 8: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 23, 2])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 23: False, 2: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 12])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {6: False, 30: True, 12: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 24])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {3: False, 31: False, 24: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.2222222222222222, 0.2222222222222222]
Max Score = 0.2222222222222222 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([20])
Tie Breaking Levels	: [3]; Predicted Values	: {22: False, 12: False, 20: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 4, 5]
[0.2777777777777778, 0.2777777777777778, 0.0, 0.0, 0.2777777777777778, 0.2777777777777778, 0.0, 0.0]
Max Score = 0.2777777777777778 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 8])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {27: True, 13: False, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.14285714285714285, 0.14285714285714285, 0.1984126984126984, 0.1984126984126984, 0.30952380952380953, 0.30952380952380953, 0.36507936507936506, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([8])
Tie Breaking Levels	: [3]; Predicted Values	: {11: False, 2: False, 8: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([10])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 5: False, 10: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 17])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {29: False, 24: True, 17: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 2, 4, 6]
[0.2777777777777778, 0.2222222222222222, 0.2777777777777778, 0.2222222222222222, 0.2777777777777778, 0.2222222222222222, 0.2777777777777778, 0.2222222222222222]
Max Score = 0.2777777777777778 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 14])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {21: True, 13: False, 14: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 9, 24])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {2: False, 9: False, 24: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
Max Score = 0.05555555555555555 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 14, 6])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {25: False, 14: False, 6: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([18, 9])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 18: False, 9: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 20, 13])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {19: False, 20: False, 13: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 4, 5]
[0.30952380952380953, 0.30952380952380953, 0.0, 0.0, 0.30952380952380953, 0.30952380952380953, 0.0, 0.0]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 2])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {28: True, 14: False, 2: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.2222222222222222, 0.2222222222222222]
Max Score = 0.2222222222222222 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([8])
Tie Breaking Levels	: [3]; Predicted Values	: {10: False, 2: False, 8: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([23])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 15: False, 23: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([10])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 15: False, 10: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.36507936507936506, 0.36507936507936506, 0.14285714285714285, 0.14285714285714285, 0.36507936507936506, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 31])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {26: False, 24: True, 31: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5]
[0.05555555555555555, 0.05555555555555555, 0.0, 0.0, 0.2777777777777778, 0.2777777777777778, 0.0, 0.0]
Max Score = 0.2777777777777778 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([9])
Tie Breaking Levels	: [3]; Predicted Values	: {27: True, 29: False, 9: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 30, 4])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {2: False, 30: True, 4: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 4, 5]
[0.14285714285714285, 0.14285714285714285, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.0, 0.0]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 31])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {28: True, 17: False, 31: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 18])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 17: False, 18: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 24])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {5: False, 8: False, 24: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.0, 0.0, 0.30952380952380953, 0.30952380952380953, 0.36507936507936506, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 18: False, 17: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 21, 18])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {31: False, 21: True, 18: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[3, 7]
[0.0, 0.16666666666666666, 0.0, 0.30952380952380953, 0.0, 0.16666666666666666, 0.0, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([30])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 6: False, 30: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[3]
[0.0, 0.14285714285714285, 0.16666666666666666, 0.30952380952380953, 0.0, 0.0, 0.0, 0.0]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 21, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {11: False, 21: True, 14: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.16666666666666666, 0.30952380952380953, 0.16666666666666666, 0.30952380952380953, 0.16666666666666666, 0.30952380952380953, 0.16666666666666666, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 21])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {3: False, 23: False, 21: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 18, 2])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 18: False, 2: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3]
[0.14285714285714285, 0.14285714285714285, 0.30952380952380953, 0.30952380952380953, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.30952380952380953 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking Levels	: [3]; Predicted Values	: {27: True, 11: False, 24: True}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 4, 5]
[0.36507936507936506, 0.36507936507936506, 0.0, 0.0, 0.36507936507936506, 0.36507936507936506, 0.0, 0.0]
Max Score = 0.36507936507936506 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 23])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {28: True, 24: True, 23: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([10])
Tie Breaking Levels	: [3]; Predicted Values	: {6: False, 5: False, 10: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6]
[0.0, 0.0, 0.05555555555555555, 0.0, 0.2222222222222222, 0.2222222222222222, 0.2777777777777778, 0.2222222222222222]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking Levels	: [3]; Predicted Values	: {6: False, 5: False, 17: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 19])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {22: False, 25: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 9])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 17: False, 9: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.2777777777777778, 0.2777777777777778, 0.16666666666666666, 0.16666666666666666, 0.2777777777777778, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 19])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {22: False, 6: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 10, 23])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 10: False, 23: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.05555555555555555, 0.05555555555555555, 0.0, 0.0, 0.2222222222222222, 0.2222222222222222]
Max Score = 0.2222222222222222 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([10])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 15: False, 10: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.30952380952380953, 0.30952380952380953, 0.14285714285714285, 0.14285714285714285, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 16])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {11: False, 13: False, 16: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[5, 7]
[0.0, 0.2222222222222222, 0.0, 0.2222222222222222, 0.14285714285714285, 0.36507936507936506, 0.14285714285714285, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking Levels	: [3]; Predicted Values	: {26: False, 5: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 17])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {6: False, 20: False, 17: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.16666666666666666, 0.16666666666666666, 0.36507936507936506, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([16])
Tie Breaking Levels	: [3]; Predicted Values	: {22: False, 7: False, 16: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 18])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {22: False, 17: False, 18: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([18, 19, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {18: False, 19: False, 7: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1]
[0.2777777777777778, 0.2777777777777778, 0.0, 0.0, 0.05555555555555555, 0.05555555555555555, 0.0, 0.0]
Max Score = 0.2777777777777778 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([9])
Tie Breaking Levels	: [3]; Predicted Values	: {27: True, 28: True, 9: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.14285714285714285, 0.30952380952380953, 0.14285714285714285, 0.30952380952380953, 0.14285714285714285, 0.30952380952380953, 0.14285714285714285, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 13])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {11: False, 31: False, 13: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[3, 7]
[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.30952380952380953, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([30])
Tie Breaking Levels	: [3]; Predicted Values	: {26: False, 11: False, 30: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[5, 7]
[0.0, 0.05555555555555555, 0.0, 0.05555555555555555, 0.0, 0.2777777777777778, 0.0, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([20])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 26: False, 20: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.16666666666666666, 0.16666666666666666, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2777777777777778, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking Levels	: [3]; Predicted Values	: {18: False, 4: False, 24: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([13])
Tie Breaking Levels	: [3]; Predicted Values	: {22: False, 15: False, 13: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.16666666666666666, 0.30952380952380953, 0.16666666666666666, 0.30952380952380953, 0.16666666666666666, 0.30952380952380953, 0.16666666666666666, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 23])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {3: False, 13: False, 23: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.30952380952380953, 0.36507936507936506, 0.30952380952380953, 0.36507936507936506, 0.30952380952380953, 0.36507936507936506, 0.30952380952380953, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 31])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {2: False, 23: False, 31: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 19, 16])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {20: False, 19: False, 16: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 12, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {23: False, 12: False, 7: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3]
[0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222]
Max Score = 0.2777777777777778 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 13])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {21: True, 24: True, 13: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[5, 7]
[0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.2222222222222222, 0.36507936507936506, 0.2222222222222222, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([30])
Tie Breaking Levels	: [3]; Predicted Values	: {15: False, 3: False, 30: True}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[1]
[0.0, 0.2222222222222222, 0.0, 0.05555555555555555, 0.0, 0.16666666666666666, 0.0, 0.0]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.16666666666666666, 0.16666666666666666, 0.14285714285714285, 0.14285714285714285, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking Levels	: [3]; Predicted Values	: {11: False, 3: False, 24: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 4, 5]
[0.30952380952380953, 0.30952380952380953, 0.0, 0.0, 0.30952380952380953, 0.30952380952380953, 0.0, 0.0]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 2])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {28: True, 21: True, 2: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[3, 7]
[0.0, 0.1111111111111111, 0.16666666666666666, 0.2777777777777778, 0.0, 0.1111111111111111, 0.16666666666666666, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking Levels	: [3]; Predicted Values	: {15: False, 12: False, 31: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 16])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {7: False, 8: False, 16: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 4, 5]
[0.30952380952380953, 0.30952380952380953, 0.0, 0.0, 0.30952380952380953, 0.30952380952380953, 0.0, 0.0]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 13])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {28: True, 24: True, 13: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 30, 31])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {17: False, 30: True, 31: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.14285714285714285, 0.14285714285714285, 0.1984126984126984, 0.1984126984126984, 0.30952380952380953, 0.30952380952380953, 0.36507936507936506, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking Levels	: [3]; Predicted Values	: {11: False, 2: False, 24: True}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.2222222222222222, 0.2222222222222222]
Max Score = 0.2222222222222222 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([16])
Tie Breaking Levels	: [3]; Predicted Values	: {12: False, 4: False, 16: True}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[3]
[0.0, 0.2777777777777778, 0.14285714285714285, 0.4206349206349206, 0.0, 0.2222222222222222, 0.14285714285714285, 0.36507936507936506]
Tie Breaking: Level 1
INCORRECT Prediction at tie levels: 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[5, 7]
[0.0, 0.05555555555555555, 0.0, 0.05555555555555555, 0.30952380952380953, 0.36507936507936506, 0.30952380952380953, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking Levels	: [3]; Predicted Values	: {15: False, 2: False, 31: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[3, 7]
[0.16666666666666666, 0.2222222222222222, 0.30952380952380953, 0.36507936507936506, 0.16666666666666666, 0.2222222222222222, 0.30952380952380953, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([30])
Tie Breaking Levels	: [3]; Predicted Values	: {6: False, 2: False, 30: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[3, 7]
[0.0, 0.1111111111111111, 0.16666666666666666, 0.2777777777777778, 0.0, 0.1111111111111111, 0.16666666666666666, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking Levels	: [3]; Predicted Values	: {11: False, 2: False, 31: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6]
[0.05555555555555555, 0.0, 0.05555555555555555, 0.0, 0.2222222222222222, 0.0, 0.36507936507936506, 0.14285714285714285]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[5, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.0, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking Levels	: [3]; Predicted Values	: {6: False, 3: False, 19: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222]
Max Score = 0.2222222222222222 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 24])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 5: False, 24: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 23])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 24: True, 23: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 19])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {5: False, 31: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 4, 5]
[0.14285714285714285, 0.14285714285714285, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.0, 0.0]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 7])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {28: True, 20: False, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.2222222222222222, 0.2222222222222222, 0.0, 0.0, 0.2777777777777778, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([25])
Tie Breaking Levels	: [3]; Predicted Values	: {26: False, 4: False, 25: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 29, 16])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: False, 29: False, 16: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 6]
[0.16666666666666666, 0.0, 0.2777777777777778, 0.0, 0.16666666666666666, 0.0, 0.2777777777777778, 0.0]
Max Score = 0.2777777777777778 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking Levels	: [3]; Predicted Values	: {27: True, 22: False, 31: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 2, 4, 6]
[0.2222222222222222, 0.16666666666666666, 0.2222222222222222, 0.16666666666666666, 0.2222222222222222, 0.16666666666666666, 0.2222222222222222, 0.16666666666666666]
Max Score = 0.2222222222222222 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 6])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {21: True, 30: True, 6: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 25, 4])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {21: True, 25: False, 4: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4]
[0.2222222222222222, 0.0, 0.16666666666666666, 0.0, 0.2777777777777778, 0.0, 0.2222222222222222, 0.0]
Tie Breaking: Level 1
INCORRECT Prediction at tie levels: 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222]
Max Score = 0.2222222222222222 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([18, 16])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {2: False, 18: False, 16: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 18])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {29: False, 14: False, 18: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 25, 24])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {2: False, 25: False, 24: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[7]
[0.16666666666666666, 0.2222222222222222, 0.30952380952380953, 0.36507936507936506, 0.2222222222222222, 0.2777777777777778, 0.36507936507936506, 0.4206349206349206]
Tie Breaking: Level 1
INCORRECT Prediction at tie levels: 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.30952380952380953, 0.30952380952380953, 0.14285714285714285, 0.14285714285714285, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 12])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {26: False, 9: False, 12: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[3, 7]
[0.05555555555555555, 0.2222222222222222, 0.1111111111111111, 0.2777777777777778, 0.05555555555555555, 0.2222222222222222, 0.1111111111111111, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([13])
Tie Breaking Levels	: [3]; Predicted Values	: {11: False, 4: False, 13: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 6]
[0.2222222222222222, 0.0, 0.2222222222222222, 0.0, 0.36507936507936506, 0.14285714285714285, 0.36507936507936506, 0.14285714285714285]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([13])
Tie Breaking Levels	: [3]; Predicted Values	: {27: True, 6: False, 13: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[3, 7]
[0.0, 0.16666666666666666, 0.14285714285714285, 0.30952380952380953, 0.0, 0.16666666666666666, 0.14285714285714285, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([14])
Tie Breaking Levels	: [3]; Predicted Values	: {26: False, 6: False, 14: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[5, 7]
[0.0, 0.16666666666666666, 0.0, 0.16666666666666666, 0.14285714285714285, 0.30952380952380953, 0.14285714285714285, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([4])
Tie Breaking Levels	: [3]; Predicted Values	: {22: False, 11: False, 4: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.2222222222222222, 0.2222222222222222, 0.0, 0.0, 0.2777777777777778, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([9])
Tie Breaking Levels	: [3]; Predicted Values	: {26: False, 7: False, 9: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[1, 5]
[0.14285714285714285, 0.30952380952380953, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.30952380952380953, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.30952380952380953 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([30])
Tie Breaking Levels	: [3]; Predicted Values	: {27: True, 11: False, 30: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111]
Max Score = 0.1111111111111111 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 30, 6])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {20: False, 30: True, 6: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 23])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {6: False, 20: False, 23: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 12, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {13: False, 12: False, 8: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 30])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {7: False, 8: False, 30: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[7]
[0.16666666666666666, 0.2222222222222222, 0.30952380952380953, 0.36507936507936506, 0.2222222222222222, 0.2777777777777778, 0.36507936507936506, 0.4206349206349206]
Tie Breaking: Level 1
INCORRECT Prediction at tie levels: 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 20, 21])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {19: False, 20: False, 21: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.2777777777777778, 0.2777777777777778, 0.0, 0.0, 0.2777777777777778, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 19])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {26: False, 24: True, 19: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3]
[0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222]
Max Score = 0.2777777777777778 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 19])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {21: True, 20: False, 19: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.2777777777777778, 0.2777777777777778, 0.16666666666666666, 0.16666666666666666, 0.2777777777777778, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 16])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {2: False, 30: True, 16: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 18])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {22: False, 8: False, 18: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 30])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 19: False, 30: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[5]
[0.16666666666666666, 0.16666666666666666, 0.0, 0.0, 0.16666666666666666, 0.30952380952380953, 0.0, 0.0]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 24])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {4: False, 8: False, 24: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5]
[0.16666666666666666, 0.16666666666666666, 0.0, 0.0, 0.30952380952380953, 0.30952380952380953, 0.0, 0.0]
Max Score = 0.30952380952380953 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([10])
Tie Breaking Levels	: [3]; Predicted Values	: {28: True, 22: False, 10: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 2, 4, 6]
[0.2777777777777778, 0.2222222222222222, 0.2777777777777778, 0.2222222222222222, 0.2777777777777778, 0.2222222222222222, 0.2777777777777778, 0.2222222222222222]
Max Score = 0.2777777777777778 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 5])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {21: True, 31: False, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[5, 7]
[0.16666666666666666, 0.2222222222222222, 0.16666666666666666, 0.2222222222222222, 0.2222222222222222, 0.2777777777777778, 0.2222222222222222, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([13])
Tie Breaking Levels	: [3]; Predicted Values	: {23: False, 7: False, 13: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 4, 5]
[0.1984126984126984, 0.1984126984126984, 0.14285714285714285, 0.14285714285714285, 0.1984126984126984, 0.1984126984126984, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.1984126984126984 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 8])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {27: True, 23: False, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 6]
[0.16666666666666666, 0.0, 0.30952380952380953, 0.0, 0.16666666666666666, 0.0, 0.30952380952380953, 0.0]
Max Score = 0.30952380952380953 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([14])
Tie Breaking Levels	: [3]; Predicted Values	: {28: True, 6: False, 14: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 14])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {6: False, 19: False, 14: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 4, 5]
[0.2222222222222222, 0.2222222222222222, 0.05555555555555555, 0.05555555555555555, 0.2222222222222222, 0.2222222222222222, 0.05555555555555555, 0.05555555555555555]
Max Score = 0.2222222222222222 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([18, 6])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {28: True, 18: False, 6: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.36507936507936506, 0.36507936507936506, 0.14285714285714285, 0.14285714285714285, 0.36507936507936506, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 19])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {26: False, 24: True, 19: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 24, 18])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {19: False, 24: True, 18: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.2222222222222222, 0.2222222222222222, 0.16666666666666666, 0.16666666666666666, 0.2222222222222222, 0.2222222222222222]
Max Score = 0.2222222222222222 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 20])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {2: False, 24: True, 20: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 30, 12])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {10: False, 30: True, 12: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 13])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 25: False, 13: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[5, 7]
[0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.2222222222222222, 0.36507936507936506, 0.2222222222222222, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([20])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 3: False, 20: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.2222222222222222, 0.2222222222222222, 0.36507936507936506, 0.36507936507936506, 0.2222222222222222, 0.2222222222222222, 0.36507936507936506, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 13])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {3: False, 25: False, 13: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5]
[0.16666666666666666, 0.16666666666666666, 0.0, 0.0, 0.30952380952380953, 0.30952380952380953, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.30952380952380953 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([18])
Tie Breaking Levels	: [3]; Predicted Values	: {27: True, 6: False, 18: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[7]
[0.0, 0.0, 0.0, 0.05555555555555555, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.36507936507936506]
Tie Breaking: Level 1
INCORRECT Prediction at tie levels: 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 6]
[0.16666666666666666, 0.0, 0.30952380952380953, 0.14285714285714285, 0.16666666666666666, 0.0, 0.30952380952380953, 0.14285714285714285]
Max Score = 0.30952380952380953 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([23])
Tie Breaking Levels	: [3]; Predicted Values	: {27: True, 6: False, 23: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.2777777777777778, 0.2777777777777778, 0.4206349206349206, 0.4206349206349206]
Max Score = 0.4206349206349206 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([9])
Tie Breaking Levels	: [3]; Predicted Values	: {12: False, 3: False, 9: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.2777777777777778, 0.2777777777777778, 0.16666666666666666, 0.16666666666666666, 0.2777777777777778, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 25])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {22: False, 31: False, 25: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 14])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {3: False, 17: False, 14: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 4, 5]
[0.2222222222222222, 0.2222222222222222, 0.0, 0.0, 0.2222222222222222, 0.2222222222222222, 0.0, 0.0]
Max Score = 0.2222222222222222 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 20])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {27: True, 9: False, 20: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.2222222222222222, 0.2222222222222222, 0.16666666666666666, 0.16666666666666666, 0.2222222222222222, 0.2222222222222222]
Max Score = 0.2222222222222222 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 9])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {10: False, 17: False, 9: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 17])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {22: False, 30: True, 17: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 21, 6])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {17: False, 21: True, 6: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.30952380952380953, 0.30952380952380953, 0.14285714285714285, 0.14285714285714285, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 30])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {11: False, 2: False, 30: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 16])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {3: False, 17: False, 16: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2777777777777778, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking Levels	: [3]; Predicted Values	: {23: False, 4: False, 17: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3]
[0.14285714285714285, 0.14285714285714285, 0.36507936507936506, 0.36507936507936506, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([8])
Tie Breaking Levels	: [3]; Predicted Values	: {27: True, 26: False, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 24, 9])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {25: False, 24: True, 9: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 16])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {26: False, 24: True, 16: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 25])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {5: False, 21: True, 25: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 21])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 12: False, 21: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 10])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {3: False, 8: False, 10: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6]
[0.05555555555555555, 0.0, 0.2222222222222222, 0.16666666666666666, 0.05555555555555555, 0.0, 0.2777777777777778, 0.2222222222222222]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3]
[0.36507936507936506, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.36507936507936506 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 8])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {27: True, 10: False, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 20, 12])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {8: False, 20: False, 12: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.14285714285714285, 0.30952380952380953, 0.14285714285714285, 0.30952380952380953, 0.14285714285714285, 0.30952380952380953, 0.14285714285714285, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 19])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {26: False, 7: False, 19: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5]
[0.30952380952380953, 0.30952380952380953, 0.0, 0.0, 0.36507936507936506, 0.36507936507936506, 0.0, 0.0]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking Levels	: [3]; Predicted Values	: {28: True, 12: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[5, 7]
[0.0, 0.05555555555555555, 0.0, 0.05555555555555555, 0.30952380952380953, 0.36507936507936506, 0.30952380952380953, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 2: False, 19: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 4, 5]
[0.14285714285714285, 0.14285714285714285, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.0, 0.0]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 7])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {28: True, 8: False, 7: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[3, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.36507936507936506, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([20])
Tie Breaking Levels	: [3]; Predicted Values	: {10: False, 2: False, 20: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111]
Max Score = 0.1111111111111111 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 9])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {2: False, 24: True, 9: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 11])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {22: False, 2: False, 11: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 9, 30])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 9: False, 30: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1]
[0.2222222222222222, 0.2222222222222222, 0.0, 0.0, 0.16666666666666666, 0.16666666666666666, 0.0, 0.0]
Max Score = 0.2222222222222222 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([5])
Tie Breaking Levels	: [3]; Predicted Values	: {21: True, 27: True, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking Levels	: [3]; Predicted Values	: {22: False, 15: False, 17: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 9, 31])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 9: False, 31: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4]
[0.0, 0.0, 0.0, 0.0, 0.05555555555555555, 0.0, 0.0, 0.0]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 4, 5]
[0.30952380952380953, 0.30952380952380953, 0.0, 0.0, 0.30952380952380953, 0.30952380952380953, 0.0, 0.0]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 21])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {28: True, 25: False, 21: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.2222222222222222, 0.2777777777777778, 0.2222222222222222, 0.2777777777777778, 0.2222222222222222, 0.2777777777777778, 0.2222222222222222, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 13])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {10: False, 30: True, 13: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.2222222222222222, 0.2222222222222222, 0.36507936507936506, 0.36507936507936506, 0.2777777777777778, 0.2777777777777778, 0.4206349206349206, 0.4206349206349206]
Max Score = 0.4206349206349206 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking Levels	: [3]; Predicted Values	: {4: False, 3: False, 19: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[3, 7]
[0.16666666666666666, 0.2222222222222222, 0.30952380952380953, 0.36507936507936506, 0.16666666666666666, 0.2222222222222222, 0.30952380952380953, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking Levels	: [3]; Predicted Values	: {6: False, 2: False, 31: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.30952380952380953, 0.0, 0.30952380952380953, 0.0, 0.30952380952380953, 0.0, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 31])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 14: False, 31: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3]
[0.16666666666666666, 0.16666666666666666, 0.2777777777777778, 0.2777777777777778, 0.16666666666666666, 0.16666666666666666, 0.2222222222222222, 0.2222222222222222]
Max Score = 0.2777777777777778 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([25])
Tie Breaking Levels	: [3]; Predicted Values	: {21: True, 2: False, 25: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 14, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {11: False, 14: False, 8: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 30, 10])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {13: False, 30: True, 10: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[7]
[0.0, 0.0, 0.0, 0.05555555555555555, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.36507936507936506]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3]
[0.30952380952380953, 0.30952380952380953, 0.36507936507936506, 0.36507936507936506, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([25])
Tie Breaking Levels	: [3]; Predicted Values	: {21: True, 2: False, 25: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 24, 31])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {14: False, 24: True, 31: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[5, 7]
[0.0, 0.0, 0.0, 0.0, 0.16666666666666666, 0.30952380952380953, 0.16666666666666666, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([30])
Tie Breaking Levels	: [3]; Predicted Values	: {15: False, 5: False, 30: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 12, 16])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 12: False, 16: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 17])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {6: False, 10: False, 17: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.2222222222222222, 0.2222222222222222, 0.16666666666666666, 0.16666666666666666, 0.2222222222222222, 0.2222222222222222]
Max Score = 0.2222222222222222 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 25])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {4: False, 17: False, 25: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.1111111111111111, 0.1111111111111111, 0.2777777777777778, 0.2777777777777778, 0.1111111111111111, 0.1111111111111111, 0.2777777777777778, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 19])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {11: False, 31: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.05555555555555555, 0.05555555555555555, 0.16666666666666666, 0.16666666666666666, 0.2222222222222222, 0.2222222222222222]
Max Score = 0.2222222222222222 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([9])
Tie Breaking Levels	: [3]; Predicted Values	: {15: False, 12: False, 9: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 25])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {7: False, 23: False, 25: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.14285714285714285, 0.36507936507936506, 0.14285714285714285, 0.36507936507936506, 0.14285714285714285, 0.36507936507936506, 0.14285714285714285, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 20])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {26: False, 21: True, 20: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([18, 16, 4])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {18: False, 16: True, 4: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
Max Score = 0.05555555555555555 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 19, 31])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {14: False, 19: False, 31: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 20, 19])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {17: False, 20: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 24, 14])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {19: False, 24: True, 14: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.30952380952380953, 0.30952380952380953, 0.14285714285714285, 0.14285714285714285, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 13])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {26: False, 16: True, 13: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.1984126984126984, 0.36507936507936506, 0.1984126984126984, 0.36507936507936506, 0.1984126984126984, 0.36507936507936506, 0.1984126984126984, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 30])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {11: False, 19: False, 30: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 14])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {5: False, 19: False, 14: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 14, 13])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {31: False, 14: False, 13: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555]
Max Score = 0.05555555555555555 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 9, 5])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {15: False, 9: False, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.0]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 9])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {5: False, 13: False, 9: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[5, 7]
[0.0, 0.05555555555555555, 0.0, 0.05555555555555555, 0.30952380952380953, 0.36507936507936506, 0.30952380952380953, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([13])
Tie Breaking Levels	: [3]; Predicted Values	: {15: False, 2: False, 13: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.30952380952380953, 0.30952380952380953, 0.0, 0.0, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 9])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 23: False, 9: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 4])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {29: False, 2: False, 4: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 17])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 8: False, 17: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 25, 16])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 25: False, 16: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.14285714285714285, 0.30952380952380953, 0.14285714285714285, 0.30952380952380953, 0.14285714285714285, 0.30952380952380953, 0.14285714285714285, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 13])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {11: False, 23: False, 13: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3]
[0.16666666666666666, 0.16666666666666666, 0.2222222222222222, 0.2222222222222222, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666]
Max Score = 0.2222222222222222 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([18])
Tie Breaking Levels	: [3]; Predicted Values	: {21: True, 2: False, 18: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 17])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {28: True, 8: False, 17: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 12])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {6: False, 19: False, 12: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 8])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {6: False, 16: True, 8: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.30952380952380953, 0.30952380952380953, 0.14285714285714285, 0.14285714285714285, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 17])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {26: False, 30: True, 17: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 8])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 13: False, 8: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778]
Max Score = 0.2777777777777778 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 31, 17])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {13: False, 31: False, 17: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953, 0.16666666666666666, 0.16666666666666666, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([18, 31])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {5: False, 18: False, 31: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.16666666666666666, 0.16666666666666666, 0.2222222222222222, 0.2222222222222222, 0.16666666666666666, 0.16666666666666666, 0.2222222222222222, 0.2222222222222222]
Max Score = 0.2222222222222222 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 13])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {10: False, 24: True, 13: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 26, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {19: False, 26: False, 8: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 8])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {2: False, 16: True, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.36507936507936506, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 30, 13])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 30: True, 13: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[5, 7]
[0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.36507936507936506, 0.2222222222222222, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([13])
Tie Breaking Levels	: [3]; Predicted Values	: {6: False, 3: False, 13: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953, 0.30952380952380953]
Max Score = 0.30952380952380953 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([18, 30])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 18: False, 30: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[7]
[0.0, 0.0, 0.0, 0.05555555555555555, 0.0, 0.0, 0.30952380952380953, 0.36507936507936506]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 24])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {6: False, 14: False, 24: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[6, 7]
[0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.05555555555555555, 0.2222222222222222, 0.2222222222222222, 0.36507936507936506, 0.36507936507936506]
Max Score = 0.36507936507936506 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([9])
Tie Breaking Levels	: [3]; Predicted Values	: {15: False, 3: False, 9: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[5, 7]
[0.0, 0.16666666666666666, 0.0, 0.16666666666666666, 0.0, 0.2222222222222222, 0.0, 0.2222222222222222]
Max Score = 0.2222222222222222 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([13])
Tie Breaking Levels	: [3]; Predicted Values	: {26: False, 23: False, 13: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836, 1.991659811063836]
Min Score = 1.991659811063836 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 24])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {29: False, 12: False, 24: True}
INCORRECT Prediction at tie levels: [3, 3]

[1, 3, 5, 7]
[0.4539682539682539, 0.14444444444444443, 0.4539682539682539, 0.14444444444444443, 0.4539682539682539, 0.14444444444444443, 0.4539682539682539, 0.14444444444444443]
Min Score = 0.14444444444444443 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 31])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {29: False, 14: False, 31: False}

[1, 3, 5, 7]
[0.4539682539682539, 0.3984126984126984, 0.4539682539682539, 0.3984126984126984, 0.4539682539682539, 0.3984126984126984, 0.4539682539682539, 0.3984126984126984]
Min Score = 0.3984126984126984 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 28])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {26: False, 11: False, 28: True}
INCORRECT Prediction at tie levels: [3, 3]

[2, 3, 6, 7]
[0.08888888888888888, 0.08888888888888888, 0.03333333333333333, 0.03333333333333333, 0.08888888888888888, 0.08888888888888888, 0.03333333333333333, 0.03333333333333333]
Min Score = 0.03333333333333333 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 20])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {4: False, 16: True, 20: True}
INCORRECT Prediction at tie levels: [3, 3]

[6, 7]
[0.4539682539682539, 0.4539682539682539, 0.23174603174603173, 0.23174603174603173, 0.3984126984126984, 0.3984126984126984, 0.17619047619047618, 0.17619047619047618]
Min Score = 0.17619047619047618 tied among 2/8 candidates.
[6, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([20])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 23: False, 20: True}

[2, 3, 6, 7]
[0.3111111111111111, 0.3111111111111111, 0.14444444444444443, 0.14444444444444443, 0.3111111111111111, 0.3111111111111111, 0.14444444444444443, 0.14444444444444443]
Min Score = 0.14444444444444443 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 10])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {11: False, 20: True, 10: False}

[0, 1, 2, 3]
[0.14444444444444443, 0.14444444444444443, 0.14444444444444443, 0.14444444444444443, 0.4539682539682539, 0.4539682539682539, 0.4539682539682539, 0.4539682539682539]
Min Score = 0.14444444444444443 tied among 4/8 candidates.
[0, 1, 2, 3]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 16])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {28: True, 8: False, 16: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.08888888888888888, 0.08888888888888888, 0.08888888888888888, 0.08888888888888888, 0.08888888888888888, 0.08888888888888888, 0.08888888888888888, 0.08888888888888888]
Min Score = 0.08888888888888888 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 17, 21])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {8: False, 17: False, 21: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[5, 7]
[0.4539682539682539, 0.3984126984126984, 0.4539682539682539, 0.3984126984126984, 0.14444444444444443, 0.08888888888888888, 0.14444444444444443, 0.08888888888888888]
Min Score = 0.08888888888888888 tied among 2/8 candidates.
[5, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking Levels	: [3]; Predicted Values	: {18: False, 15: False, 31: False}

[2, 3, 6, 7]
[0.4539682539682539, 0.4539682539682539, 0.34285714285714286, 0.34285714285714286, 0.4539682539682539, 0.4539682539682539, 0.34285714285714286, 0.34285714285714286]
Min Score = 0.34285714285714286 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 14])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {22: False, 15: False, 14: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.4539682539682539, 0.4539682539682539, 0.4539682539682539, 0.4539682539682539, 0.4539682539682539, 0.4539682539682539, 0.4539682539682539, 0.4539682539682539]
Min Score = 0.4539682539682539 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 8, 20])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 8: False, 20: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[6, 7]
[0.4539682539682539, 0.4539682539682539, 0.3984126984126984, 0.3984126984126984, 0.2873015873015873, 0.2873015873015873, 0.17619047619047618, 0.17619047619047618]
Min Score = 0.17619047619047618 tied among 2/8 candidates.
[6, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 12: False, 24: False}

[6, 7]
[0.17619047619047618, 0.17619047619047618, 0.17619047619047618, 0.17619047619047618, 0.17619047619047618, 0.17619047619047618, 0.03333333333333333, 0.03333333333333333]
Min Score = 0.03333333333333333 tied among 2/8 candidates.
[6, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking Levels	: [3]; Predicted Values	: {6: False, 3: False, 24: False}
INCORRECT Prediction at tie levels: [3]

[2, 3, 6, 7]
[0.14444444444444443, 0.14444444444444443, 0.08888888888888888, 0.08888888888888888, 0.14444444444444443, 0.14444444444444443, 0.08888888888888888, 0.08888888888888888]
Min Score = 0.08888888888888888 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 31])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {2: False, 24: False, 31: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 4, 5]
[0.3984126984126984, 0.3984126984126984, 0.4539682539682539, 0.4539682539682539, 0.3984126984126984, 0.3984126984126984, 0.4539682539682539, 0.4539682539682539]
Min Score = 0.3984126984126984 tied among 4/8 candidates.
[0, 1, 4, 5]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 18])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {21: True, 15: False, 18: False}

[4, 5]
[0.4539682539682539, 0.4539682539682539, 0.4539682539682539, 0.4539682539682539, 0.3984126984126984, 0.3984126984126984, 0.4539682539682539, 0.4539682539682539]
Min Score = 0.3984126984126984 tied among 2/8 candidates.
[4, 5]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([16])
Tie Breaking Levels	: [3]; Predicted Values	: {27: True, 4: False, 16: True}
INCORRECT Prediction at tie levels: [3]

[2, 3]
[0.34285714285714286, 0.34285714285714286, 0.17619047619047618, 0.17619047619047618, 0.3984126984126984, 0.3984126984126984, 0.23174603174603173, 0.23174603174603173]
Min Score = 0.17619047619047618 tied among 2/8 candidates.
[2, 3]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking Levels	: [3]; Predicted Values	: {21: True, 11: False, 24: False}

[2, 3, 6, 7]
[0.3984126984126984, 0.3984126984126984, 0.23174603174603173, 0.23174603174603173, 0.3984126984126984, 0.3984126984126984, 0.23174603174603173, 0.23174603174603173]
Min Score = 0.23174603174603173 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 25])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {11: False, 14: False, 25: True}
INCORRECT Prediction at tie levels: [3, 3]

[2, 3, 6, 7]
[0.2873015873015873, 0.2873015873015873, 0.17619047619047618, 0.17619047619047618, 0.2873015873015873, 0.2873015873015873, 0.17619047619047618, 0.17619047619047618]
Min Score = 0.17619047619047618 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([14, 20])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {22: False, 14: False, 20: True}

[5, 7]
[0.4539682539682539, 0.2873015873015873, 0.4539682539682539, 0.2873015873015873, 0.4539682539682539, 0.17619047619047618, 0.4539682539682539, 0.17619047619047618]
Min Score = 0.17619047619047618 tied among 2/8 candidates.
[5, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([20])
Tie Breaking Levels	: [3]; Predicted Values	: {26: False, 12: False, 20: True}
INCORRECT Prediction at tie levels: [3]

[6, 7]
[0.4539682539682539, 0.4539682539682539, 0.2873015873015873, 0.2873015873015873, 0.3984126984126984, 0.3984126984126984, 0.23174603174603173, 0.23174603174603173]
Min Score = 0.23174603174603173 tied among 2/8 candidates.
[6, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking Levels	: [3]; Predicted Values	: {22: False, 11: False, 17: False}

[2, 3, 6, 7]
[0.4539682539682539, 0.4539682539682539, 0.17619047619047618, 0.17619047619047618, 0.4539682539682539, 0.4539682539682539, 0.17619047619047618, 0.17619047619047618]
Min Score = 0.17619047619047618 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 30])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {26: False, 16: True, 30: True}
INCORRECT Prediction at tie levels: [3, 3]

[4, 5]
[0.3984126984126984, 0.3984126984126984, 0.3984126984126984, 0.3984126984126984, 0.17619047619047618, 0.17619047619047618, 0.3984126984126984, 0.3984126984126984]
Min Score = 0.17619047619047618 tied among 2/8 candidates.
[4, 5]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking Levels	: [3]; Predicted Values	: {28: True, 29: False, 19: False}
INCORRECT Prediction at tie levels: [3]

[3, 7]
[0.4539682539682539, 0.2873015873015873, 0.34285714285714286, 0.17619047619047618, 0.4539682539682539, 0.2873015873015873, 0.34285714285714286, 0.17619047619047618]
Min Score = 0.17619047619047618 tied among 2/8 candidates.
[3, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([20])
Tie Breaking Levels	: [3]; Predicted Values	: {12: False, 11: False, 20: True}

[4, 5]
[0.2873015873015873, 0.2873015873015873, 0.4539682539682539, 0.4539682539682539, 0.14444444444444443, 0.14444444444444443, 0.4539682539682539, 0.4539682539682539]
Min Score = 0.14444444444444443 tied among 2/8 candidates.
[4, 5]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([8])
Tie Breaking Levels	: [3]; Predicted Values	: {28: True, 5: False, 8: False}

[4, 6]
[0.34285714285714286, 0.4539682539682539, 0.34285714285714286, 0.4539682539682539, 0.17619047619047618, 0.4539682539682539, 0.17619047619047618, 0.4539682539682539]
Min Score = 0.17619047619047618 tied among 2/8 candidates.
[4, 6]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([30])
Tie Breaking Levels	: [3]; Predicted Values	: {27: True, 15: False, 30: True}

[0, 1, 4, 5]
[0.34285714285714286, 0.34285714285714286, 0.3984126984126984, 0.3984126984126984, 0.34285714285714286, 0.34285714285714286, 0.3984126984126984, 0.3984126984126984]
Min Score = 0.34285714285714286 tied among 4/8 candidates.
[0, 1, 4, 5]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 30])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {21: True, 19: False, 30: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.4539682539682539, 0.4539682539682539, 0.4539682539682539, 0.4539682539682539, 0.4539682539682539, 0.4539682539682539, 0.4539682539682539, 0.4539682539682539]
Min Score = 0.4539682539682539 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([16, 14, 13])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {16: True, 14: False, 13: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.08888888888888888, 0.08888888888888888, 0.08888888888888888, 0.08888888888888888, 0.08888888888888888, 0.08888888888888888, 0.08888888888888888, 0.08888888888888888]
Min Score = 0.08888888888888888 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 10, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {23: False, 10: False, 8: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[4, 5]
[0.3984126984126984, 0.3984126984126984, 0.3984126984126984, 0.3984126984126984, 0.34285714285714286, 0.34285714285714286, 0.3984126984126984, 0.3984126984126984]
Min Score = 0.34285714285714286 tied among 2/8 candidates.
[4, 5]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking Levels	: [3]; Predicted Values	: {28: True, 29: False, 24: False}
INCORRECT Prediction at tie levels: [3]

[7]
[0.2873015873015873, 0.2873015873015873, 0.23174603174603173, 0.23174603174603173, 0.2873015873015873, 0.2873015873015873, 0.23174603174603173, 0.17619047619047618]
INCORRECT Prediction at tie levels: 0

[5, 7]
[0.4539682539682539, 0.14444444444444443, 0.4539682539682539, 0.14444444444444443, 0.4539682539682539, 0.08888888888888888, 0.4539682539682539, 0.08888888888888888]
Min Score = 0.08888888888888888 tied among 2/8 candidates.
[5, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([14])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 7: False, 14: False}

[4, 5, 6, 7]
[0.3111111111111111, 0.3111111111111111, 0.3111111111111111, 0.3111111111111111, 0.14444444444444443, 0.14444444444444443, 0.14444444444444443, 0.14444444444444443]
Min Score = 0.14444444444444443 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 9])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {11: False, 8: False, 9: False}

[4, 5, 6, 7]
[0.17619047619047618, 0.17619047619047618, 0.17619047619047618, 0.17619047619047618, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333, 0.03333333333333333]
Min Score = 0.03333333333333333 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 20])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {5: False, 9: False, 20: True}
INCORRECT Prediction at tie levels: [3, 3]

[4, 5, 6, 7]
[0.34285714285714286, 0.34285714285714286, 0.34285714285714286, 0.34285714285714286, 0.17619047619047618, 0.17619047619047618, 0.17619047619047618, 0.17619047619047618]
Min Score = 0.17619047619047618 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 25])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 30: True, 25: True}

[6, 7]
[0.2873015873015873, 0.2873015873015873, 0.2873015873015873, 0.2873015873015873, 0.2873015873015873, 0.2873015873015873, 0.14444444444444443, 0.14444444444444443]
Min Score = 0.14444444444444443 tied among 2/8 candidates.
[6, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking Levels	: [3]; Predicted Values	: {22: False, 6: False, 24: False}
INCORRECT Prediction at tie levels: [3]

[3, 7]
[0.4539682539682539, 0.2873015873015873, 0.4539682539682539, 0.17619047619047618, 0.4539682539682539, 0.2873015873015873, 0.4539682539682539, 0.17619047619047618]
Min Score = 0.17619047619047618 tied among 2/8 candidates.
[3, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([14])
Tie Breaking Levels	: [3]; Predicted Values	: {26: False, 12: False, 14: False}

[7]
[0.2873015873015873, 0.14444444444444443, 0.2873015873015873, 0.14444444444444443, 0.2873015873015873, 0.14444444444444443, 0.23174603174603173, 0.08888888888888888]

[1, 3, 5, 7]
[0.14444444444444443, 0.08888888888888888, 0.14444444444444443, 0.08888888888888888, 0.14444444444444443, 0.08888888888888888, 0.14444444444444443, 0.08888888888888888]
Min Score = 0.08888888888888888 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 31])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {2: False, 30: True, 31: False}

[2, 3, 6, 7]
[0.3111111111111111, 0.3111111111111111, 0.14444444444444443, 0.14444444444444443, 0.3111111111111111, 0.3111111111111111, 0.14444444444444443, 0.14444444444444443]
Min Score = 0.14444444444444443 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 18])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {26: False, 2: False, 18: False}

[2, 3]
[0.14444444444444443, 0.14444444444444443, 0.08888888888888888, 0.08888888888888888, 0.4539682539682539, 0.4539682539682539, 0.4539682539682539, 0.4539682539682539]
Min Score = 0.08888888888888888 tied among 2/8 candidates.
[2, 3]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking Levels	: [3]; Predicted Values	: {28: True, 2: False, 24: False}

[1, 3, 5, 7]
[0.2873015873015873, 0.23174603174603173, 0.2873015873015873, 0.23174603174603173, 0.2873015873015873, 0.23174603174603173, 0.2873015873015873, 0.23174603174603173]
Min Score = 0.23174603174603173 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 14])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {2: False, 23: False, 14: False}

[4, 5, 6, 7]
[0.3984126984126984, 0.3984126984126984, 0.3984126984126984, 0.3984126984126984, 0.08888888888888888, 0.08888888888888888, 0.08888888888888888, 0.08888888888888888]
Min Score = 0.08888888888888888 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 19])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 8: False, 19: False}
INCORRECT Prediction at tie levels: [3, 3]

[4, 5, 6, 7]
[0.4539682539682539, 0.4539682539682539, 0.4539682539682539, 0.4539682539682539, 0.14444444444444443, 0.14444444444444443, 0.14444444444444443, 0.14444444444444443]
Min Score = 0.14444444444444443 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([30, 14])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 30: True, 14: False}
INCORRECT Prediction at tie levels: [3, 3]

Dataset				: flare.dat
Metric				: length
Minsups				: [3]
MF Accuracy			: [(0.5174825174825175, 0.46503496503496505, 286, 286)]
Mistle Accuracy		: [0.5174825174825175]
CNFAlgo Accuracy	: []
Randomized Accuracy	: [0.125]

# Test Examples		: 286
Mistle # Ties		: [(0, 0)]
CNFAlgo # Ties		: []
