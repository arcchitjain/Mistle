>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 105
 Number of frequent closed itemsets: 24528
 Total time ~: 468 ms
>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 106
 Number of frequent closed itemsets: 23588
 Total time ~: 433 ms
Current Minsup[0.5] yields 113148 itemsets.
Current Minsup[0.75] yields 8838 itemsets.
Current Minsup[0.669922722482974] yields 22064 itemsets.
Top-k minsup for at least 10000 paterns = 0.669922722482974 or 70
2  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({3, 4, 5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30, 32, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, -48, -42, -39, -34, -33, -31, -26, -22, -17, -12, -11, -7, -2}), frozenset({3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 33, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, -48, -42, -39, -34, -32, -31, -24, -22, -17, -12, -9, -7, -2})}
DL of initial theory	: 53432.37650643999
9575	itemsets left after T operation 	: [frozenset({5, 13, 14, 15, 16, 18, 20, 25, 27, 28, 29, 30, 35, 36, 37, 38, 45, -34, -31, -12})]
446	itemsets left after W operation 	: [frozenset({3, 5, 13, 16, 21, 27, 28, 29, -34, 30, -31, 35, 36, 37, 38, 41, 44, 47, 49}), frozenset({4, 6, 8, 10, 11, 14, 15, -49, 17, 18, 19, -46, -42, 23, 25, 26, -39, -32, 33, 40, -24, -22, 43, -20, 45, 48, -12, -9, -7, -2}), frozenset({2, 6, 8, 9, 11, 14, 15, -48, -49, 18, 19, 20, -45, 23, -40, 25, 26, -32, 33, 39, -24, 42, 43, -22, 46, -17, -12, -10, -7, -4}), frozenset({4, 6, 8, 9, 11, 14, 15, -49, 17, 18, 19, -46, -42, 23, 24, 25, -39, -32, 33, -26, 40, -22, 43, -20, 45, 48, -12, -10, -7, -2}), frozenset({4, 7, 9, 10, 11, 14, 15, -49, 17, -46, 19, 20, 22, -42, 24, 25, -39, -32, 33, -26, 40, -23, 43, 45, -18, 48, -12, -8, -6, -2}), frozenset({4, 6, 8, 9, 11, 14, 15, -49, 18, 19, 20, -46, 22, -45, 24, 25, -39, -32, 33, -26, 40, -23, 42, 43, -17, 48, -12, -10, -7, -2}), frozenset({4, 7, 8, 10, 11, 14, 15, -49, 17, -46, 19, 20, -43, 22, 24, 25, -39, -33, 32, -26, 40, -23, 42, 45, -18, 48, -12, -9, -6, -2}), frozenset({4, 6, 8, 9, 10, 14, 15, -48, -49, 18, 19, 20, -45, 22, 25, 26, -39, -32, 33, 40, -24, 42, 43, -23, 46, -17, -12, -11, -7, -2}), frozenset({2, 6, 9, 10, 11, 12, 15, -48, -49, 18, 19, 20, -42, 23, 24, 25, -40, -32, 33, -26, 39, -22, 43, 45, 46, -17, -14, -8, -7, -4}), frozenset({2, 7, 8, 9, 11, 14, 15, -49, 18, 19, 20, -46, -42, 23, 24, -40, 26, -32, 33, 39, -25, -22, 43, 45, -17, 48, -12, -10, -6, -4}), frozenset({4, 6, 8, 9, 11, 12, 14, -49, -48, 18, 19, 20, 22, -42, 25, 26, -39, -32, 33, 40, -24, -23, 43, 45, 46, -17, -15, -10, -7, -2})]
0	itemsets left after T operation 	: [frozenset({35, 5, 38, 37, 13, 45, 15, 16, 14, 18, -12, 20, 25, 27, 28, 30})]
# of frequent itemsets	: 0
Time of DCI Closed		: 0.3223092555999756
Initial DL				: 60506.34396353172
Final DL				: 19510.847785489685
Compression (wrt me)	: 0.6775404609267215
Operator Counters		: {'D': 0, 'W': 1, 'V': 0, 'S': 0, 'R': 0, 'T': 2}
Misle Learning Runtime	: 10.953768968582153

Timeout of 20 seconds reached while mining patterns with minsup = 0.5
Current Minsup[0.75] yields 73333 itemsets.
Current Minsup[0.875] yields 4197 itemsets.
Current Minsup[0.8067739259428847] yields 23588 itemsets.
Top-k minsup for at least 10000 paterns = 0.8067739259428847 or 86
2  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({3, 4, 5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30, 32, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, -48, -42, -39, -34, -33, -31, -26, -22, -17, -12, -11, -7, -2}), frozenset({3, 4, 5, 6, 8, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 33, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, -48, -42, -39, -34, -32, -31, -24, -22, -17, -12, -9, -7, -2})}
DL of initial theory	: 53432.37650643999
9999	itemsets left after W operation 	: [frozenset({5, 13, 14, 15, 16, 20, 25, 27, 28, 29, 30, -31, 35, 36, 49, -12}), frozenset({3, 4, 6, 9, 10, 11, 18, 19, 21, 23, 26, 33, 37, 38, 39, 41, 43, 44, 45, 46, 47, -49, -48, -42, -40, -34, -32, -24, -22, -17, -8, -7, -2}), frozenset({2, 4, 6, 8, 9, 10, 18, 19, 21, 23, 26, 32, 37, 38, 40, 41, 42, 44, 45, 46, 47, -49, -48, -43, -39, -34, -33, -24, -22, -17, -11, -7, -3}), frozenset({2, 3, 6, 8, 9, 11, 18, 19, 21, 23, 26, 32, 37, 38, 39, 41, 42, 44, 45, 46, 47, -49, -48, -43, -40, -34, -33, -24, -22, -17, -10, -7, -4}), frozenset({2, 3, 6, 8, 9, 10, 18, 19, 21, 23, 24, 32, 37, 38, 40, 41, 42, 44, 45, 47, 48, -49, -46, -43, -39, -34, -33, -26, -22, -17, -11, -7, -4}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 24, 32, 37, 38, 39, 41, 42, 43, 45, 46, 47, -49, -48, -44, -40, -34, -33, -26, -22, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 24, 32, 37, 38, 39, 41, 42, 44, 45, 47, 48, -49, -46, -43, -40, -34, -33, -26, -22, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 24, 33, 37, 38, 40, 41, 42, 44, 45, 47, 48, -49, -46, -43, -39, -34, -32, -26, -22, -17, -11, -7, -2}), frozenset({3, 4, 7, 8, 9, 10, 17, 18, 21, 23, 26, 32, 37, 38, 39, 41, 43, 44, 45, 46, 47, -49, -48, -42, -40, -34, -33, -24, -22, -19, -11, -6, -2}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 26, 33, 37, 38, 39, 41, 42, 44, 45, 46, 47, -49, -48, -43, -40, -34, -32, -24, -22, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 26, 32, 37, 38, 40, 41, 42, 44, 45, 46, 47, -49, -48, -43, -39, -34, -33, -24, -22, -17, -11, -7, -2}), frozenset({2, 3, 6, 8, 9, 10, 18, 19, 21, 23, 24, 32, 34, 38, 40, 41, 42, 43, 45, 46, 47, -49, -48, -44, -39, -37, -33, -26, -22, -17, -11, -7, -4}), frozenset({3, 4, 7, 8, 10, 11, 18, 19, 21, 23, 24, 33, 37, 38, 39, 41, 42, 44, 45, 47, 48, -49, -46, -43, -40, -34, -32, -26, -22, -17, -9, -6, -2}), frozenset({3, 4, 7, 8, 9, 10, 17, 18, 19, 22, 24, 32, 37, 38, 39, 41, 43, 44, 45, 46, 47, -49, -48, -42, -40, -34, -33, -26, -23, -21, -11, -6, -2}), frozenset({2, 4, 6, 8, 9, 10, 18, 19, 21, 23, 24, 32, 37, 38, 39, 41, 42, 43, 45, 46, 47, -49, -48, -44, -40, -34, -33, -26, -22, -17, -11, -7, -3}), frozenset({2, 4, 6, 8, 9, 10, 18, 19, 21, 22, 26, 32, 37, 38, 40, 41, 42, 43, 45, 46, 47, -49, -48, -44, -39, -34, -33, -24, -23, -17, -11, -7, -3}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 26, 32, 37, 38, 39, 41, 43, 44, 45, 46, 47, -49, -48, -42, -40, -34, -33, -24, -22, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 26, 33, 37, 38, 40, 41, 43, 44, 45, 46, 47, -49, -48, -42, -39, -34, -32, -24, -22, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 17, 18, 21, 23, 26, 32, 37, 38, 39, 41, 43, 44, 45, 46, 48, -49, -47, -42, -40, -34, -33, -24, -22, -19, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 17, 18, 21, 23, 24, 32, 37, 38, 39, 41, 42, 43, 44, 46, 47, -49, -48, -45, -40, -34, -33, -26, -22, -19, -11, -7, -2}), frozenset({2, 3, 7, 8, 9, 10, 18, 19, 21, 23, 24, 33, 34, 37, 39, 40, 42, 43, 44, 46, 47, -49, -48, -45, -41, -38, -32, -26, -22, -17, -11, -6, -4}), frozenset({3, 4, 6, 8, 9, 11, 18, 19, 21, 23, 26, 33, 37, 38, 39, 41, 42, 44, 45, 46, 47, -49, -48, -43, -40, -34, -32, -24, -22, -17, -10, -7, -2}), frozenset({2, 3, 6, 8, 9, 10, 18, 19, 21, 23, 24, 32, 37, 38, 39, 41, 42, 43, 45, 46, 47, -49, -48, -44, -40, -34, -33, -26, -22, -17, -11, -7, -4}), frozenset({3, 4, 6, 8, 10, 11, 18, 19, 21, 23, 26, 33, 37, 38, 39, 40, 43, 44, 45, 46, 47, -49, -48, -42, -41, -34, -32, -24, -22, -17, -9, -7, -2}), frozenset({3, 4, 7, 8, 9, 10, 17, 18, 19, 23, 24, 32, 37, 38, 39, 41, 42, 43, 45, 46, 47, -49, -48, -44, -40, -34, -33, -26, -22, -21, -11, -6, -2}), frozenset({3, 4, 6, 8, 9, 10, 17, 19, 21, 22, 24, 33, 37, 38, 39, 41, 42, 43, 44, 46, 47, -49, -48, -45, -40, -34, -32, -26, -23, -18, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 26, 33, 37, 38, 40, 41, 42, 44, 45, 47, 48, -49, -46, -43, -39, -34, -32, -24, -22, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, 11, 17, 19, 21, 23, 24, 33, 37, 38, 39, 41, 43, 44, 45, 47, 48, -49, -46, -42, -40, -34, -32, -26, -22, -18, -9, -7, -2}), frozenset({2, 3, 7, 8, 9, 10, 18, 19, 21, 23, 24, 33, 34, 38, 39, 40, 42, 43, 45, 47, 48, -49, -46, -44, -41, -37, -32, -26, -22, -17, -11, -6, -4}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 24, 32, 37, 38, 39, 41, 42, 43, 44, 46, 47, -49, -48, -45, -40, -34, -33, -26, -22, -17, -11, -7, -2}), frozenset({2, 3, 6, 9, 10, 11, 17, 19, 21, 22, 24, 33, 37, 38, 39, 41, 42, 44, 45, 47, 48, -49, -46, -43, -40, -34, -32, -26, -23, -18, -8, -7, -4}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 26, 32, 34, 37, 39, 40, 43, 44, 45, 46, 47, -49, -48, -42, -41, -38, -33, -24, -22, -17, -11, -7, -2}), frozenset({3, 4, 6, 9, 10, 11, 18, 19, 21, 23, 26, 32, 34, 38, 39, 41, 43, 44, 45, 46, 47, -49, -48, -42, -40, -37, -33, -24, -22, -17, -8, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 17, 19, 21, 23, 24, 32, 37, 38, 39, 41, 42, 43, 45, 47, 48, -49, -46, -44, -40, -34, -33, -26, -22, -18, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 17, 18, 21, 23, 26, 32, 34, 38, 39, 41, 42, 43, 44, 46, 47, -49, -48, -45, -40, -37, -33, -24, -22, -19, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 24, 33, 37, 38, 40, 41, 43, 44, 45, 46, 47, -49, -48, -42, -39, -34, -32, -26, -22, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 24, 32, 37, 38, 39, 41, 43, 44, 45, 46, 47, -49, -48, -42, -40, -34, -33, -26, -22, -17, -11, -7, -2}), frozenset({2, 4, 6, 8, 9, 10, 18, 19, 21, 23, 24, 32, 37, 38, 39, 41, 42, 44, 45, 46, 47, -49, -48, -43, -40, -34, -33, -26, -22, -17, -11, -7, -3}), frozenset({2, 3, 6, 8, 9, 11, 18, 19, 21, 23, 24, 33, 37, 38, 39, 41, 42, 43, 44, 46, 47, -49, -48, -45, -40, -34, -32, -26, -22, -17, -10, -7, -4}), frozenset({3, 4, 7, 8, 10, 11, 17, 18, 21, 22, 24, 33, 37, 38, 40, 41, 42, 43, 45, 47, 48, -49, -46, -44, -39, -34, -32, -26, -23, -19, -9, -6, -2}), frozenset({2, 4, 6, 9, 10, 11, 18, 19, 21, 23, 24, 33, 37, 38, 40, 41, 43, 44, 45, 47, 48, -49, -46, -42, -39, -34, -32, -26, -22, -17, -8, -7, -3}), frozenset({2, 4, 7, 8, 9, 10, 18, 19, 21, 23, 24, 33, 37, 38, 39, 41, 42, 43, 45, 46, 47, -49, -48, -44, -40, -34, -32, -26, -22, -17, -11, -6, -3}), frozenset({2, 4, 6, 8, 9, 10, 17, 19, 21, 23, 24, 32, 37, 38, 39, 41, 42, 43, 45, 46, 47, -49, -48, -44, -40, -34, -33, -26, -22, -18, -11, -7, -3}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 26, 32, 37, 38, 39, 41, 42, 44, 45, 46, 47, -49, -48, -43, -40, -34, -33, -24, -22, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 26, 33, 37, 38, 40, 41, 42, 44, 45, 46, 47, -49, -48, -43, -39, -34, -32, -24, -22, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 17, 18, 21, 23, 26, 32, 37, 38, 39, 41, 42, 43, 45, 46, 47, -49, -48, -44, -40, -34, -33, -24, -22, -19, -11, -7, -2}), frozenset({2, 3, 6, 8, 9, 10, 18, 19, 21, 23, 26, 32, 34, 38, 39, 41, 42, 44, 45, 46, 47, -49, -48, -43, -40, -37, -33, -24, -22, -17, -11, -7, -4}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 22, 24, 32, 37, 38, 39, 41, 42, 44, 45, 47, 48, -49, -46, -43, -40, -34, -33, -26, -23, -17, -11, -7, -2}), frozenset({2, 3, 6, 8, 9, 10, 18, 19, 21, 22, 26, 33, 37, 38, 39, 41, 42, 43, 45, 46, 47, -49, -48, -44, -40, -34, -32, -24, -23, -17, -11, -7, -4}), frozenset({2, 3, 6, 8, 9, 10, 18, 19, 21, 23, 26, 33, 37, 38, 40, 41, 42, 44, 45, 46, 47, -49, -48, -43, -39, -34, -32, -24, -22, -17, -11, -7, -4}), frozenset({3, 4, 6, 8, 9, 11, 18, 19, 21, 22, 24, 32, 37, 38, 39, 41, 42, 44, 45, 46, 48, -49, -47, -43, -40, -34, -33, -26, -23, -17, -10, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 26, 32, 37, 38, 39, 40, 43, 44, 45, 46, 48, -49, -47, -42, -41, -34, -33, -24, -22, -17, -11, -7, -2}), frozenset({2, 4, 6, 8, 9, 10, 17, 18, 21, 23, 24, 33, 37, 38, 39, 41, 42, 43, 45, 46, 47, -49, -48, -44, -40, -34, -32, -26, -22, -19, -11, -7, -3}), frozenset({2, 3, 7, 8, 9, 10, 17, 18, 19, 23, 24, 33, 37, 38, 40, 41, 43, 44, 45, 47, 48, -49, -46, -42, -39, -34, -32, -26, -22, -21, -11, -6, -4}), frozenset({2, 3, 7, 8, 9, 10, 18, 19, 21, 23, 26, 32, 37, 38, 39, 41, 42, 43, 45, 47, 48, -49, -46, -44, -40, -34, -33, -24, -22, -17, -11, -6, -4}), frozenset({3, 4, 6, 8, 9, 11, 18, 19, 21, 23, 24, 33, 37, 38, 40, 41, 42, 43, 44, 47, 48, -49, -46, -45, -39, -34, -32, -26, -22, -17, -10, -7, -2}), frozenset({2, 4, 6, 8, 9, 11, 18, 19, 21, 22, 26, 33, 37, 38, 39, 41, 42, 44, 45, 46, 48, -49, -47, -43, -40, -34, -32, -24, -23, -17, -10, -7, -3}), frozenset({2, 3, 6, 8, 9, 11, 17, 18, 21, 23, 26, 32, 37, 38, 39, 41, 43, 44, 45, 46, 47, -49, -48, -42, -40, -34, -33, -24, -22, -19, -10, -7, -4}), frozenset({2, 3, 6, 8, 10, 11, 18, 19, 21, 23, 26, 32, 37, 38, 39, 41, 42, 43, 44, 46, 48, -49, -47, -45, -40, -34, -33, -24, -22, -17, -9, -7, -4}), frozenset({2, 3, 7, 8, 9, 10, 17, 18, 21, 23, 24, 32, 37, 38, 39, 41, 43, 44, 45, 46, 47, -49, -48, -42, -40, -34, -33, -26, -22, -19, -11, -6, -4}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 24, 32, 37, 38, 39, 41, 42, 44, 45, 46, 47, -49, -48, -43, -40, -34, -33, -26, -22, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 17, 18, 21, 23, 24, 33, 37, 38, 40, 41, 42, 44, 45, 47, 48, -49, -46, -43, -39, -34, -32, -26, -22, -19, -11, -7, -2}), frozenset({2, 3, 7, 8, 9, 10, 18, 19, 21, 23, 26, 32, 37, 38, 39, 41, 43, 44, 45, 47, 48, -49, -46, -42, -40, -34, -33, -24, -22, -17, -11, -6, -4}), frozenset({3, 4, 6, 8, 9, 10, 17, 18, 21, 23, 24, 33, 37, 38, 40, 41, 42, 43, 45, 46, 47, -49, -48, -44, -39, -34, -32, -26, -22, -19, -11, -7, -2}), frozenset({3, 4, 7, 8, 9, 10, 18, 19, 21, 23, 26, 32, 37, 38, 39, 41, 43, 44, 45, 46, 47, -49, -48, -42, -40, -34, -33, -24, -22, -17, -11, -6, -2}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 22, 24, 32, 37, 38, 40, 41, 42, 43, 45, 46, 47, -49, -48, -44, -39, -34, -33, -26, -23, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 11, 18, 19, 21, 23, 24, 33, 37, 38, 39, 41, 42, 44, 45, 46, 47, -49, -48, -43, -40, -34, -32, -26, -22, -17, -10, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 26, 33, 37, 38, 40, 41, 42, 43, 45, 46, 47, -49, -48, -44, -39, -34, -32, -24, -22, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 17, 18, 21, 23, 26, 32, 37, 38, 40, 41, 43, 44, 45, 46, 47, -49, -48, -42, -39, -34, -33, -24, -22, -19, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 24, 33, 37, 38, 39, 41, 43, 44, 45, 46, 47, -49, -48, -42, -40, -34, -32, -26, -22, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 24, 32, 37, 38, 40, 41, 43, 44, 45, 46, 47, -49, -48, -42, -39, -34, -33, -26, -22, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 17, 18, 19, 23, 26, 32, 37, 38, 39, 41, 42, 44, 45, 46, 47, -49, -48, -43, -40, -34, -33, -24, -22, -21, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 26, 33, 37, 38, 39, 41, 43, 44, 45, 46, 47, -49, -48, -42, -40, -34, -32, -24, -22, -17, -11, -7, -2}), frozenset({2, 3, 6, 9, 10, 11, 18, 19, 21, 23, 26, 33, 37, 38, 39, 41, 42, 43, 45, 47, 48, -49, -46, -44, -40, -34, -32, -24, -22, -17, -8, -7, -4}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 23, 24, 32, 37, 38, 39, 41, 42, 44, 45, 46, 48, -49, -47, -43, -40, -34, -33, -26, -22, -17, -11, -7, -2}), frozenset({2, 3, 6, 8, 9, 10, 17, 19, 21, 23, 24, 32, 37, 38, 39, 41, 42, 43, 44, 47, 48, -49, -46, -45, -40, -34, -33, -26, -22, -18, -11, -7, -4}), frozenset({3, 4, 6, 8, 9, 10, 17, 19, 21, 23, 24, 32, 37, 38, 40, 41, 43, 44, 45, 46, 47, -49, -48, -42, -39, -34, -33, -26, -22, -18, -11, -7, -2}), frozenset({2, 3, 7, 8, 9, 10, 17, 18, 21, 22, 26, 33, 37, 38, 39, 41, 42, 43, 44, 47, 48, -49, -46, -45, -40, -34, -32, -24, -23, -19, -11, -6, -4}), frozenset({2, 3, 6, 8, 9, 10, 18, 19, 21, 23, 24, 33, 37, 38, 39, 41, 42, 43, 45, 46, 48, -49, -47, -44, -40, -34, -32, -26, -22, -17, -11, -7, -4}), frozenset({2, 3, 7, 8, 9, 10, 18, 19, 21, 23, 24, 33, 37, 38, 39, 41, 42, 43, 44, 46, 47, -49, -48, -45, -40, -34, -32, -26, -22, -17, -11, -6, -4}), frozenset({2, 3, 6, 8, 9, 10, 17, 18, 21, 23, 24, 32, 37, 38, 39, 41, 42, 43, 45, 47, 48, -49, -46, -44, -40, -34, -33, -26, -22, -19, -11, -7, -4}), frozenset({3, 4, 6, 8, 10, 11, 18, 19, 21, 23, 26, 33, 37, 38, 40, 41, 43, 44, 45, 46, 47, -49, -48, -42, -39, -34, -32, -24, -22, -17, -9, -7, -2}), frozenset({2, 3, 6, 8, 9, 10, 18, 19, 21, 23, 24, 33, 37, 38, 39, 41, 42, 44, 45, 46, 47, -49, -48, -43, -40, -34, -32, -26, -22, -17, -11, -7, -4}), frozenset({2, 3, 6, 8, 9, 11, 17, 18, 19, 23, 26, 33, 37, 38, 40, 41, 43, 44, 45, 47, 48, -49, -46, -42, -39, -34, -32, -24, -22, -21, -10, -7, -4}), frozenset({2, 3, 6, 8, 9, 10, 18, 19, 21, 23, 24, 32, 37, 38, 40, 41, 42, 44, 45, 46, 47, -49, -48, -43, -39, -34, -33, -26, -22, -17, -11, -7, -4}), frozenset({2, 4, 6, 9, 10, 11, 18, 19, 21, 23, 26, 33, 37, 38, 40, 41, 42, 43, 45, 47, 48, -49, -46, -44, -39, -34, -32, -24, -22, -17, -8, -7, -3}), frozenset({2, 3, 6, 8, 9, 10, 18, 19, 21, 23, 26, 32, 37, 38, 39, 40, 43, 44, 45, 46, 47, -49, -48, -42, -41, -34, -33, -24, -22, -17, -11, -7, -4})]
5411	itemsets left after W operation 	: [frozenset({35, 5, 38, 8, 13, 14, 16, 50, 21, 27}), frozenset({2, 3, 6, 10, 11, 15, 17, 19, 20, 23, 24, 25, 28, 29, 31, 33, 36, 37, 39, 41, 42, 44, 45, 46, 47, -50, -48, -43, -40, -34, -32, -30, -26, -22, -18, -12, -9, -7, -4}), frozenset({2, 3, 6, 9, 10, 15, 17, 18, 19, 23, 24, 25, 28, 29, 30, 33, 36, 37, 39, 41, 42, 43, 44, 47, 48, -50, -46, -45, -40, -34, -32, -31, -26, -22, -20, -12, -11, -7, -4}), frozenset({3, 4, 6, 9, 10, 15, 17, 18, 20, 23, 24, 26, 28, 29, 30, 33, 34, 36, 39, 40, 42, 43, 44, 46, 48, -50, -47, -45, -41, -37, -32, -31, -25, -22, -19, -12, -11, -7, -2}), frozenset({3, 4, 7, 9, 10, 15, 18, 19, 20, 23, 24, 26, 28, 29, 30, 32, 36, 37, 39, 41, 42, 44, 45, 46, 47, -50, -48, -43, -40, -34, -33, -31, -25, -22, -17, -12, -11, -6, -2}), frozenset({2, 3, 7, 9, 11, 15, 18, 19, 20, 23, 25, 26, 28, 29, 31, 33, 36, 37, 39, 41, 42, 44, 45, 46, 47, -50, -48, -43, -40, -34, -32, -30, -24, -22, -17, -12, -10, -6, -4}), frozenset({3, 4, 6, 9, 10, 15, 18, 19, 20, 23, 25, 26, 29, 30, 31, 32, 36, 37, 39, 41, 42, 44, 45, 46, 47, -50, -48, -43, -40, -34, -33, -28, -24, -22, -17, -12, -11, -7, -2}), frozenset({3, 4, 6, 10, 11, 12, 17, 19, 20, 23, 24, 25, 28, 29, 30, 33, 36, 37, 40, 41, 42, 44, 45, 46, 47, -50, -48, -43, -39, -34, -32, -31, -26, -22, -18, -15, -9, -7, -2}), frozenset({2, 3, 6, 9, 10, 15, 18, 19, 20, 22, 25, 26, 28, 29, 30, 33, 34, 37, 39, 41, 42, 43, 45, 46, 47, -50, -48, -44, -40, -36, -32, -31, -24, -23, -17, -12, -11, -7, -4}), frozenset({3, 4, 7, 9, 10, 12, 17, 18, 19, 23, 24, 26, 28, 29, 30, 32, 34, 37, 39, 41, 43, 44, 45, 47, 48, -50, -46, -42, -40, -36, -33, -31, -25, -22, -20, -15, -11, -6, -2}), frozenset({2, 3, 6, 9, 10, 15, 18, 19, 20, 23, 24, 25, 28, 30, 31, 32, 36, 37, 39, 40, 42, 44, 45, 47, 48, -50, -46, -43, -41, -34, -33, -29, -26, -22, -17, -12, -11, -7, -4}), frozenset({2, 3, 6, 9, 11, 12, 18, 19, 20, 22, 24, 25, 28, 29, 30, 32, 36, 37, 39, 41, 43, 44, 45, 46, 47, -50, -48, -42, -40, -34, -33, -31, -26, -23, -17, -15, -10, -7, -4}), frozenset({2, 4, 6, 9, 10, 15, 18, 19, 20, 22, 24, 25, 29, 30, 31, 33, 36, 37, 39, 41, 42, 43, 45, 46, 48, -50, -47, -44, -40, -34, -32, -28, -26, -23, -17, -12, -11, -7, -3}), frozenset({2, 3, 6, 9, 10, 15, 18, 19, 20, 23, 25, 26, 28, 29, 31, 32, 36, 37, 39, 41, 42, 43, 45, 46, 47, -50, -48, -44, -40, -34, -33, -30, -24, -22, -17, -12, -11, -7, -4}), frozenset({3, 4, 6, 9, 10, 15, 17, 19, 20, 23, 25, 26, 28, 30, 31, 32, 36, 37, 39, 41, 42, 43, 45, 46, 47, -50, -48, -44, -40, -34, -33, -29, -24, -22, -18, -12, -11, -7, -2}), frozenset({2, 4, 7, 9, 10, 12, 18, 19, 20, 23, 25, 26, 28, 29, 30, 32, 36, 37, 39, 41, 43, 44, 45, 47, 48, -50, -46, -42, -40, -34, -33, -31, -24, -22, -17, -15, -11, -6, -3})]
# of frequent itemsets	: 30
Time of DCI Closed		: 0.3444647789001465
29	itemsets left after W operation 	: [frozenset({41, 51, 37, -34}), frozenset({2, 3, 4, 6, 8, 9, 10, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 27, 28, 29, 30, 32, 35, 36, 38, 40, 42, 43, 44, 47, 48, -51, -46, -45, -39, -33, -31, -26, -22, -19, -12, -11, -7, -5}), frozenset({2, 3, 5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 23, 25, 26, 28, 29, 30, 31, 33, 35, 36, 38, 39, 43, 44, 45, 47, 48, -51, -46, -42, -40, -32, -27, -24, -22, -17, -12, -11, -7, -4}), frozenset({2, 4, 5, 6, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30, 33, 35, 36, 38, 39, 43, 44, 45, 46, 47, -51, -48, -42, -40, -32, -31, -26, -22, -18, -14, -8, -7, -3}), frozenset({3, 4, 6, 9, 10, 11, -51, -49, -48, 18, 19, 21, -42, 23, -40, 26, -32, 33, 38, 39, -24, -22, 43, 44, 45, 46, 47, -17, -8, -7, -2}), frozenset({2, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, 21, -43, 23, -39, 26, -33, 32, 38, 40, -24, 42, -22, 44, 45, 46, 47, -17, -11, -7, -3}), frozenset({2, 3, 6, 8, 9, 11, -51, -49, -48, 18, 19, 21, -43, 23, -40, 26, -33, 32, 38, 39, -24, 42, -22, 44, 45, 46, 47, -17, -10, -7, -4}), frozenset({2, 3, 6, 8, 9, 10, -51, -49, 18, 19, -46, 21, -43, 23, 24, -39, -33, 32, 38, -26, 40, 42, -22, 44, 45, 47, 48, -17, -11, -7, -4}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, -44, 21, 23, 24, -40, -33, 32, 38, 39, -26, 42, 43, -22, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, 18, 19, -46, 21, -43, 23, 24, -40, -33, 32, 38, 39, -26, 42, -22, 44, 45, 47, 48, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, 18, 19, -46, 21, -43, 23, 24, -39, -32, 33, 38, -26, 40, 42, -22, 44, 45, 47, 48, -17, -11, -7, -2}), frozenset({3, 4, 7, 8, 9, 10, -51, -49, -48, 17, 18, 21, -42, 23, -40, 26, -33, 32, 38, 39, -24, -22, 43, 44, 45, 46, 47, -19, -11, -6, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, 21, -43, 23, -40, 26, -32, 33, 38, 39, -24, 42, -22, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, 21, -43, 23, -39, 26, -33, 32, 38, 40, -24, 42, -22, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 7, 8, 10, 11, -51, -49, 18, 19, -46, 21, -43, 23, 24, -40, -32, 33, 38, 39, -26, 42, -22, 44, 45, 47, 48, -17, -9, -6, -2}), frozenset({3, 4, 7, 8, 9, 10, -51, -49, -48, 17, 18, 19, 22, -42, 24, -40, -33, 32, 38, 39, -26, -23, 43, 44, 45, 46, 47, -21, -11, -6, -2}), frozenset({2, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, -44, 21, 23, 24, -40, -33, 32, 38, 39, -26, 42, 43, -22, 45, 46, 47, -17, -11, -7, -3}), frozenset({2, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, -44, 21, 22, -39, 26, -33, 32, 38, 40, -24, 42, 43, -23, 45, 46, 47, -17, -11, -7, -3}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, 21, -42, 23, -40, 26, -33, 32, 38, 39, -24, -22, 43, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, 21, -42, 23, -39, 26, -32, 33, 38, 40, -24, -22, 43, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, 17, 18, -47, 21, -42, 23, -40, 26, -33, 32, 38, 39, -24, -22, 43, 44, 45, 46, -19, 48, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 17, 18, -45, 21, 23, 24, -40, -33, 32, 38, 39, -26, 42, 43, 44, -22, 46, 47, -19, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 11, -51, -49, -48, 18, 19, 21, -43, 23, -40, 26, -32, 33, 38, 39, -24, 42, -22, 44, 45, 46, 47, -17, -10, -7, -2}), frozenset({2, 3, 6, 8, 9, 10, -51, -49, -48, 18, 19, -44, 21, 23, 24, -40, -33, 32, 38, 39, -26, 42, 43, -22, 45, 46, 47, -17, -11, -7, -4}), frozenset({3, 4, 7, 8, 9, 10, -51, -49, -48, 17, 18, 19, -44, 23, 24, -40, -33, 32, 38, 39, -26, 42, 43, -22, 45, 46, 47, -21, -11, -6, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 17, 19, -45, 21, 22, 24, -40, -32, 33, 38, 39, -26, -23, 42, 43, 44, 46, 47, -18, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, 18, 19, -46, 21, -43, 23, -39, 26, -32, 33, 38, 40, -24, 42, -22, 44, 45, 47, 48, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, 11, -51, -49, 17, -46, 19, 21, -42, 23, 24, -40, -32, 33, 38, 39, -26, -22, 43, 44, 45, -18, 47, 48, -9, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, -45, 21, 23, 24, -40, -33, 32, 38, 39, -26, 42, 43, 44, -22, 46, 47, -17, -11, -7, -2}), frozenset({2, 3, 6, 9, 10, 11, -51, -49, 17, -46, 19, 21, 22, -43, 24, -40, -32, 33, 38, 39, -26, -23, 42, 44, 45, -18, 47, 48, -8, -7, -4}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, 17, -46, 19, -44, 21, 23, 24, -40, -33, 32, 38, 39, -26, 42, 43, -22, 45, -18, 47, 48, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, 21, -42, 23, 24, -39, -32, 33, 38, -26, 40, -22, 43, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, 21, -42, 23, 24, -40, -33, 32, 38, 39, -26, -22, 43, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({2, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, 21, -43, 23, 24, -40, -33, 32, 38, 39, -26, 42, -22, 44, 45, 46, 47, -17, -11, -7, -3}), frozenset({2, 3, 6, 8, 9, 11, -51, -49, -48, 18, 19, -45, 21, 23, 24, -40, -32, 33, 38, 39, -26, 42, 43, 44, -22, 46, 47, -17, -10, -7, -4}), frozenset({3, 4, 7, 8, 10, 11, -51, -49, 17, 18, -46, -44, 21, 22, 24, -39, -32, 33, 38, -26, 40, -23, 42, 43, 45, -19, 47, 48, -9, -6, -2}), frozenset({2, 4, 6, 9, 10, 11, -51, -49, 18, 19, -46, 21, -42, 23, 24, -39, -32, 33, 38, -26, 40, -22, 43, 44, 45, 47, 48, -17, -8, -7, -3}), frozenset({2, 4, 7, 8, 9, 10, -51, -49, -48, 18, 19, -44, 21, 23, 24, -40, -32, 33, 38, 39, -26, 42, 43, -22, 45, 46, 47, -17, -11, -6, -3}), frozenset({2, 4, 6, 8, 9, 10, -51, -49, -48, 17, 19, -44, 21, 23, 24, -40, -33, 32, 38, 39, -26, 42, 43, -22, 45, 46, 47, -18, -11, -7, -3}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, 21, -43, 23, -40, 26, -33, 32, 38, 39, -24, 42, -22, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, 21, -43, 23, -39, 26, -32, 33, 38, 40, -24, 42, -22, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 17, 18, -44, 21, 23, -40, 26, -33, 32, 38, 39, -24, 42, 43, -22, 45, 46, 47, -19, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, 18, 19, -46, 21, 22, -43, 24, -40, -33, 32, 38, 39, -26, -23, 42, 44, 45, 47, 48, -17, -11, -7, -2}), frozenset({2, 3, 6, 8, 9, 10, -51, -49, -48, 18, 19, -44, 21, 22, -40, 26, -32, 33, 38, 39, -24, -23, 42, 43, 45, 46, 47, -17, -11, -7, -4}), frozenset({2, 3, 6, 8, 9, 10, -51, -49, -48, 18, 19, 21, -43, 23, -39, 26, -32, 33, 38, 40, -24, 42, -22, 44, 45, 46, 47, -17, -11, -7, -4}), frozenset({3, 4, 6, 8, 9, 11, -51, -49, -47, 18, 19, 21, 22, -43, 24, -40, -33, 32, 38, 39, -26, -23, 42, 44, 45, 46, -17, 48, -10, -7, -2}), frozenset({2, 4, 6, 8, 9, 10, -51, -49, -48, 17, 18, -44, 21, 23, 24, -40, -32, 33, 38, 39, -26, 42, 43, -22, 45, 46, 47, -19, -11, -7, -3}), frozenset({2, 3, 7, 8, 9, 10, -51, -49, 17, 18, 19, -46, -42, 23, 24, -39, -32, 33, 38, -26, 40, -22, 43, 44, 45, -21, 47, 48, -11, -6, -4}), frozenset({2, 3, 7, 8, 9, 10, -51, -49, 18, 19, -46, 21, -44, 23, -40, 26, -33, 32, 38, 39, -24, 42, 43, -22, 45, 47, 48, -17, -11, -6, -4}), frozenset({3, 4, 6, 8, 9, 11, -51, -49, 18, 19, -46, 21, -45, 23, 24, -39, -32, 33, 38, -26, 40, 42, 43, 44, -22, 47, 48, -17, -10, -7, -2}), frozenset({2, 4, 6, 8, 9, 11, -51, -49, -47, 18, 19, 21, 22, -43, -40, 26, -32, 33, 38, 39, -24, -23, 42, 44, 45, 46, -17, 48, -10, -7, -3}), frozenset({2, 3, 6, 8, 9, 11, -51, -49, -48, 17, 18, 21, -42, 23, -40, 26, -33, 32, 38, 39, -24, -22, 43, 44, 45, 46, 47, -19, -10, -7, -4}), frozenset({2, 3, 6, 8, 10, 11, -51, -49, -47, 18, 19, -45, 21, 23, -40, 26, -33, 32, 38, 39, -24, 42, 43, 44, -22, 46, -17, 48, -9, -7, -4}), frozenset({2, 3, 7, 8, 9, 10, -51, -49, -48, 17, 18, 21, -42, 23, 24, -40, -33, 32, 38, 39, -26, -22, 43, 44, 45, 46, 47, -19, -11, -6, -4}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, 21, -43, 23, 24, -40, -33, 32, 38, 39, -26, 42, -22, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, 17, 18, -46, 21, -43, 23, 24, -39, -32, 33, 38, -26, 40, 42, -22, 44, 45, -19, 47, 48, -11, -7, -2}), frozenset({2, 3, 7, 8, 9, 10, -51, -49, 18, 19, -46, 21, -42, 23, -40, 26, -33, 32, 38, 39, -24, -22, 43, 44, 45, 47, 48, -17, -11, -6, -4}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 17, 18, -44, 21, 23, 24, -39, -32, 33, 38, -26, 40, 42, 43, -22, 45, 46, 47, -19, -11, -7, -2}), frozenset({3, 4, 7, 8, 9, 10, -51, -49, -48, 18, 19, 21, -42, 23, -40, 26, -33, 32, 38, 39, -24, -22, 43, 44, 45, 46, 47, -17, -11, -6, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, -44, 21, 22, 24, -39, -33, 32, 38, -26, 40, -23, 42, 43, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 11, -51, -49, -48, 18, 19, 21, -43, 23, 24, -40, -32, 33, 38, 39, -26, 42, -22, 44, 45, 46, 47, -17, -10, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, -44, 21, 23, -39, 26, -32, 33, 38, 40, -24, 42, 43, -22, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 17, 18, 21, -42, 23, -39, 26, -33, 32, 38, 40, -24, -22, 43, 44, 45, 46, 47, -19, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, 21, -42, 23, 24, -40, -32, 33, 38, 39, -26, -22, 43, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, 21, -42, 23, 24, -39, -33, 32, 38, -26, 40, -22, 43, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 17, 18, 19, -43, 23, -40, 26, -33, 32, 38, 39, -24, 42, -22, 44, 45, 46, 47, -21, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 18, 19, 21, -42, 23, -40, 26, -32, 33, 38, 39, -24, -22, 43, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({2, 3, 6, 9, 10, 11, -51, -49, 18, 19, -46, 21, -44, 23, -40, 26, -32, 33, 38, 39, -24, 42, 43, -22, 45, 47, 48, -17, -8, -7, -4}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -47, 18, 19, 21, -43, 23, 24, -40, -33, 32, 38, 39, -26, 42, -22, 44, 45, 46, -17, 48, -11, -7, -2}), frozenset({2, 3, 6, 8, 9, 10, -51, -49, 17, -46, 19, -45, 21, 23, 24, -40, -33, 32, 38, 39, -26, 42, 43, 44, -22, -18, 47, 48, -11, -7, -4}), frozenset({3, 4, 6, 8, 9, 10, -51, -49, -48, 17, 19, 21, -42, 23, 24, -39, -33, 32, 38, -26, 40, -22, 43, 44, 45, 46, 47, -18, -11, -7, -2}), frozenset({2, 3, 7, 8, 9, 10, -51, -49, 17, 18, -46, -45, 21, 22, -40, 26, -32, 33, 38, 39, -24, -23, 42, 43, 44, -19, 47, 48, -11, -6, -4}), frozenset({2, 3, 6, 8, 9, 10, -51, -49, -47, 18, 19, -44, 21, 23, 24, -40, -32, 33, 38, 39, -26, 42, 43, -22, 45, 46, -17, 48, -11, -7, -4}), frozenset({2, 3, 7, 8, 9, 10, -51, -49, -48, 18, 19, -45, 21, 23, 24, -40, -32, 33, 38, 39, -26, 42, 43, 44, -22, 46, 47, -17, -11, -6, -4}), frozenset({2, 3, 6, 8, 9, 10, -51, -49, 17, 18, -46, -44, 21, 23, 24, -40, -33, 32, 38, 39, -26, 42, 43, -22, 45, -19, 47, 48, -11, -7, -4}), frozenset({3, 4, 6, 8, 10, 11, -51, -49, -48, 18, 19, 21, -42, 23, -39, 26, -32, 33, 38, 40, -24, -22, 43, 44, 45, 46, 47, -17, -9, -7, -2}), frozenset({2, 3, 6, 8, 9, 10, -51, -49, -48, 18, 19, 21, -43, 23, 24, -40, -32, 33, 38, 39, -26, 42, -22, 44, 45, 46, 47, -17, -11, -7, -4}), frozenset({2, 3, 6, 8, 9, 11, -51, -49, 17, 18, 19, -46, -42, 23, -39, 26, -32, 33, 38, 40, -24, -22, 43, 44, 45, -21, 47, 48, -10, -7, -4}), frozenset({2, 3, 6, 8, 9, 10, -51, -49, -48, 18, 19, 21, -43, 23, 24, -39, -33, 32, 38, -26, 40, 42, -22, 44, 45, 46, 47, -17, -11, -7, -4}), frozenset({2, 4, 6, 9, 10, 11, -51, -49, 18, 19, -46, 21, -44, 23, -39, 26, -32, 33, 38, 40, -24, 42, 43, -22, 45, 47, 48, -17, -8, -7, -3}), frozenset({2, 3, 6, 10, 11, 15, 17, 19, 20, 23, 24, 25, 28, 29, 31, 33, 36, 39, 42, 44, 45, 46, 47, -51, -50, -48, -43, -40, -32, -30, -26, -22, -18, -12, -9, -7, -4}), frozenset({2, 3, 6, 9, 10, 15, 17, 18, 19, 23, 24, 25, 28, 29, 30, 33, 36, 39, 42, 43, 44, 47, 48, -51, -50, -46, -45, -40, -32, -31, -26, -22, -20, -12, -11, -7, -4}), frozenset({3, 4, 7, 9, 10, 15, 18, 19, 20, 23, 24, 26, 28, 29, 30, 32, 36, 39, 42, 44, 45, 46, 47, -51, -50, -48, -43, -40, -33, -31, -25, -22, -17, -12, -11, -6, -2}), frozenset({2, 3, 7, 9, 11, 15, 18, 19, 20, 23, 25, 26, 28, 29, 31, 33, 36, 39, 42, 44, 45, 46, 47, -51, -50, -48, -43, -40, -32, -30, -24, -22, -17, -12, -10, -6, -4}), frozenset({3, 4, 6, 9, 10, 15, 18, 19, 20, 23, 25, 26, 29, 30, 31, 32, 36, 39, 42, 44, 45, 46, 47, -51, -50, -48, -43, -40, -33, -28, -24, -22, -17, -12, -11, -7, -2}), frozenset({3, 4, 6, 10, 11, 12, 17, 19, 20, 23, 24, 25, 28, 29, 30, 33, 36, 40, 42, 44, 45, 46, 47, -51, -50, -48, -43, -39, -32, -31, -26, -22, -18, -15, -9, -7, -2}), frozenset({2, 3, 6, 9, 11, 12, 18, 19, 20, 22, 24, 25, 28, 29, 30, 32, 36, 39, 43, 44, 45, 46, 47, -51, -50, -48, -42, -40, -33, -31, -26, -23, -17, -15, -10, -7, -4}), frozenset({2, 4, 6, 9, 10, 15, 18, 19, 20, 22, 24, 25, 29, 30, 31, 33, 36, 39, 42, 43, 45, 46, 48, -51, -50, -47, -44, -40, -32, -28, -26, -23, -17, -12, -11, -7, -3}), frozenset({2, 3, 6, 9, 10, 15, 18, 19, 20, 23, 25, 26, 28, 29, 31, 32, 36, 39, 42, 43, 45, 46, 47, -51, -50, -48, -44, -40, -33, -30, -24, -22, -17, -12, -11, -7, -4}), frozenset({3, 4, 6, 9, 10, 15, 17, 19, 20, 23, 25, 26, 28, 30, 31, 32, 36, 39, 42, 43, 45, 46, 47, -51, -50, -48, -44, -40, -33, -29, -24, -22, -18, -12, -11, -7, -2}), frozenset({2, 4, 7, 9, 10, 12, 18, 19, 20, 23, 25, 26, 28, 29, 30, 32, 36, 39, 43, 44, 45, 47, 48, -51, -50, -46, -42, -40, -33, -31, -24, -22, -17, -15, -11, -6, -3})]
28	itemsets left after W operation 	: [frozenset({-22, 52, 23}), frozenset({2, 4, 5, 6, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 21, 24, 25, 27, 28, 29, 30, 32, 34, 35, 37, 38, 39, 40, 43, 44, 45, 46, 47, -52, -48, -42, -41, -36, -33, -31, -26, -20, -14, -11, -7, -3}), frozenset({2, 3, 6, 8, 9, 10, 18, 19, 21, 24, 32, 34, 38, 40, 41, 42, 43, 45, 46, 47, -52, -49, -48, -44, -39, -37, -33, -26, -17, -11, -7, -4}), frozenset({2, 3, 7, 8, 9, 10, 18, 19, 21, 24, 33, 34, 37, 39, 40, 42, 43, 44, 46, 47, -52, -49, -48, -45, -41, -38, -32, -26, -17, -11, -6, -4}), frozenset({3, 4, 6, 8, 10, 11, 18, 19, 21, 26, 33, 37, 38, 39, 40, 43, 44, 45, 46, 47, -52, -49, -48, -42, -41, -34, -32, -24, -17, -9, -7, -2}), frozenset({2, 3, 7, 8, 9, 10, 18, 19, 21, 24, 33, 34, 38, 39, 40, 42, 43, 45, 47, 48, -52, -49, -46, -44, -41, -37, -32, -26, -17, -11, -6, -4}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 26, 32, 34, 37, 39, 40, 43, 44, 45, 46, 47, -52, -49, -48, -42, -41, -38, -33, -24, -17, -11, -7, -2}), frozenset({3, 4, 6, 9, 10, 11, 18, 19, 21, 26, 32, 34, 38, 39, 41, 43, 44, 45, 46, 47, -52, -49, -48, -42, -40, -37, -33, -24, -17, -8, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, 17, 18, 21, 26, 32, 34, 38, 39, 41, 42, 43, 44, 46, 47, -52, -49, -48, -45, -40, -37, -33, -24, -19, -11, -7, -2}), frozenset({2, 3, 6, 8, 9, 10, 18, 19, 21, 26, 32, 34, 38, 39, 41, 42, 44, 45, 46, 47, -52, -49, -48, -43, -40, -37, -33, -24, -17, -11, -7, -4}), frozenset({3, 4, 6, 8, 9, 10, 18, 19, 21, 26, 32, 37, 38, 39, 40, 43, 44, 45, 46, 48, -52, -49, -47, -42, -41, -34, -33, -24, -17, -11, -7, -2}), frozenset({2, 3, 6, 8, 9, 10, 18, 19, 21, 26, 32, 37, 38, 39, 40, 43, 44, 45, 46, 47, -52, -49, -48, -42, -41, -34, -33, -24, -17, -11, -7, -4}), frozenset({3, 4, 6, 9, 10, 15, 17, 18, 20, 24, 26, 28, 29, 30, 33, 34, 36, 39, 40, 42, 43, 44, 46, 48, -52, -50, -47, -45, -41, -37, -32, -31, -25, -19, -12, -11, -7, -2}), frozenset({3, 4, 7, 9, 10, 12, 17, 18, 19, 24, 26, 28, 29, 30, 32, 34, 37, 39, 41, 43, 44, 45, 47, 48, -52, -50, -46, -42, -40, -36, -33, -31, -25, -20, -15, -11, -6, -2}), frozenset({2, 3, 6, 9, 10, 15, 18, 19, 20, 24, 25, 28, 30, 31, 32, 36, 37, 39, 40, 42, 44, 45, 47, 48, -52, -50, -46, -43, -41, -34, -33, -29, -26, -17, -12, -11, -7, -4}), frozenset({2, 3, 4, 6, 8, 9, 10, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 27, 28, 29, 30, 32, 35, 36, 38, 40, 42, 43, 44, 47, 48, -52, -51, -46, -45, -39, -33, -31, -26, -19, -12, -11, -7, -5}), frozenset({2, 3, 5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 25, 26, 28, 29, 30, 31, 33, 35, 36, 38, 39, 43, 44, 45, 47, 48, -52, -51, -46, -42, -40, -32, -27, -24, -17, -12, -11, -7, -4}), frozenset({2, 4, 5, 6, 9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 24, 25, 27, 28, 29, 30, 33, 35, 36, 38, 39, 43, 44, 45, 46, 47, -52, -51, -48, -42, -40, -32, -31, -26, -18, -14, -8, -7, -3}), frozenset({3, 4, 6, 9, 10, 11, -52, -51, -49, -48, 18, 19, 21, -42, -40, 26, -32, 33, 38, 39, -24, 43, 44, 45, 46, 47, -17, -8, -7, -2}), frozenset({2, 4, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, 21, -43, -39, 26, -33, 32, 38, 40, -24, 42, 44, 45, 46, 47, -17, -11, -7, -3}), frozenset({2, 3, 6, 8, 9, 11, -52, -51, -49, -48, 18, 19, 21, -43, -40, 26, -33, 32, 38, 39, -24, 42, 44, 45, 46, 47, -17, -10, -7, -4}), frozenset({2, 3, 6, 8, 9, 10, -52, -51, -49, 18, 19, -46, 21, -43, 24, -39, -33, 32, 38, -26, 40, 42, 44, 45, 47, 48, -17, -11, -7, -4}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, -44, 21, 24, -40, -33, 32, 38, 39, -26, 42, 43, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, 18, 19, -46, 21, -43, 24, -40, -33, 32, 38, 39, -26, 42, 44, 45, 47, 48, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, 18, 19, -46, 21, -43, 24, -39, -32, 33, 38, -26, 40, 42, 44, 45, 47, 48, -17, -11, -7, -2}), frozenset({3, 4, 7, 8, 9, 10, -52, -51, -49, -48, 17, 18, 21, -42, -40, 26, -33, 32, 38, 39, -24, 43, 44, 45, 46, 47, -19, -11, -6, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, 21, -43, -40, 26, -32, 33, 38, 39, -24, 42, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, 21, -43, -39, 26, -33, 32, 38, 40, -24, 42, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 7, 8, 10, 11, -52, -51, -49, 18, 19, -46, 21, -43, 24, -40, -32, 33, 38, 39, -26, 42, 44, 45, 47, 48, -17, -9, -6, -2}), frozenset({2, 4, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, -44, 21, 24, -40, -33, 32, 38, 39, -26, 42, 43, 45, 46, 47, -17, -11, -7, -3}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, 21, -42, -40, 26, -33, 32, 38, 39, -24, 43, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, 21, -42, -39, 26, -32, 33, 38, 40, -24, 43, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, 17, 18, -47, 21, -42, -40, 26, -33, 32, 38, 39, -24, 43, 44, 45, 46, -19, 48, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 17, 18, -45, 21, 24, -40, -33, 32, 38, 39, -26, 42, 43, 44, -19, 46, 47, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 11, -52, -51, -49, -48, 18, 19, 21, -43, -40, 26, -32, 33, 38, 39, -24, 42, 44, 45, 46, 47, -17, -10, -7, -2}), frozenset({2, 3, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, -44, 21, 24, -40, -33, 32, 38, 39, -26, 42, 43, 45, 46, 47, -17, -11, -7, -4}), frozenset({3, 4, 7, 8, 9, 10, -52, -51, -49, -48, 17, 18, 19, -44, 24, -40, -33, 32, 38, 39, -26, 42, 43, -21, 45, 46, 47, -11, -6, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, 18, 19, -46, 21, -43, -39, 26, -32, 33, 38, 40, -24, 42, 44, 45, 47, 48, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, 11, -52, -51, -49, 17, -46, 19, 21, -42, 24, -40, -32, 33, 38, 39, -26, 43, 44, 45, -18, 47, 48, -9, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, -45, 21, 24, -40, -33, 32, 38, 39, -26, 42, 43, 44, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, 17, -46, 19, -44, 21, 24, -40, -33, 32, 38, 39, -26, 42, 43, 45, -18, 47, 48, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, 21, -42, 24, -39, -32, 33, 38, -26, 40, 43, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, 21, -42, 24, -40, -33, 32, 38, 39, -26, 43, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({2, 4, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, 21, -43, 24, -40, -33, 32, 38, 39, -26, 42, 44, 45, 46, 47, -17, -11, -7, -3}), frozenset({2, 3, 6, 8, 9, 11, -52, -51, -49, -48, 18, 19, -45, 21, 24, -40, -32, 33, 38, 39, -26, 42, 43, 44, 46, 47, -17, -10, -7, -4}), frozenset({2, 4, 6, 9, 10, 11, -52, -51, -49, 18, 19, -46, 21, -42, 24, -39, -32, 33, 38, -26, 40, 43, 44, 45, 47, 48, -17, -8, -7, -3}), frozenset({2, 4, 7, 8, 9, 10, -52, -51, -49, -48, 18, 19, -44, 21, 24, -40, -32, 33, 38, 39, -26, 42, 43, 45, 46, 47, -17, -11, -6, -3}), frozenset({2, 4, 6, 8, 9, 10, -52, -51, -49, -48, 17, 19, -44, 21, 24, -40, -33, 32, 38, 39, -26, 42, 43, 45, 46, 47, -18, -11, -7, -3}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, 21, -43, -40, 26, -33, 32, 38, 39, -24, 42, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, 21, -43, -39, 26, -32, 33, 38, 40, -24, 42, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 17, 18, -44, 21, -40, 26, -33, 32, 38, 39, -24, 42, 43, 45, 46, 47, -19, -11, -7, -2}), frozenset({2, 3, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, 21, -43, -39, 26, -32, 33, 38, 40, -24, 42, 44, 45, 46, 47, -17, -11, -7, -4}), frozenset({2, 4, 6, 8, 9, 10, -52, -51, -49, -48, 17, 18, -44, 21, 24, -40, -32, 33, 38, 39, -26, 42, 43, 45, 46, 47, -19, -11, -7, -3}), frozenset({2, 3, 7, 8, 9, 10, -52, -51, -49, 17, 18, 19, -46, -42, 24, -39, -32, 33, 38, -26, 40, 43, 44, 45, -21, 47, 48, -11, -6, -4}), frozenset({2, 3, 7, 8, 9, 10, -52, -51, -49, 18, 19, -46, 21, -44, -40, 26, -33, 32, 38, 39, -24, 42, 43, 45, 47, 48, -17, -11, -6, -4}), frozenset({3, 4, 6, 8, 9, 11, -52, -51, -49, 18, 19, -46, 21, -45, 24, -39, -32, 33, 38, -26, 40, 42, 43, 44, 47, 48, -17, -10, -7, -2}), frozenset({2, 3, 6, 8, 9, 11, -52, -51, -49, -48, 17, 18, 21, -42, -40, 26, -33, 32, 38, 39, -24, 43, 44, 45, 46, 47, -19, -10, -7, -4}), frozenset({2, 3, 6, 8, 10, 11, -52, -51, -49, -47, 18, 19, -45, 21, -40, 26, -33, 32, 38, 39, -24, 42, 43, 44, 46, -17, 48, -9, -7, -4}), frozenset({2, 3, 7, 8, 9, 10, -52, -51, -49, -48, 17, 18, 21, -42, 24, -40, -33, 32, 38, 39, -26, 43, 44, 45, 46, 47, -19, -11, -6, -4}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, 21, -43, 24, -40, -33, 32, 38, 39, -26, 42, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, 17, 18, -46, 21, -43, 24, -39, -32, 33, 38, -26, 40, 42, 44, 45, -19, 47, 48, -11, -7, -2}), frozenset({2, 3, 7, 8, 9, 10, -52, -51, -49, 18, 19, -46, 21, -42, -40, 26, -33, 32, 38, 39, -24, 43, 44, 45, 47, 48, -17, -11, -6, -4}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 17, 18, -44, 21, 24, -39, -32, 33, 38, -26, 40, 42, 43, 45, 46, 47, -19, -11, -7, -2}), frozenset({3, 4, 7, 8, 9, 10, -52, -51, -49, -48, 18, 19, 21, -42, -40, 26, -33, 32, 38, 39, -24, 43, 44, 45, 46, 47, -17, -11, -6, -2}), frozenset({3, 4, 6, 8, 9, 11, -52, -51, -49, -48, 18, 19, 21, -43, 24, -40, -32, 33, 38, 39, -26, 42, 44, 45, 46, 47, -17, -10, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, -44, 21, -39, 26, -32, 33, 38, 40, -24, 42, 43, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 17, 18, 21, -42, -39, 26, -33, 32, 38, 40, -24, 43, 44, 45, 46, 47, -19, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, 21, -42, 24, -40, -32, 33, 38, 39, -26, 43, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, 21, -42, 24, -39, -33, 32, 38, -26, 40, 43, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 17, 18, 19, -43, -40, 26, -33, 32, 38, 39, -24, 42, -21, 44, 45, 46, 47, -11, -7, -2}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, 21, -42, -40, 26, -32, 33, 38, 39, -24, 43, 44, 45, 46, 47, -17, -11, -7, -2}), frozenset({2, 3, 6, 9, 10, 11, -52, -51, -49, 18, 19, -46, 21, -44, -40, 26, -32, 33, 38, 39, -24, 42, 43, 45, 47, 48, -17, -8, -7, -4}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -47, 18, 19, 21, -43, 24, -40, -33, 32, 38, 39, -26, 42, 44, 45, 46, -17, 48, -11, -7, -2}), frozenset({2, 3, 6, 8, 9, 10, -52, -51, -49, 17, -46, 19, -45, 21, 24, -40, -33, 32, 38, 39, -26, 42, 43, 44, -18, 47, 48, -11, -7, -4}), frozenset({3, 4, 6, 8, 9, 10, -52, -51, -49, -48, 17, 19, 21, -42, 24, -39, -33, 32, 38, -26, 40, 43, 44, 45, 46, 47, -18, -11, -7, -2}), frozenset({2, 3, 6, 8, 9, 10, -52, -51, -49, -47, 18, 19, -44, 21, 24, -40, -32, 33, 38, 39, -26, 42, 43, 45, 46, -17, 48, -11, -7, -4}), frozenset({2, 3, 7, 8, 9, 10, -52, -51, -49, -48, 18, 19, -45, 21, 24, -40, -32, 33, 38, 39, -26, 42, 43, 44, 46, 47, -17, -11, -6, -4}), frozenset({2, 3, 6, 8, 9, 10, -52, -51, -49, 17, 18, -46, -44, 21, 24, -40, -33, 32, 38, 39, -26, 42, 43, 45, -19, 47, 48, -11, -7, -4}), frozenset({3, 4, 6, 8, 10, 11, -52, -51, -49, -48, 18, 19, 21, -42, -39, 26, -32, 33, 38, 40, -24, 43, 44, 45, 46, 47, -17, -9, -7, -2}), frozenset({2, 3, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, 21, -43, 24, -40, -32, 33, 38, 39, -26, 42, 44, 45, 46, 47, -17, -11, -7, -4}), frozenset({2, 3, 6, 8, 9, 11, -52, -51, -49, 17, 18, 19, -46, -42, -39, 26, -32, 33, 38, 40, -24, 43, 44, 45, -21, 47, 48, -10, -7, -4}), frozenset({2, 3, 6, 8, 9, 10, -52, -51, -49, -48, 18, 19, 21, -43, 24, -39, -33, 32, 38, -26, 40, 42, 44, 45, 46, 47, -17, -11, -7, -4}), frozenset({2, 4, 6, 9, 10, 11, -52, -51, -49, 18, 19, -46, 21, -44, -39, 26, -32, 33, 38, 40, -24, 42, 43, 45, 47, 48, -17, -8, -7, -3}), frozenset({2, 3, 6, 10, 11, 15, 17, 19, 20, 24, 25, 28, 29, 31, 33, 36, 39, 42, 44, 45, 46, 47, -52, -51, -50, -48, -43, -40, -32, -30, -26, -18, -12, -9, -7, -4}), frozenset({2, 3, 6, 9, 10, 15, 17, 18, 19, 24, 25, 28, 29, 30, 33, 36, 39, 42, 43, 44, 47, 48, -52, -51, -50, -46, -45, -40, -32, -31, -26, -20, -12, -11, -7, -4}), frozenset({3, 4, 7, 9, 10, 15, 18, 19, 20, 24, 26, 28, 29, 30, 32, 36, 39, 42, 44, 45, 46, 47, -52, -51, -50, -48, -43, -40, -33, -31, -25, -17, -12, -11, -6, -2}), frozenset({2, 3, 7, 9, 11, 15, 18, 19, 20, 25, 26, 28, 29, 31, 33, 36, 39, 42, 44, 45, 46, 47, -52, -51, -50, -48, -43, -40, -32, -30, -24, -17, -12, -10, -6, -4}), frozenset({3, 4, 6, 9, 10, 15, 18, 19, 20, 25, 26, 29, 30, 31, 32, 36, 39, 42, 44, 45, 46, 47, -52, -51, -50, -48, -43, -40, -33, -28, -24, -17, -12, -11, -7, -2}), frozenset({3, 4, 6, 10, 11, 12, 17, 19, 20, 24, 25, 28, 29, 30, 33, 36, 40, 42, 44, 45, 46, 47, -52, -51, -50, -48, -43, -39, -32, -31, -26, -18, -15, -9, -7, -2}), frozenset({2, 3, 6, 9, 10, 15, 18, 19, 20, 25, 26, 28, 29, 31, 32, 36, 39, 42, 43, 45, 46, 47, -52, -51, -50, -48, -44, -40, -33, -30, -24, -17, -12, -11, -7, -4}), frozenset({3, 4, 6, 9, 10, 15, 17, 19, 20, 25, 26, 28, 30, 31, 32, 36, 39, 42, 43, 45, 46, 47, -52, -51, -50, -48, -44, -40, -33, -29, -24, -18, -12, -11, -7, -2}), frozenset({2, 4, 7, 9, 10, 12, 18, 19, 20, 25, 26, 28, 29, 30, 32, 36, 39, 43, 44, 45, 47, 48, -52, -51, -50, -46, -42, -40, -33, -31, -24, -17, -15, -11, -6, -3})]
21	itemsets left after W operation 	: [frozenset({9, 53, 47}), frozenset({3, 4, 5, 7, 8, 10, 12, 13, 14, 15, 17, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 32, 34, 35, 36, 38, 39, 40, 42, 43, 45, 46, -53, -48, -44, -41, -37, -33, -31, -26, -23, -18, -16, -11, -6, -2}), frozenset({2, 3, 6, 10, 15, 18, 19, 20, 22, 25, 26, 28, 29, 30, 33, 34, 37, 39, 41, 42, 43, 45, 46, -53, -50, -48, -44, -40, -36, -32, -31, -24, -23, -17, -12, -11, -7, -4}), frozenset({3, 4, 7, 8, 10, -53, -51, -49, -48, 17, 18, 19, 22, -42, 24, -40, -33, 32, 38, 39, -26, -23, 43, 44, 45, 46, -21, -11, -6, -2}), frozenset({2, 4, 6, 8, 10, -53, -51, -49, -48, 18, 19, -44, 21, 22, -39, 26, -33, 32, 38, 40, -24, 42, 43, -23, 45, 46, -17, -11, -7, -3}), frozenset({3, 4, 6, 8, 10, -53, -51, -49, -48, 17, 19, -45, 21, 22, 24, -40, -32, 33, 38, 39, -26, -23, 42, 43, 44, 46, -18, -11, -7, -2}), frozenset({2, 3, 6, 10, 11, -53, -51, -49, 17, -46, 19, 21, 22, -43, 24, -40, -32, 33, 38, 39, -26, -23, 42, 44, 45, -18, 48, -8, -7, -4}), frozenset({3, 4, 6, 8, 10, -53, -51, -49, 18, 19, -46, 21, 22, -43, 24, -40, -33, 32, 38, 39, -26, -23, 42, 44, 45, -17, 48, -11, -7, -2}), frozenset({2, 3, 6, 8, 10, -53, -51, -49, -48, 18, 19, -44, 21, 22, -40, 26, -32, 33, 38, 39, -24, -23, 42, 43, 45, 46, -17, -11, -7, -4}), frozenset({3, 4, 6, 8, 10, -53, -51, -49, -48, 18, 19, -44, 21, 22, 24, -39, -33, 32, 38, -26, 40, -23, 42, 43, 45, 46, -17, -11, -7, -2}), frozenset({2, 3, 7, 8, 10, -53, -51, -49, 17, 18, -46, -45, 21, 22, -40, 26, -32, 33, 38, 39, -24, -23, 42, 43, 44, -19, 48, -11, -6, -4}), frozenset({2, 3, 6, 11, 12, 18, 19, 20, 22, 24, 25, 28, 29, 30, 32, 36, 39, 43, 44, 45, 46, -53, -51, -50, -48, -42, -40, -33, -31, -26, -23, -17, -15, -10, -7, -4}), frozenset({2, 4, 5, 6, 8, 10, 12, 13, 15, 16, 17, 18, 19, 21, 24, 25, 27, 28, 29, 30, 32, 34, 35, 37, 38, 39, 40, 43, 44, 45, 46, -53, -52, -48, -42, -41, -36, -33, -31, -26, -20, -14, -11, -7, -3}), frozenset({2, 3, 6, 8, 10, -53, -52, -49, -48, 18, 19, -44, 21, 24, -39, -37, -33, 32, 34, 38, -26, 40, 41, 42, 43, 45, 46, -17, -11, -7, -4}), frozenset({2, 3, 7, 8, 10, -53, -52, -49, -48, 18, 19, -45, 21, -41, 24, -38, -32, 33, 34, 37, -26, 39, 40, 42, 43, 44, 46, -17, -11, -6, -4}), frozenset({2, 3, 7, 8, 10, -53, -52, -49, 18, 19, -46, 21, -44, -41, 24, -37, -32, 33, 34, 38, 39, 40, -26, 42, 43, 45, -17, 48, -11, -6, -4}), frozenset({3, 4, 6, 8, 10, -53, -52, -49, -48, 18, 19, 21, -42, -41, 26, -38, -33, 32, 34, 37, 39, 40, -24, 43, 44, 45, 46, -17, -11, -7, -2}), frozenset({3, 4, 6, 10, 11, -52, -53, -49, -48, 18, 19, 21, -42, -40, 26, -37, -33, 32, 34, 38, 39, -24, 41, 43, 44, 45, 46, -17, -8, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -49, -48, 17, 18, -45, 21, -40, 26, -37, -33, 32, 34, 38, 39, -24, 41, 42, 43, 44, -19, 46, -11, -7, -2}), frozenset({2, 3, 6, 8, 10, -53, -52, -49, -48, 18, 19, 21, -43, -40, 26, -37, -33, 32, 34, 38, 39, -24, 41, 42, 44, 45, 46, -17, -11, -7, -4}), frozenset({2, 3, 6, 8, 10, -53, -52, -49, -48, 18, 19, 21, -42, -41, 26, -34, -33, 32, 37, 38, 39, 40, -24, 43, 44, 45, 46, -17, -11, -7, -4}), frozenset({3, 4, 7, 10, 12, 17, 18, 19, 24, 26, 28, 29, 30, 32, 34, 37, 39, 41, 43, 44, 45, 48, -53, -52, -50, -46, -42, -40, -36, -33, -31, -25, -20, -15, -11, -6, -2}), frozenset({2, 3, 6, 10, 15, 18, 19, 20, 24, 25, 28, 30, 31, 32, 36, 37, 39, 40, 42, 44, 45, 48, -53, -52, -50, -46, -43, -41, -34, -33, -29, -26, -17, -12, -11, -7, -4}), frozenset({2, 3, 4, 6, 8, 10, 13, 14, 15, 16, 17, 18, 20, 21, 24, 25, 27, 28, 29, 30, 32, 35, 36, 38, 40, 42, 43, 44, 48, -53, -52, -51, -46, -45, -39, -33, -31, -26, -19, -12, -11, -7, -5}), frozenset({2, 3, 5, 6, 8, 10, 13, 14, 15, 16, 18, 19, 20, 21, 25, 26, 28, 29, 30, 31, 33, 35, 36, 38, 39, 43, 44, 45, 48, -53, -52, -51, -46, -42, -40, -32, -27, -24, -17, -12, -11, -7, -4}), frozenset({2, 4, 5, 6, 10, 11, 12, 13, 15, 16, 17, 19, 20, 21, 24, 25, 27, 28, 29, 30, 33, 35, 36, 38, 39, 43, 44, 45, 46, -53, -52, -51, -48, -42, -40, -32, -31, -26, -18, -14, -8, -7, -3}), frozenset({3, 4, 6, 10, 11, -52, -51, -53, -49, -48, 18, 19, 21, -42, -40, 26, -32, 33, 38, 39, -24, 43, 44, 45, 46, -17, -8, -7, -2}), frozenset({2, 4, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, 21, -43, -39, 26, -33, 32, 38, 40, -24, 42, 44, 45, 46, -17, -11, -7, -3}), frozenset({2, 3, 6, 8, 11, -52, -51, -53, -49, -48, 18, 19, 21, -43, -40, 26, -33, 32, 38, 39, -24, 42, 44, 45, 46, -17, -10, -7, -4}), frozenset({2, 3, 6, 8, 10, -53, -52, -51, -49, 18, 19, -46, 21, -43, 24, -39, -33, 32, 38, -26, 40, 42, 44, 45, -17, 48, -11, -7, -4}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, -44, 21, 24, -40, -33, 32, 38, 39, -26, 42, 43, 45, 46, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, 18, 19, -46, 21, -43, 24, -40, -33, 32, 38, 39, -26, 42, 44, 45, -17, 48, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, 18, 19, -46, 21, -43, 24, -39, -32, 33, 38, -26, 40, 42, 44, 45, -17, 48, -11, -7, -2}), frozenset({3, 4, 7, 8, 10, -53, -52, -51, -49, -48, 17, 18, 21, -42, -40, 26, -33, 32, 38, 39, -24, 43, 44, 45, 46, -19, -11, -6, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, 21, -43, -40, 26, -32, 33, 38, 39, -24, 42, 44, 45, 46, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, 21, -43, -39, 26, -33, 32, 38, 40, -24, 42, 44, 45, 46, -17, -11, -7, -2}), frozenset({2, 4, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, -44, 21, 24, -40, -33, 32, 38, 39, -26, 42, 43, 45, 46, -17, -11, -7, -3}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, 21, -42, -40, 26, -33, 32, 38, 39, -24, 43, 44, 45, 46, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, 21, -42, -39, 26, -32, 33, 38, 40, -24, 43, 44, 45, 46, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 17, 18, -45, 21, 24, -40, -33, 32, 38, 39, -26, 42, 43, 44, -19, 46, -11, -7, -2}), frozenset({3, 4, 6, 8, 11, -52, -51, -53, -49, -48, 18, 19, 21, -43, -40, 26, -32, 33, 38, 39, -24, 42, 44, 45, 46, -17, -10, -7, -2}), frozenset({2, 3, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, -44, 21, 24, -40, -33, 32, 38, 39, -26, 42, 43, 45, 46, -17, -11, -7, -4}), frozenset({3, 4, 7, 8, 10, -53, -52, -51, -49, -48, 17, 18, 19, -44, 24, -40, -33, 32, 38, 39, -26, 42, 43, -21, 45, 46, -11, -6, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, 18, 19, -46, 21, -43, -39, 26, -32, 33, 38, 40, -24, 42, 44, 45, -17, 48, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, -45, 21, 24, -40, -33, 32, 38, 39, -26, 42, 43, 44, 46, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, 17, -46, 19, -44, 21, 24, -40, -33, 32, 38, 39, -26, 42, 43, 45, -18, 48, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, 21, -42, 24, -39, -32, 33, 38, -26, 40, 43, 44, 45, 46, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, 21, -42, 24, -40, -33, 32, 38, 39, -26, 43, 44, 45, 46, -17, -11, -7, -2}), frozenset({2, 4, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, 21, -43, 24, -40, -33, 32, 38, 39, -26, 42, 44, 45, 46, -17, -11, -7, -3}), frozenset({2, 3, 6, 8, 11, -52, -51, -53, -49, -48, 18, 19, -45, 21, 24, -40, -32, 33, 38, 39, -26, 42, 43, 44, 46, -17, -10, -7, -4}), frozenset({2, 4, 6, 10, 11, -52, -51, -53, -49, 18, 19, -46, 21, -42, 24, -39, -32, 33, 38, -26, 40, 43, 44, 45, -17, 48, -8, -7, -3}), frozenset({2, 4, 7, 8, 10, -53, -52, -51, -49, -48, 18, 19, -44, 21, 24, -40, -32, 33, 38, 39, -26, 42, 43, 45, 46, -17, -11, -6, -3}), frozenset({2, 4, 6, 8, 10, -53, -52, -51, -49, -48, 17, 19, -44, 21, 24, -40, -33, 32, 38, 39, -26, 42, 43, 45, 46, -18, -11, -7, -3}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, 21, -43, -40, 26, -33, 32, 38, 39, -24, 42, 44, 45, 46, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, 21, -43, -39, 26, -32, 33, 38, 40, -24, 42, 44, 45, 46, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 17, 18, -44, 21, -40, 26, -33, 32, 38, 39, -24, 42, 43, 45, 46, -19, -11, -7, -2}), frozenset({2, 3, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, 21, -43, -39, 26, -32, 33, 38, 40, -24, 42, 44, 45, 46, -17, -11, -7, -4}), frozenset({2, 4, 6, 8, 10, -53, -52, -51, -49, -48, 17, 18, -44, 21, 24, -40, -32, 33, 38, 39, -26, 42, 43, 45, 46, -19, -11, -7, -3}), frozenset({2, 3, 7, 8, 10, -53, -52, -51, -49, 17, 18, 19, -46, -42, 24, -39, -32, 33, 38, -26, 40, 43, 44, 45, -21, 48, -11, -6, -4}), frozenset({2, 3, 7, 8, 10, -53, -52, -51, -49, 18, 19, -46, 21, -44, -40, 26, -33, 32, 38, 39, -24, 42, 43, 45, -17, 48, -11, -6, -4}), frozenset({3, 4, 6, 8, 11, -52, -51, -53, -49, 18, 19, -46, 21, -45, 24, -39, -32, 33, 38, -26, 40, 42, 43, 44, -17, 48, -10, -7, -2}), frozenset({2, 3, 6, 8, 11, -52, -51, -53, -49, -48, 17, 18, 21, -42, -40, 26, -33, 32, 38, 39, -24, 43, 44, 45, 46, -19, -10, -7, -4}), frozenset({2, 3, 7, 8, 10, -53, -52, -51, -49, -48, 17, 18, 21, -42, 24, -40, -33, 32, 38, 39, -26, 43, 44, 45, 46, -19, -11, -6, -4}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, 21, -43, 24, -40, -33, 32, 38, 39, -26, 42, 44, 45, 46, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, 17, 18, -46, 21, -43, 24, -39, -32, 33, 38, -26, 40, 42, 44, 45, -19, 48, -11, -7, -2}), frozenset({2, 3, 7, 8, 10, -53, -52, -51, -49, 18, 19, -46, 21, -42, -40, 26, -33, 32, 38, 39, -24, 43, 44, 45, -17, 48, -11, -6, -4}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 17, 18, -44, 21, 24, -39, -32, 33, 38, -26, 40, 42, 43, 45, 46, -19, -11, -7, -2}), frozenset({3, 4, 7, 8, 10, -53, -52, -51, -49, -48, 18, 19, 21, -42, -40, 26, -33, 32, 38, 39, -24, 43, 44, 45, 46, -17, -11, -6, -2}), frozenset({3, 4, 6, 8, 11, -52, -51, -53, -49, -48, 18, 19, 21, -43, 24, -40, -32, 33, 38, 39, -26, 42, 44, 45, 46, -17, -10, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, -44, 21, -39, 26, -32, 33, 38, 40, -24, 42, 43, 45, 46, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 17, 18, 21, -42, -39, 26, -33, 32, 38, 40, -24, 43, 44, 45, 46, -19, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, 21, -42, 24, -40, -32, 33, 38, 39, -26, 43, 44, 45, 46, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, 21, -42, 24, -39, -33, 32, 38, -26, 40, 43, 44, 45, 46, -17, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 17, 18, 19, -43, -40, 26, -33, 32, 38, 39, -24, 42, -21, 44, 45, 46, -11, -7, -2}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, 21, -42, -40, 26, -32, 33, 38, 39, -24, 43, 44, 45, 46, -17, -11, -7, -2}), frozenset({2, 3, 6, 10, 11, -52, -51, -53, -49, 18, 19, -46, 21, -44, -40, 26, -32, 33, 38, 39, -24, 42, 43, 45, -17, 48, -8, -7, -4}), frozenset({2, 3, 6, 8, 10, -53, -52, -51, -49, 17, -46, 19, -45, 21, 24, -40, -33, 32, 38, 39, -26, 42, 43, 44, -18, 48, -11, -7, -4}), frozenset({3, 4, 6, 8, 10, -53, -52, -51, -49, -48, 17, 19, 21, -42, 24, -39, -33, 32, 38, -26, 40, 43, 44, 45, 46, -18, -11, -7, -2}), frozenset({2, 3, 7, 8, 10, -53, -52, -51, -49, -48, 18, 19, -45, 21, 24, -40, -32, 33, 38, 39, -26, 42, 43, 44, 46, -17, -11, -6, -4}), frozenset({2, 3, 6, 8, 10, -53, -52, -51, -49, 17, 18, -46, -44, 21, 24, -40, -33, 32, 38, 39, -26, 42, 43, 45, -19, 48, -11, -7, -4}), frozenset({2, 3, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, 21, -43, 24, -40, -32, 33, 38, 39, -26, 42, 44, 45, 46, -17, -11, -7, -4}), frozenset({2, 3, 6, 8, 11, -52, -51, -53, -49, 17, 18, 19, -46, -42, -39, 26, -32, 33, 38, 40, -24, 43, 44, 45, -21, 48, -10, -7, -4}), frozenset({2, 3, 6, 8, 10, -53, -52, -51, -49, -48, 18, 19, 21, -43, 24, -39, -33, 32, 38, -26, 40, 42, 44, 45, 46, -17, -11, -7, -4}), frozenset({2, 4, 6, 10, 11, -52, -51, -53, -49, 18, 19, -46, 21, -44, -39, 26, -32, 33, 38, 40, -24, 42, 43, 45, -17, 48, -8, -7, -3}), frozenset({2, 3, 6, 10, 15, 17, 18, 19, 24, 25, 28, 29, 30, 33, 36, 39, 42, 43, 44, 48, -53, -52, -51, -50, -46, -45, -40, -32, -31, -26, -20, -12, -11, -7, -4}), frozenset({3, 4, 7, 10, 15, 18, 19, 20, 24, 26, 28, 29, 30, 32, 36, 39, 42, 44, 45, 46, -53, -52, -51, -50, -48, -43, -40, -33, -31, -25, -17, -12, -11, -6, -2}), frozenset({2, 3, 7, 11, 15, 18, 19, 20, 25, 26, 28, 29, 31, 33, 36, 39, 42, 44, 45, 46, -53, -52, -51, -50, -48, -43, -40, -32, -30, -24, -17, -12, -10, -6, -4}), frozenset({3, 4, 6, 10, 15, 18, 19, 20, 25, 26, 29, 30, 31, 32, 36, 39, 42, 44, 45, 46, -53, -52, -51, -50, -48, -43, -40, -33, -28, -24, -17, -12, -11, -7, -2}), frozenset({2, 3, 6, 10, 15, 18, 19, 20, 25, 26, 28, 29, 31, 32, 36, 39, 42, 43, 45, 46, -53, -52, -51, -50, -48, -44, -40, -33, -30, -24, -17, -12, -11, -7, -4}), frozenset({3, 4, 6, 10, 15, 17, 19, 20, 25, 26, 28, 30, 31, 32, 36, 39, 42, 43, 45, 46, -53, -52, -51, -50, -48, -44, -40, -33, -29, -24, -18, -12, -11, -7, -2}), frozenset({2, 4, 7, 10, 12, 18, 19, 20, 25, 26, 28, 29, 30, 32, 36, 39, 43, 44, 45, 48, -53, -52, -51, -50, -46, -42, -40, -33, -31, -24, -17, -15, -11, -6, -3})]
15	itemsets left after T operation 	: [frozenset({-7, 6})]
Initial DL				: 60506.34396353172
Final DL				: 21139.842401340997
Compression (wrt me)	: 0.6506177531717605
Operator Counters		: {'D': 0, 'W': 5, 'V': 0, 'S': 0, 'R': 0, 'T': 1}
Misle Learning Runtime	: 229.48377203941345


[0, 1, 2, 3, 4, 5, 6, 7]
[0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234]
Min Score = 0.9232450758367234 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625]
Max Score = 0.0625 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 48, 34])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {9: False, 48: False, 34: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234]
Min Score = 0.9232450758367234 tied among 8/8 candidates.
[7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0625]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 1.4232450758367234 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625]
Max Score = 0.0625 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([33, 48, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {33: False, 48: False, 7: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 1.4232450758367234 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625]
Max Score = 0.0625 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([43, 19, 10])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {43: False, 19: False, 10: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234]
Min Score = 0.9232450758367234 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0625, 0.0625]
Max Score = 0.0625 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([40])
Tie Breaking Levels	: [3]; Predicted Values	: {38: False, 28: False, 40: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 1.4232450758367234 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.0625, 0.0, 0.0625, 0.0, 0.0625, 0.0, 0.0625]
Max Score = 0.0625 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 34])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {16: False, 7: True, 34: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 1.4232450758367234 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625]
Max Score = 0.0625 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 22, 44])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {19: False, 22: True, 44: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 1.4232450758367234 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0625, 0.0625, 0.0625, 0.0625]
Max Score = 0.0625 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([43, 29])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {30: False, 43: False, 29: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234]
Min Score = 0.9232450758367234 tied among 8/8 candidates.
[5, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0625, 0.0, 0.0625]
Max Score = 0.0625 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([43])
Tie Breaking Levels	: [3]; Predicted Values	: {20: False, 16: False, 43: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 1.4232450758367234 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.0625, 0.0625, 0.0, 0.0, 0.0625, 0.0625]
Max Score = 0.0625 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 33])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {5: False, 31: True, 33: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 1.4232450758367234 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([48, 43, 40])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {48: False, 43: False, 40: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234]
Min Score = 0.9232450758367234 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0625, 0.0625]
Max Score = 0.0625 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([4])
Tie Breaking Levels	: [3]; Predicted Values	: {30: False, 15: False, 4: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 1.4232450758367234 tied among 8/8 candidates.
[1, 3]
[0.0, 0.0625, 0.0, 0.0625, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0625 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([36])
Tie Breaking Levels	: [3]; Predicted Values	: {12: True, 27: False, 36: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 1.4232450758367234 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625]
Max Score = 0.0625 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 39, 47])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {23: False, 39: True, 47: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 1.4232450758367234 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625]
Max Score = 0.0625 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([39, 32, 2])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {39: True, 32: True, 2: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234]
Min Score = 0.9232450758367234 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0625, 0.0625]
Max Score = 0.0625 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking Levels	: [3]; Predicted Values	: {30: False, 25: False, 17: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 1.4232450758367234 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.0625, 0.0625, 0.0, 0.0, 0.0625, 0.0625]
Max Score = 0.0625 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 40])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {28: False, 7: True, 40: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 1.4232450758367234 tied among 8/8 candidates.
[5, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0625, 0.0, 0.0625]
Max Score = 0.0625 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([42])
Tie Breaking Levels	: [3]; Predicted Values	: {30: False, 25: False, 42: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234]
Min Score = 0.9232450758367234 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.0625, 0.0, 0.0625, 0.0, 0.0625, 0.0, 0.0625]
Max Score = 0.0625 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([39, 10])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {25: False, 39: True, 10: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234]
Min Score = 0.9232450758367234 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0625, 0.0625]
Max Score = 0.0625 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([41])
Tie Breaking Levels	: [3]; Predicted Values	: {35: False, 15: False, 41: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 1.4232450758367234 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0625, 0.0625, 0.0625, 0.0625]
Max Score = 0.0625 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([36, 9])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {14: False, 36: False, 9: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 1.4232450758367234 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.0625, 0.0625, 0.0, 0.0, 0.0625, 0.0625]
Max Score = 0.0625 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([48, 39])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {20: False, 48: False, 39: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234]
Min Score = 0.9232450758367234 tied among 8/8 candidates.
[5, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0625, 0.0, 0.0625]
Max Score = 0.0625 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([8])
Tie Breaking Levels	: [3]; Predicted Values	: {25: False, 16: False, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 1.4232450758367234 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.0625, 0.0625, 0.0, 0.0, 0.0625, 0.0625]
Max Score = 0.0625 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 8])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {25: False, 6: False, 8: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 1.4232450758367234 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625]
Max Score = 0.0625 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 26, 9])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {2: True, 26: False, 9: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3]
[0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 0.9232450758367234 tied among 4/8 candidates.
[2, 3]
[0.0, 0.0, 0.0625, 0.0625]
Max Score = 0.0625 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking Levels	: [3]; Predicted Values	: {7: True, 35: False, 24: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234]
Min Score = 0.9232450758367234 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625]
Max Score = 0.0625 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 32, 24])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {17: True, 32: True, 24: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234]
Min Score = 0.9232450758367234 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0625, 0.0625]
Max Score = 0.0625 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([36])
Tie Breaking Levels	: [3]; Predicted Values	: {37: False, 15: False, 36: False}

[4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234]
Min Score = 0.9232450758367234 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.0625, 0.0625, 0.0625, 0.0625]
Max Score = 0.0625 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([41, 40])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {6: False, 41: False, 40: False}

[2, 3, 6, 7]
[1.4232450758367234, 1.4232450758367234, 0.9232450758367234, 0.9232450758367234, 1.4232450758367234, 1.4232450758367234, 0.9232450758367234, 0.9232450758367234]
Min Score = 0.9232450758367234 tied among 4/8 candidates.
[7]
[0.0, 0.0, 0.0, 0.0625]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234]
Min Score = 0.9232450758367234 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.0625, 0.0, 0.0625, 0.0, 0.0625, 0.0, 0.0625]
Max Score = 0.0625 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([41, 46])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {16: False, 41: False, 46: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234, 0.9232450758367234]
Min Score = 0.9232450758367234 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625]
Max Score = 0.0625 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 43, 21])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {17: True, 43: False, 21: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 1.4232450758367234 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0625, 0.0625]
Max Score = 0.0625 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking Levels	: [3]; Predicted Values	: {14: False, 5: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234, 1.4232450758367234]
Min Score = 1.4232450758367234 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0625, 0.0625, 0.0625, 0.0625]
Max Score = 0.0625 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([48, 21])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {37: False, 48: False, 21: False}

[7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1072415080253826]

[2, 3, 6, 7]
[0.1697415080253826, 0.1697415080253826, 0.1072415080253826, 0.1072415080253826, 0.1697415080253826, 0.1697415080253826, 0.1072415080253826, 0.1072415080253826]
Min Score = 0.1072415080253826 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.5, 0.5, 0.5, 0.5]
Max Score = 0.5 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([42, 22])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {20: False, 42: False, 22: True}

[5, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1072415080253826, 0.1697415080253826, 0.1072415080253826]
Min Score = 0.1072415080253826 tied among 2/8 candidates.
[5, 7]
[0.5, 0.5]
Max Score = 0.5 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking Levels	: [3]; Predicted Values	: {18: False, 15: False, 31: True}

[5, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1072415080253826, 0.1697415080253826, 0.1072415080253826]
Min Score = 0.1072415080253826 tied among 2/8 candidates.
[5, 7]
[0.5, 0.5]
Max Score = 0.5 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([44])
Tie Breaking Levels	: [3]; Predicted Values	: {45: False, 35: False, 44: False}

[2, 3, 6, 7]
[0.1697415080253826, 0.1697415080253826, 0.1072415080253826, 0.1072415080253826, 0.1697415080253826, 0.1697415080253826, 0.1072415080253826, 0.1072415080253826]
Min Score = 0.1072415080253826 tied among 4/8 candidates.
[2, 3]
[0.5, 0.5, 0.0, 0.0]
Max Score = 0.5 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([33])
Tie Breaking Levels	: [3]; Predicted Values	: {7: True, 30: False, 33: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826]
Min Score = 0.1072415080253826 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
Max Score = 0.5 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([11, 47, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {11: True, 47: False, 8: False}

[6, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1072415080253826, 0.1072415080253826]
Min Score = 0.1072415080253826 tied among 2/8 candidates.
[6, 7]
[0.5, 0.5]
Max Score = 0.5 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([8])
Tie Breaking Levels	: [3]; Predicted Values	: {38: False, 37: False, 8: False}
INCORRECT Prediction at tie levels: [3]

[5, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1072415080253826, 0.1697415080253826, 0.1072415080253826]
Min Score = 0.1072415080253826 tied among 2/8 candidates.
[5, 7]
[0.5, 0.5]
Max Score = 0.5 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([36])
Tie Breaking Levels	: [3]; Predicted Values	: {28: False, 20: False, 36: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826]
Min Score = 0.1072415080253826 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
Max Score = 0.5 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 21, 39])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {17: True, 21: False, 39: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826]
Min Score = 0.1697415080253826 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 23, 43])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {5: False, 23: False, 43: False}

[4, 5, 6, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826]
Min Score = 0.1072415080253826 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.5, 0.5, 0.5, 0.5]
Max Score = 0.5 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([36, 47])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {15: False, 36: False, 47: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826]
Min Score = 0.1072415080253826 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
Max Score = 0.5 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 22, 9])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {21: False, 22: True, 9: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826]
Min Score = 0.1697415080253826 tied among 8/8 candidates.
[2, 6]
[0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0]
Max Score = 0.5 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([15])
Tie Breaking Levels	: [3]; Predicted Values	: {7: True, 6: False, 15: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826]
Min Score = 0.1697415080253826 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
Max Score = 0.5 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([47, 36, 16])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {47: False, 36: False, 16: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826]
Min Score = 0.1072415080253826 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
Max Score = 0.5 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 40, 23])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {24: False, 40: True, 23: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826]
Min Score = 0.1697415080253826 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 33, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {19: False, 33: True, 7: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[4, 5, 6, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826]
Min Score = 0.1072415080253826 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.5, 0.5, 0.5, 0.5]
Max Score = 0.5 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 34])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {13: False, 17: True, 34: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826]
Min Score = 0.1697415080253826 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
Max Score = 0.5 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([44, 19, 5])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {44: False, 19: False, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826]
Min Score = 0.1697415080253826 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 21, 40])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {5: False, 21: False, 40: True}

[6, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1072415080253826, 0.1072415080253826]
Min Score = 0.1072415080253826 tied among 2/8 candidates.
[6, 7]
[0.5, 0.5]
Max Score = 0.5 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([33])
Tie Breaking Levels	: [3]; Predicted Values	: {38: False, 30: False, 33: True}

[3, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1072415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1072415080253826]
Min Score = 0.1072415080253826 tied among 2/8 candidates.
[3, 7]
[0.5, 0.5]
Max Score = 0.5 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([3])
Tie Breaking Levels	: [3]; Predicted Values	: {18: False, 16: False, 3: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826]
Min Score = 0.1697415080253826 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
Max Score = 0.5 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([18, 14, 13])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {18: False, 14: False, 13: False}

[6, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1072415080253826, 0.1072415080253826]
Min Score = 0.1072415080253826 tied among 2/8 candidates.
[6, 7]
[0.5, 0.5]
Max Score = 0.5 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([11])
Tie Breaking Levels	: [3]; Predicted Values	: {35: False, 27: False, 11: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826]
Min Score = 0.1697415080253826 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 0.5]
Max Score = 0.5 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([35, 18])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {6: False, 35: False, 18: False}
INCORRECT Prediction at tie levels: [3, 3]

[4, 5, 6, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826, 0.1072415080253826]
Min Score = 0.1072415080253826 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([29, 11])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {14: False, 29: False, 11: True}

[6, 7]
[0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1697415080253826, 0.1072415080253826, 0.1072415080253826]
Min Score = 0.1072415080253826 tied among 2/8 candidates.
[6, 7]
[0.5, 0.5]
Max Score = 0.5 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([17])
Tie Breaking Levels	: [3]; Predicted Values	: {38: False, 13: False, 17: True}

[2, 3, 6, 7]
[0.1697415080253826, 0.1697415080253826, 0.1072415080253826, 0.1072415080253826, 0.1697415080253826, 0.1697415080253826, 0.1072415080253826, 0.1072415080253826]
Min Score = 0.1072415080253826 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.5, 0.5, 0.5, 0.5]
Max Score = 0.5 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([46, 48])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {13: False, 46: False, 48: True}

Dataset				: heart.dat
Metric				: length
Minsups				: [3]
MF Accuracy			: [(0.819672131147541, 0.4098360655737705, 61, 61)]
Mistle Accuracy		: [0.819672131147541]
CNFAlgo Accuracy	: []
Randomized Accuracy	: [0.125]

# Test Examples		: 61
Mistle # Ties		: [(0, 0)]
CNFAlgo # Ties		: []
