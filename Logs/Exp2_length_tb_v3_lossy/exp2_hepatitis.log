>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 28
 Number of frequent closed itemsets: 12067
 Total time ~: 219 ms
Current Minsup[0.5] yields 12067 itemsets.
Top-k minsup for at least 10000 paterns = 0.5 or 14
DL of initial theory	: 35432.10311332919
9825	itemsets left after W operation 	: [frozenset({3, 4, 5, 6, 8, -55, 11, 19, -40, 33, 36, 38, 41, 42, 43, 44, 47, 49, 51, -12, 54, 56, -7, -2}), frozenset({10, 14, 16, 18, 22, 23, 26, 28, 30, 32, 34, 37, 39, 45, 46, 50, 52, 53, -56, -48, -35, -31, -29, -27, -25, -24, -21, -20, -17, -15, -13, -9}), frozenset({9, 14, 15, 17, 22, 24, 26, 27, 30, 31, 32, 37, 39, 45, 46, 50, 52, 53, -56, -48, -35, -34, -29, -28, -25, -23, -21, -20, -18, -16, -13, -10}), frozenset({10, 14, 16, 18, 21, 24, 26, 27, 30, 31, 32, 35, 37, 39, 45, 46, 50, 52, 53, -56, -48, -34, -29, -28, -25, -23, -22, -20, -17, -15, -13, -9}), frozenset({10, 14, 15, 17, 20, 21, 22, 24, 26, 28, 29, 32, 34, 35, 39, 45, 48, 50, 52, 53, -56, -46, -37, -31, -30, -27, -25, -23, -18, -16, -13, -9}), frozenset({10, 14, 16, 17, 21, 23, 25, 28, 29, 32, 34, 37, 39, 45, 46, 52, 53, -56, -50, -48, -35, -31, -30, -27, -26, -24, -22, -20, -18, -15, -13, -9}), frozenset({10, 14, 16, 17, 21, 24, 26, 27, 29, 32, 34, 37, 39, 45, 46, 50, 53, -56, -52, -48, -35, -31, -30, -28, -25, -23, -22, -20, -18, -15, -13, -9}), frozenset({10, 14, 16, 17, 21, 24, 25, 27, 30, 32, 34, 35, 39, 45, 46, 48, 50, 52, -56, -53, -37, -31, -29, -28, -26, -23, -22, -20, -18, -15, -13, -9}), frozenset({9, 14, 16, 17, 22, 23, 25, 28, 30, 32, 34, 37, 39, 46, 48, 50, 52, -56, -53, -45, -35, -31, -29, -27, -26, -24, -21, -20, -18, -15, -13, -10}), frozenset({9, 13, 15, 17, 21, 23, 26, 27, 30, 32, 34, 37, 39, 45, 46, 50, 52, -56, -53, -48, -35, -31, -29, -28, -25, -24, -22, -20, -18, -16, -14, -10}), frozenset({9, 14, 15, 17, 22, 24, 25, 28, 30, 31, 34, 35, 39, 46, 48, 52, 53, -56, -50, -45, -37, -32, -29, -27, -26, -23, -21, -20, -18, -16, -13, -10}), frozenset({9, 14, 16, 17, 22, 23, 26, 28, 30, 32, 34, 35, 37, 45, 48, 52, 53, -56, -50, -46, -39, -31, -29, -27, -25, -24, -21, -20, -18, -15, -13, -10}), frozenset({9, 14, 15, 17, 21, 24, 26, 28, 29, 32, 34, 37, 39, 45, 46, 50, 52, -56, -53, -48, -35, -31, -30, -27, -25, -23, -22, -20, -18, -16, -13, -10}), frozenset({10, 14, 16, 17, 20, 21, 22, 24, 25, 28, 29, 31, 32, 37, 39, 45, 46, 50, 52, -56, -53, -48, -35, -34, -30, -27, -26, -23, -18, -15, -13, -9}), frozenset({9, 14, 16, 18, 21, 23, 26, 28, 29, 32, 34, 35, 37, 39, 46, 48, 50, 52, 53, -56, -45, -31, -30, -27, -25, -24, -22, -20, -17, -15, -13, -10}), frozenset({9, 14, 16, 18, 22, 23, 26, 28, 30, 31, 34, 35, 37, 45, 46, 50, 52, 53, -56, -48, -39, -32, -29, -27, -25, -24, -21, -20, -17, -15, -13, -10}), frozenset({10, 13, 15, 17, 22, 23, 25, 27, 29, 32, 34, 35, 37, 45, 46, 50, 52, -56, -53, -48, -39, -31, -30, -28, -26, -24, -21, -20, -18, -16, -14, -9}), frozenset({10, 14, 16, 18, 21, 24, 25, 27, 29, 31, 32, 35, 37, 39, 46, 48, 50, 52, 53, -56, -45, -34, -30, -28, -26, -23, -22, -20, -17, -15, -13, -9})]
927	itemsets left after W operation 	: [frozenset({5, 6, 8, 14, 17, -7, 32, 33, 37, 38, 41, 43, 45, -18, 47, 49, 51, 52, -13, 57}), frozenset({2, 3, 10, 11, 16, 19, 20, 21, 22, 23, 25, 27, 29, 34, 35, 36, 39, 42, 44, 46, 48, 50, 53, 55, -57, -54, -40, -31, -30, -28, -26, -24, -15, -12, -9, -4}), frozenset({2, 3, 10, 11, 16, 19, 22, 24, 26, 27, 29, 34, 36, 39, 40, 44, 46, 50, 54, -57, -55, -53, -48, -42, -35, -31, -30, -28, -25, -23, -21, -20, -15, -12, -9, -4}), frozenset({2, 4, 10, 11, 16, 19, 21, 23, 26, 28, 29, 31, 36, 39, 42, 44, 46, 53, 54, -57, -55, -50, -48, -40, -35, -34, -30, -27, -25, -24, -22, -20, -15, -12, -9, -3}), frozenset({2, 3, 10, 11, 16, 19, 20, 21, 22, 23, 26, 27, 29, 31, 34, 35, 36, 39, 40, 42, 44, 46, 48, 50, 53, 54, -57, -55, -30, -28, -25, -24, -15, -12, -9, -4}), frozenset({3, 4, 10, 12, 16, 19, 22, 23, 25, 27, 29, 34, 35, 36, 42, 44, 46, 50, 55, -57, -54, -53, -48, -40, -39, -31, -30, -28, -26, -24, -21, -20, -15, -11, -9, -2}), frozenset({3, 4, 10, 11, 16, 19, 22, 23, 26, 28, 30, 31, 35, 39, 40, 44, 48, 53, 54, -57, -55, -50, -46, -42, -36, -34, -29, -27, -25, -24, -21, -20, -15, -12, -9, -2}), frozenset({3, 4, 10, 12, 16, 19, 21, 23, 26, 27, 29, 34, 36, 39, 42, 44, 46, 53, 54, -57, -55, -50, -48, -40, -35, -31, -30, -28, -25, -24, -22, -20, -15, -11, -9, -2}), frozenset({2, 3, 9, 11, 15, 20, 22, 24, 26, 27, 29, 34, 35, 36, 40, 42, 46, 50, 53, 55, -57, -54, -48, -44, -39, -31, -30, -28, -25, -23, -21, -19, -16, -12, -10, -4}), frozenset({3, 4, 9, 11, 15, 19, 21, 23, 26, 27, 29, 34, 36, 39, 42, 44, 46, 50, 53, 55, -57, -54, -48, -40, -35, -31, -30, -28, -25, -24, -22, -20, -16, -12, -10, -2})]
0	itemsets left after W operation 	: [frozenset({4, 5, 8, -55, 11, 36, 38, 42, 43, 47, 49, 51, -12, 54, -7, 58}), frozenset({2, 6, 10, 14, 16, 18, 20, 22, 23, 26, 27, 29, 31, 32, 34, 37, 39, 40, 44, 45, 46, 50, 52, 53, -58, -48, -41, -35, -33, -30, -28, -25, -24, -21, -19, -17, -15, -13, -9, -3}), frozenset({2, 3, 10, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 39, 40, 41, 45, 46, 50, 53, -58, -52, -48, -44, -35, -31, -17, -15, -13, -9, -6}), frozenset({33, 3, 6, -58, 41, 44, 19, -40, 56, -2})]
# of frequent itemsets	: 155
Time of DCI Closed		: 0.3233909606933594
154	itemsets left after W operation 	: [frozenset({16, -15, 39, -9, 10, 59, 46}), frozenset({-59, -56, 14, -48, 18, 22, 23, 26, 28, -35, 30, 32, -31, 34, -29, 37, -27, -25, -24, -21, -20, 45, -17, 50, -13, 52, 53}), frozenset({-59, -56, 14, -48, 18, 21, 24, 26, 27, 30, 31, 32, -34, 35, -29, 37, -28, -25, -23, -22, -20, 45, -17, 50, -13, 52, 53}), frozenset({-59, -56, 14, -50, -48, 17, 21, 23, 25, 28, 29, -35, 32, -31, 34, -30, 37, -27, -26, -24, -22, -20, 45, -18, -13, 52, 53}), frozenset({-59, -56, -52, 14, -48, 17, 21, 24, 26, 27, 29, -35, 32, -31, 34, -30, -28, 37, -25, -23, -22, -20, 45, -18, 50, -13, 53}), frozenset({-59, -56, -53, 14, 17, 21, 24, 25, 27, -37, 30, 32, -31, 34, 35, -29, -28, -26, -23, -22, -20, 45, -18, 48, 50, -13, 52}), frozenset({-59, -56, -53, 14, -48, 17, 20, 21, 22, 24, 25, 28, 29, -35, 31, 32, -34, -30, 37, -27, -26, -23, 45, -18, 50, -13, 52}), frozenset({-59, -56, 14, 18, -45, 21, 24, 25, 27, 29, -34, 31, 32, -30, 35, -28, 37, -26, -23, -22, -20, -17, 48, 50, -13, 52, 53}), frozenset({2, 3, -59, -57, -54, 11, 19, 20, 21, 22, 23, -40, 25, 27, 29, -31, 34, 35, 36, -30, -28, -26, -24, 42, 44, 48, 50, -12, 53, 55, -4}), frozenset({2, 3, -59, -57, -55, 11, -53, -48, 19, 22, -42, 24, 26, 27, 29, -35, -31, 34, -30, 36, -28, -25, 40, -23, -21, 44, -20, 50, -12, 54, -4}), frozenset({2, 4, -59, -57, -55, 11, -50, -48, 19, 21, 23, -40, 26, 28, 29, -35, 31, -34, -30, 36, -27, -25, -24, 42, -22, 44, -20, -12, 53, 54, -3}), frozenset({2, 3, -59, -57, -55, 11, 19, 20, 21, 22, 23, 26, 27, 29, 31, 34, 35, 36, -30, -28, -25, 40, -24, 42, 44, 48, 50, -12, 53, 54, -4}), frozenset({3, 4, -59, -57, -55, 12, -50, -48, 19, 21, 23, -40, 26, 27, 29, -35, -31, 34, -30, 36, -28, -25, -24, 42, -22, 44, -20, 53, 54, -11, -2}), frozenset({2, 6, 14, 18, 20, 22, 23, 26, 27, 29, 31, 32, 34, 37, 40, 44, 45, 50, 52, 53, -59, -58, -48, -41, -35, -33, -30, -28, -25, -24, -21, -19, -17, -13, -3}), frozenset({2, 3, 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 40, 41, 45, 50, 53, -59, -58, -52, -48, -44, -35, -31, -17, -13, -6})]
150	itemsets left after W operation 	: [frozenset({32, -13, 37, 60, 14}), frozenset({-60, -56, 9, 15, -48, 17, 22, 24, 26, 27, -35, 30, 31, -34, -29, -28, 39, -25, -23, -21, -20, 45, 46, -18, -16, 50, 52, 53, -10}), frozenset({-60, -56, 9, -53, 16, 17, -45, 22, 23, 25, 28, -35, 30, -31, 34, -29, -27, -26, 39, -24, -21, -20, 46, -18, 48, -15, 50, 52, -10}), frozenset({-60, -56, 9, -50, 16, 17, -46, 22, 23, -39, 26, 28, 30, -31, 34, 35, -29, -27, -25, -24, -21, -20, 45, -18, 48, -15, 52, 53, -10}), frozenset({-60, -56, 9, -53, 15, -48, 17, 21, 24, 26, 28, 29, -35, -31, 34, -30, -27, 39, -25, -23, -22, -20, 45, 46, -18, -16, 50, 52, -10}), frozenset({-60, -56, 9, 16, 18, -45, 21, 23, 26, 28, 29, -31, 34, 35, -30, -27, 39, -25, -24, -22, -20, 46, -17, 48, -15, 50, 52, 53, -10}), frozenset({-60, 5, 6, 8, 17, -7, 33, 38, 41, 43, 45, -18, 47, 49, 51, 52, 57}), frozenset({-60, -59, -56, -48, 18, 22, 23, 26, 28, -35, 30, -31, 34, -29, -27, -25, -24, -21, -20, 45, -17, 50, 52, 53}), frozenset({-60, -59, -56, -48, 18, 21, 24, 26, 27, 30, 31, -34, 35, -29, -28, -25, -23, -22, -20, 45, -17, 50, 52, 53}), frozenset({-60, -59, -56, -50, -48, 17, 21, 23, 25, 28, 29, -35, -31, 34, -30, -27, -26, -24, -22, -20, 45, -18, 52, 53}), frozenset({-60, -59, -56, -52, -48, 17, 21, 24, 26, 27, 29, -35, -31, 34, -30, -28, -25, -23, -22, -20, 45, -18, 50, 53}), frozenset({-60, -59, -56, -53, -48, 17, 20, 21, 22, 24, 25, 28, 29, -35, 31, -34, -30, -27, -26, -23, 45, -18, 50, 52}), frozenset({-60, -59, -56, 18, -45, 21, 24, 25, 27, 29, -34, 31, -30, 35, -28, -26, -23, -22, -20, -17, 48, 50, 52, 53}), frozenset({2, 6, 18, 20, 22, 23, 26, 27, 29, 31, 34, 40, 44, 45, 50, 52, 53, -60, -59, -58, -48, -41, -35, -33, -30, -28, -25, -24, -21, -19, -17, -3}), frozenset({2, 3, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 40, 41, 45, 50, 53, -60, -59, -58, -52, -48, -44, -35, -31, -17, -6})]
126	itemsets left after W operation 	: [frozenset({-31, 34, 50, 61}), frozenset({-61, -56, 10, 14, 15, 17, -46, 20, 21, 22, 24, 26, -37, 28, 29, 32, -30, 35, -27, 39, -25, -23, 45, -18, 48, -16, -13, 52, 53, -9}), frozenset({-61, -56, 9, -53, 13, 15, -48, 17, 21, 23, 26, 27, -35, 30, 32, -29, -28, 37, 39, -25, -24, -22, -20, 45, 46, -18, -16, -14, 52, -10}), frozenset({2, 3, -60, -59, -58, -61, -52, -48, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, -35, 33, -44, 40, 41, 45, -17, 53, -6}), frozenset({-61, -56, 10, -53, 13, 15, -48, 17, 22, 23, 25, -39, 27, 29, 32, -30, 35, -28, 37, -26, -24, -21, -20, 45, 46, -18, -16, -14, 52, -9}), frozenset({3, 4, 10, 12, 16, 19, 22, 23, 25, 27, 29, 35, 36, 42, 44, 46, 55, -61, -57, -54, -53, -48, -40, -39, -30, -28, -26, -24, -21, -20, -15, -11, -9, -2}), frozenset({2, 3, 9, 11, 15, 20, 22, 24, 26, 27, 29, 35, 36, 40, 42, 46, 53, 55, -61, -57, -54, -48, -44, -39, -30, -28, -25, -23, -21, -19, -16, -12, -10, -4}), frozenset({3, 4, 9, 11, 15, 19, 21, 23, 26, 27, 29, 36, 39, 42, 44, 46, 53, 55, -61, -57, -54, -48, -40, -35, -30, -28, -25, -24, -22, -20, -16, -12, -10, -2}), frozenset({-61, -59, -56, -53, 14, 17, 21, 24, 25, 27, -37, 30, 32, 35, -29, -28, -26, -23, -22, -20, 45, -18, 48, -13, 52}), frozenset({2, 3, -61, -59, -57, -54, 11, 19, 20, 21, 22, 23, -40, 25, 27, 29, -30, 35, 36, -28, -26, -24, 42, 44, 48, -12, 53, 55, -4}), frozenset({2, 3, -61, -59, -57, -55, 11, -53, -48, 19, 22, -42, 24, 26, 27, 29, -35, -30, 36, -28, -25, 40, -23, -21, 44, -20, -12, 54, -4}), frozenset({-61, -60, -56, 9, -53, 16, 17, -45, 22, 23, 25, 28, -35, 30, -29, -27, -26, 39, -24, -21, -20, 46, -18, 48, -15, 52, -10}), frozenset({-61, -60, -56, 9, -53, 15, -48, 17, 21, 24, 26, 28, 29, -35, -30, -27, 39, -25, -23, -22, -20, 45, 46, -18, -16, 52, -10}), frozenset({-61, -60, -56, 9, 16, 18, -45, 21, 23, 26, 28, 29, -30, 35, -27, 39, -25, -24, -22, -20, 46, -17, 48, -15, 52, 53, -10}), frozenset({-61, -60, -59, -56, -48, 18, 22, 23, 26, 28, -35, 30, -29, -27, -25, -24, -21, -20, 45, -17, 52, 53}), frozenset({-61, -60, -59, -56, -52, -48, 17, 21, 24, 26, 27, 29, -35, -30, -28, -25, -23, -22, -20, 45, -18, 53})]
115	itemsets left after W operation 	: [frozenset({26, 53, 62, -25}), frozenset({-62, -61, -60, -59, -56, -48, 18, 22, 23, 28, -35, 30, -29, -27, -24, -21, -20, 45, -17, 52}), frozenset({-62, -56, 9, 14, 16, -48, 18, 22, 23, -39, 28, 30, 31, -32, 34, 35, -29, 37, -27, -24, -21, -20, 45, 46, -17, -15, 50, -13, 52, -10}), frozenset({3, 4, 10, 11, 16, 19, 22, 23, 28, 30, 31, 35, 39, 40, 44, 48, 54, -62, -57, -55, -50, -46, -42, -36, -34, -29, -27, -24, -21, -20, -15, -12, -9, -2}), frozenset({-62, -61, -60, -59, -56, -52, -48, 17, 21, 24, 27, 29, -35, -30, -28, -23, -22, -20, 45, -18}), frozenset({2, -62, 4, -59, -57, -55, 11, -50, -48, 19, 21, 23, -40, 28, 29, -35, 31, -34, -30, 36, -27, -24, 42, -22, 44, -20, -12, 54, -3}), frozenset({2, 3, -62, -59, -57, -55, 11, 19, 20, 21, 22, 23, 27, 29, 31, 34, 35, 36, -30, -28, 40, -24, 42, 44, 48, 50, -12, 54, -4}), frozenset({-62, 3, 4, -59, -57, -55, 12, -50, -48, 19, 21, 23, -40, 27, 29, -35, -31, 34, -30, 36, -28, -24, 42, -22, 44, -20, -11, 54, -2}), frozenset({-62, -60, -56, 9, 15, -48, 17, 22, 24, 27, -35, 30, 31, -34, -29, -28, 39, -23, -21, -20, 45, 46, -18, -16, 50, 52, -10}), frozenset({-62, -60, -56, 9, -50, 16, 17, -46, 22, 23, -39, 28, 30, -31, 34, 35, -29, -27, -24, -21, -20, 45, -18, 48, -15, 52, -10}), frozenset({-62, -60, -59, -56, -48, 18, 21, 24, 27, 30, 31, -34, 35, -29, -28, -23, -22, -20, 45, -17, 50, 52}), frozenset({2, -62, -60, -59, 6, -58, -48, 18, 20, 22, 23, -41, 27, 29, -35, 31, -33, 34, -30, -28, 40, -24, -21, 44, 45, -19, -17, 50, 52, -3}), frozenset({-62, -61, -56, 10, 14, 15, 17, -46, 20, 21, 22, 24, -37, 28, 29, 32, -30, 35, -27, 39, -23, 45, -18, 48, -16, -13, 52, -9}), frozenset({2, 3, 9, 11, 15, 20, 22, 24, 27, 29, 35, 36, 40, 42, 46, 55, -62, -61, -57, -54, -48, -44, -39, -30, -28, -23, -21, -19, -16, -12, -10, -4}), frozenset({3, 4, 9, 11, 15, 19, 21, 23, 27, 29, 36, 39, 42, 44, 46, 55, -62, -61, -57, -54, -48, -40, -35, -30, -28, -24, -22, -20, -16, -12, -10, -2}), frozenset({-62, -61, -60, -56, 9, 16, 18, -45, 21, 23, 28, 29, -30, 35, -27, 39, -24, -22, -20, 46, -17, 48, -15, 52, -10})]
90	itemsets left after W operation 	: [frozenset({-56, -20, 52, 63}), frozenset({-63, 9, 14, 15, -50, 17, -45, 22, 24, 25, -37, 28, 30, 31, -32, 34, 35, -29, -27, -26, 39, -23, -21, 46, -18, 48, -16, -13, 53, -10}), frozenset({-63, -62, -61, -60, 9, 16, 18, -45, 21, 23, 28, 29, -30, 35, -27, 39, -24, -22, 46, -17, 48, -15, -10}), frozenset({-63, -60, -59, -50, -48, 17, 21, 23, 25, 28, 29, -35, -31, 34, -30, -27, -26, -24, -22, 45, -18, 53}), frozenset({-63, -60, -59, 18, -45, 21, 24, 25, 27, 29, -34, 31, -30, 35, -28, -26, -23, -22, -17, 48, 50, 53}), frozenset({-63, -61, 9, -53, 13, 15, -48, 17, 21, 23, 26, 27, -35, 30, 32, -29, -28, 37, 39, -25, -24, -22, 45, 46, -18, -16, -14, -10}), frozenset({-63, -61, 10, -53, 13, 15, -48, 17, 22, 23, 25, -39, 27, 29, 32, -30, 35, -28, 37, -26, -24, -21, 45, 46, -18, -16, -14, -9}), frozenset({-63, -61, -59, -53, 14, 17, 21, 24, 25, 27, -37, 30, 32, 35, -29, -28, -26, -23, -22, 45, -18, 48, -13}), frozenset({-63, -61, -60, 9, -53, 16, 17, -45, 22, 23, 25, 28, -35, 30, -29, -27, -26, 39, -24, -21, 46, -18, 48, -15, -10}), frozenset({-63, -61, -60, 9, -53, 15, -48, 17, 21, 24, 26, 28, 29, -35, -30, -27, 39, -25, -23, -22, 45, 46, -18, -16, -10}), frozenset({-63, -62, -61, -60, -59, -48, 18, 22, 23, 28, -35, 30, -29, -27, -24, -21, 45, -17}), frozenset({-63, -62, 9, 14, 16, -48, 18, 22, 23, -39, 28, 30, 31, -32, 34, 35, -29, 37, -27, -24, -21, 45, 46, -17, -15, 50, -13, -10}), frozenset({-63, -62, -60, 9, 15, -48, 17, 22, 24, 27, -35, 30, 31, -34, -29, -28, 39, -23, -21, 45, 46, -18, -16, 50, -10}), frozenset({-63, -62, -60, 9, -50, 16, 17, -46, 22, 23, -39, 28, 30, -31, 34, 35, -29, -27, -24, -21, 45, -18, 48, -15, -10}), frozenset({-63, -62, -60, -59, -48, 18, 21, 24, 27, 30, 31, -34, 35, -29, -28, -23, -22, 45, -17, 50})]
79	itemsets left after W operation 	: [frozenset({64, -30, 29}), frozenset({-64, -60, -59, -56, -53, -48, 17, 20, 21, 22, 24, 25, 28, -35, -34, 31, -27, -26, -23, 45, -18, 50, 52}), frozenset({3, 4, 10, 12, 16, 19, 22, 23, 25, 27, 35, 36, 42, 44, 46, 55, -64, -61, -57, -54, -53, -48, -40, -39, -28, -26, -24, -21, -20, -15, -11, -9, -2}), frozenset({-64, 2, 3, -61, -59, -57, -54, 11, 19, 20, 21, 22, 23, -40, 25, 27, 35, 36, -28, -26, -24, 42, 44, 48, -12, 53, 55, -4}), frozenset({-64, 2, 3, -61, -59, -57, -55, 11, -53, -48, 19, 22, -42, 24, 26, 27, -35, 36, -28, -25, 40, -23, -21, 44, -20, -12, 54, -4}), frozenset({-64, -62, -61, -60, -59, -56, -52, -48, 17, 21, 24, 27, -35, -28, -23, -22, -20, 45, -18}), frozenset({-64, 2, -62, 4, -59, -57, -55, 11, -50, -48, 19, 21, 23, -40, 28, -35, -34, 31, 36, -27, -24, 42, -22, 44, -20, -12, 54, -3}), frozenset({-64, 2, 3, -62, -59, -57, -55, 11, 19, 20, 21, 22, 23, 27, 31, 34, 35, 36, -28, 40, -24, 42, 44, 48, 50, -12, 54, -4}), frozenset({-64, -62, 3, 4, -59, -57, -55, 12, -50, -48, 19, 21, 23, -40, 27, -35, -31, 34, 36, -28, -24, 42, -22, 44, -20, -11, 54, -2}), frozenset({-64, 2, -62, -60, -59, 6, -58, -48, 18, 20, 22, 23, -41, 27, -35, 31, -33, 34, -28, 40, -24, -21, 44, 45, -19, -17, 50, 52, -3}), frozenset({-64, -62, -61, -56, 10, 14, 15, 17, -46, 20, 21, 22, 24, -37, 28, 32, 35, -27, 39, -23, 45, -18, 48, -16, -13, 52, -9}), frozenset({-64, 2, 3, -62, -61, -57, 9, -54, 11, 15, -48, 20, -44, 22, 24, -39, 27, 35, 36, -28, 40, -23, 42, -21, -19, 46, -16, -12, -10, 55, -4}), frozenset({-64, -62, 3, 4, -61, -57, 9, -54, 11, 15, -48, 19, 21, 23, -40, 27, -35, 36, -28, 39, -24, 42, -22, 44, -20, 46, -16, -12, -10, 55, -2}), frozenset({-64, -63, -62, -61, -60, 9, 16, 18, -45, 21, 23, 28, 35, -27, 39, -24, -22, 46, -17, 48, -15, -10}), frozenset({-64, -63, -60, -59, -50, -48, 17, 21, 23, 25, 28, -35, -31, 34, -27, -26, -24, -22, 45, -18, 53}), frozenset({-64, -63, -60, -59, 18, -45, 21, 24, 25, 27, -34, 31, 35, -28, -26, -23, -22, -17, 48, 50, 53}), frozenset({-64, -63, -61, 10, -53, 13, 15, -48, 17, 22, 23, 25, -39, 27, 32, 35, -28, 37, -26, -24, -21, 45, 46, -18, -16, -14, -9}), frozenset({-64, -63, -61, -60, 9, -53, 15, -48, 17, 21, 24, 26, 28, -35, -27, 39, -25, -23, -22, 45, 46, -18, -16, -10})]>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 89
 Number of frequent closed itemsets: 23556
 Total time ~: 532 ms

73	itemsets left after W operation 	: [frozenset({-24, 65, 23}), frozenset({-64, -63, -62, -61, -60, 9, 16, 18, -45, 21, 28, 35, -27, 39, -22, 46, -17, 48, -15, -10, -65}), frozenset({-64, -63, -60, -59, -50, -48, 17, 21, 25, 28, -35, -31, 34, -27, -26, -22, 45, -18, 53, -65}), frozenset({-64, -63, -61, 10, -53, 13, 15, -48, 17, 22, 25, -39, 27, 32, 35, -28, 37, -26, -21, 45, 46, -18, -16, -14, -9, -65}), frozenset({3, 4, 10, 11, 16, 19, 22, 28, 30, 31, 35, 39, 40, 44, 48, 54, -65, -62, -57, -55, -50, -46, -42, -36, -34, -29, -27, -21, -20, -15, -12, -9, -2}), frozenset({-63, -61, 9, -53, 13, 15, -48, 17, 21, 26, 27, -35, 30, 32, -29, -28, 37, 39, -25, -22, 45, 46, -18, -16, -14, -10, -65}), frozenset({-63, -61, -60, 9, -53, 16, 17, -45, 22, 25, 28, -35, 30, -29, -27, -26, 39, -21, 46, -18, 48, -15, -10, -65}), frozenset({-63, -62, -61, -60, -59, -48, 18, 22, 28, -35, 30, -29, -27, -21, 45, -17, -65}), frozenset({-63, -62, 9, 14, 16, -48, 18, 22, -39, 28, 30, 31, -32, 34, 35, -29, 37, -27, -21, 45, 46, -17, -15, 50, -13, -10, -65}), frozenset({-63, -62, -60, 9, -50, 16, 17, -46, 22, -39, 28, 30, -31, 34, 35, -29, -27, -21, 45, -18, 48, -15, -10, -65}), frozenset({3, 4, 10, 12, 16, 19, 22, 25, 27, 35, 36, 42, 44, 46, 55, -65, -64, -61, -57, -54, -53, -48, -40, -39, -28, -26, -21, -20, -15, -11, -9, -2}), frozenset({-64, 2, 3, -61, -59, -57, -54, 11, 19, 20, 21, 22, -40, 25, 27, 35, 36, -28, -26, 42, 44, 48, -12, 53, 55, -4, -65}), frozenset({-64, 2, -62, 4, -59, -57, -55, 11, -50, -48, 19, 21, -40, 28, -35, -34, 31, 36, -27, 42, -22, 44, -20, -12, 54, -3, -65}), frozenset({-64, 2, 3, -62, -59, -57, -55, 11, 19, 20, 21, 22, 27, 31, 34, 35, 36, -28, 40, 42, 44, 48, 50, -12, 54, -4, -65}), frozenset({-64, -62, 3, 4, -59, -57, -55, 12, -50, -48, 19, 21, -40, 27, -35, -31, 34, 36, -28, 42, -22, 44, -20, -11, 54, -2, -65}), frozenset({-64, 2, -62, -60, -59, 6, -58, -48, 18, 20, 22, -41, 27, -35, 31, -33, 34, -28, 40, -21, 44, 45, -19, -17, 50, 52, -3, -65}), frozenset({-64, -62, 3, 4, -61, -57, 9, -54, 11, 15, -48, 19, 21, -40, 27, -35, 36, -28, 39, 42, -22, 44, -20, 46, -16, -12, -10, 55, -2, -65})]
57	itemsets left after W operation 	: [frozenset({66, 27, -28, 46}), frozenset({-64, -62, 3, 4, -61, -57, 9, -54, 11, 15, -48, 19, 21, -40, -35, 36, 39, 42, -22, 44, -20, -16, -12, -10, 55, -2, -66, -65}), frozenset({-63, -62, -60, 9, 15, -48, 17, 22, 24, -35, 30, 31, -34, -29, 39, -23, -21, 45, -18, -16, 50, -10, -66}), frozenset({-64, 2, 3, -62, -61, -57, 9, -54, 11, 15, -48, 20, -44, 22, 24, -39, 35, 36, 40, -23, 42, -21, -19, -16, -12, -10, 55, -4, -66}), frozenset({-64, -63, -61, 10, -53, 13, 15, -48, 17, 22, 25, -39, 32, 35, 37, -26, -21, 45, -18, -16, -14, -9, -66, -65}), frozenset({-63, -61, 9, -53, 13, 15, -48, 17, 21, 26, -35, 30, 32, -29, 37, 39, -25, -22, 45, -18, -16, -14, -10, -66, -65}), frozenset({-64, 3, 4, -61, -57, 10, -54, 12, -53, 16, -48, 19, 55, 22, -40, 25, -39, 35, 36, -26, 42, -21, 44, -20, -15, -11, -2, -9, -66, -65})]
Initial DL				: 37720.90089000497
Final DL				: 5520.573669264426
Compression (wrt me)	: 0.8536468234053436
Operator Counters		: {'D': 0, 'W': 11, 'V': 0, 'S': 0, 'R': 0, 'T': 0}
Misle Learning Runtime	: 3.0426177978515625

Timeout of 20 seconds reached while mining patterns with minsup = 0.5
Current Minsup[0.75] yields 23556 itemsets.
Top-k minsup for at least 10000 paterns = 0.75 or 67
DL of initial theory	: 35432.10311332919
9999	itemsets left after T operation 	: [frozenset({3, 4, 5, 6, 32, 33, 34, 36, 38, 41, 43, 45, 46, 47, 50, 51, 52, -31, -2})]
7487	itemsets left after T operation 	: [frozenset({32, 34, 36, 5, 38, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 29})]
30	itemsets left after T operation 	: [frozenset({32, 33, 3, 4, 5, 6, 38, 45, 47, 49, 50, 51, 52, 27, -2})]
0	itemsets left after T operation 	: [frozenset({33, 34, 3, 4, 5, 6, 38, 36, 41, 45, 46, 47, 50, 51, 52, -2})]
# of frequent itemsets	: 0
Time of DCI Closed		: 0.3244180679321289
Initial DL				: 37720.90089000497
Final DL				: 4218.054955402549
Compression (wrt me)	: 0.8881772477358774
Operator Counters		: {'D': 0, 'W': 0, 'V': 0, 'S': 0, 'R': 0, 'T': 4}
Misle Learning Runtime	: 24.858179092407227


[7]
[0.12916666666666665, 0.12916666666666665, 0.0625, 0.0625, 0.12916666666666665, 0.09791666666666667, 0.0625, 0.0]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665]
Min Score = 0.12916666666666665 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 24, 38])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {8: False, 24: True, 38: False}

[6, 7]
[0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.09791666666666667, 0.09791666666666667]
Min Score = 0.09791666666666667 tied among 2/8 candidates.
[6, 7]
[0.0, 0.0]
Max Score = 0.0 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([40])
Tie Breaking Levels	: [3]; Predicted Values	: {50: False, 34: False, 40: True}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665]
Min Score = 0.12916666666666665 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([12, 28, 22])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {12: True, 28: True, 22: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.06666666666666667, 0.06666666666666667, 0.0, 0.0, 0.06666666666666667, 0.06666666666666667]
Max Score = 0.06666666666666667 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 23])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {3: False, 26: True, 23: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.09791666666666667, 0.09791666666666667, 0.09791666666666667, 0.09791666666666667, 0.09791666666666667, 0.09791666666666667, 0.09791666666666667, 0.09791666666666667]
Max Score = 0.09791666666666667 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 35, 13])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {15: False, 35: True, 13: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([53, 25, 4])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {53: True, 25: False, 4: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665]
Max Score = 0.12916666666666665 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 19, 12])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {21: False, 19: False, 12: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665]
Max Score = 0.12916666666666665 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 25, 16])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {9: False, 25: False, 16: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.03125, 0.03125, 0.12916666666666665, 0.12916666666666665, 0.03125, 0.03125, 0.12916666666666665, 0.12916666666666665]
Max Score = 0.12916666666666665 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([23, 31])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {6: False, 23: False, 31: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[6, 7]
[0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.09791666666666667, 0.09791666666666667, 0.12916666666666665, 0.12916666666666665]
Max Score = 0.12916666666666665 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([9])
Tie Breaking Levels	: [3]; Predicted Values	: {46: False, 44: False, 9: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.03125, 0.03125, 0.0, 0.0, 0.03125, 0.03125]
Max Score = 0.03125 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 11])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {52: False, 31: True, 11: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.0, 0.0, 0.03125, 0.03125, 0.12916666666666665, 0.12916666666666665]
Max Score = 0.12916666666666665 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([19])
Tie Breaking Levels	: [3]; Predicted Values	: {47: False, 4: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665]
Max Score = 0.12916666666666665 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 35, 55])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {25: False, 35: True, 55: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[5, 7]
[0.0, 0.0, 0.0, 0.0, 0.03125, 0.12916666666666665, 0.03125, 0.12916666666666665]
Max Score = 0.12916666666666665 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([42])
Tie Breaking Levels	: [3]; Predicted Values	: {50: False, 49: False, 42: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.03125, 0.03125, 0.12916666666666665, 0.12916666666666665, 0.03125, 0.03125, 0.12916666666666665, 0.12916666666666665]
Max Score = 0.12916666666666665 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 19])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {33: False, 24: True, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.03125, 0.03125, 0.03125, 0.03125]
Max Score = 0.03125 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 16])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {36: False, 2: True, 16: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665]
Max Score = 0.12916666666666665 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 48, 53])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {9: False, 48: True, 53: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[7]
[0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.0, 0.03125, 0.12916666666666665]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665]
Max Score = 0.12916666666666665 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([53, 37, 19])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {53: True, 37: False, 19: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.03125, 0.03125, 0.03125, 0.03125]
Max Score = 0.03125 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 55])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {47: False, 17: False, 55: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.12916666666666665, 0.0, 0.12916666666666665, 0.0, 0.12916666666666665, 0.0, 0.12916666666666665]
Max Score = 0.12916666666666665 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 31])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {51: False, 15: False, 31: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[7]
[0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.03125, 0.03125, 0.12916666666666665]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 12, 51])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {3: False, 12: True, 51: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665, 0.12916666666666665]
Max Score = 0.12916666666666665 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([40, 42, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {40: True, 42: False, 8: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.12916666666666665, 0.12916666666666665, 0.0, 0.0, 0.12916666666666665, 0.12916666666666665]
Max Score = 0.12916666666666665 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 39])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {47: False, 26: True, 39: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[2, 6]
[0.0, 0.0, 0.12916666666666665, 0.03125, 0.0, 0.0, 0.12916666666666665, 0.03125]
Max Score = 0.12916666666666665 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([13])
Tie Breaking Levels	: [3]; Predicted Values	: {2: True, 52: False, 13: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265, 1.593780004713265]
Min Score = 1.593780004713265 tied among 8/8 candidates.
[3, 7]
[0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.12916666666666665, 0.06666666666666667, 0.06666666666666667, 0.06666666666666667, 0.12916666666666665]
Max Score = 0.12916666666666665 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([54])
Tie Breaking Levels	: [3]; Predicted Values	: {46: False, 41: False, 54: True}
INCORRECT Prediction at tie levels: [3]

Dataset				: hepatitis.dat
Metric				: length
Minsups				: [3]
MF Accuracy			: [(0.5714285714285714, 0.4642857142857143, 28, 28)]
Mistle Accuracy		: [0.5714285714285714]
CNFAlgo Accuracy	: []
Randomized Accuracy	: [0.125]

# Test Examples		: 28
Mistle # Ties		: [(0, 0)]
CNFAlgo # Ties		: []
