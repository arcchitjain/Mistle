>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 66
 Number of frequent closed itemsets: 23102
 Total time ~: 362 ms
>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 86
 Number of frequent closed itemsets: 32682
 Total time ~: 416 ms
Timeout of 20 seconds reached while mining patterns with minsup = 0.5
Current Minsup[0.75] yields 81180 itemsets.
Current Minsup[0.875] yields 1814 itemsets.
Current Minsup[0.7960696870844519] yields 23102 itemsets.
Top-k minsup for at least 10000 paterns = 0.7960696870844519 or 53
26  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, -34, -28, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, -37, -28, -24, -20, -15, -10, -7, -2}), frozenset({3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -11, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -18, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, -37, -28, -24, -20, -15, -10, -6, -2}), frozenset({2, 3, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -4}), frozenset({2, 3, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -9, -4}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -17, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, -33, -31, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -27, -20, -18, -10, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, -33, -29, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 34, 35, 36, 37, -33, -30, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -7, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, -33, -32, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -22, -15, -10, -9, -2}), frozenset({3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -8, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -16, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -19, -10, -6, -2}), frozenset({2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -5}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, -37, -28, -24, -20, -15, -10, -9, -2}), frozenset({2, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -3}), frozenset({2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -9, -3}), frozenset({2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, -34, -28, -24, -20, -15, -10, -6, -5}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, -34, -28, -24, -20, -15, -10, -9, -2})}
DL of initial theory	: 23272.70980539344
9981	itemsets left after T operation 	: [frozenset({35, 36, 8, -20, 14, 21, 22, 23, 29})]
1832	itemsets left after T operation 	: [frozenset({35, 36, 12, 13, 19, 27, 30})]
28	itemsets left after V operation 	: [frozenset({2, 3, 5, 6, 7, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -36, 30, 31, 32, 33, 34, -28, 37, -24, -15, -10, -9, -4}), frozenset({35, 36, 8, -20, 14, 21, 22, 23, 29})]
0	itemsets left after V operation 	: [frozenset({3, 4, 5, 7, 9, 11, 12, 13, 16, 17, 18, 19, 25, 26, 27, -35, 30, 31, 32, 33, 34, -28, 37, -24, -15, -10, -6, -2}), frozenset({35, 36, 8, -20, 14, 21, 22, 23, 29})]
# of frequent itemsets	: 0
Time of DCI Closed		: 0.32937192916870117
Initial DL				: 109019.69407604229
Final DL				: 14259.953280822545
Compression (wrt me)	: 0.8691983737279974
Operator Counters		: {'D': 0, 'W': 0, 'V': 2, 'S': 0, 'R': 0, 'T': 2}
Misle Learning Runtime	: 25.85269784927368

Timeout of 20 seconds reached while mining patterns with minsup = 0.5
Current Minsup[0.75] yields 24719 itemsets.
Top-k minsup for at least 10000 paterns = 0.75 or 64
26  violations of +ve partial assignments found for the learned theory.
Violating Clauses	:{frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, -34, -28, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, -37, -28, -24, -20, -15, -10, -7, -2}), frozenset({3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -11, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -18, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, -37, -28, -24, -20, -15, -10, -6, -2}), frozenset({2, 3, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -4}), frozenset({2, 3, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -9, -4}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -17, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, -33, -31, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 34, 35, 36, 37, -33, -29, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -27, -20, -18, -10, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 34, 35, 36, 37, -33, -30, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -7, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -9, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, -33, -32, -24, -20, -15, -10, -6, -2}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -22, -15, -10, -9, -2}), frozenset({3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -8, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -16, -10, -6, -2}), frozenset({3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -19, -10, -6, -2}), frozenset({2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -5}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, -37, -28, -24, -20, -15, -10, -9, -2}), frozenset({2, 4, 5, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -6, -3}), frozenset({2, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, -33, -28, -24, -20, -15, -10, -9, -3}), frozenset({2, 3, 4, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, -34, -28, -24, -20, -15, -10, -6, -5}), frozenset({3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, -34, -28, -24, -20, -15, -10, -9, -2})}
DL of initial theory	: 23272.70980539344
9999	itemsets left after T operation 	: [frozenset({36, 11, 12, 13, 14, 17, 21, -10, 22, 25, 29})]
4936	itemsets left after T operation 	: [frozenset({35, -20, 14, 16, 21, 22, 23, 25, 29, 30})]
13	itemsets left after T operation 	: [frozenset({36, 11, 12, 13, 14, 17, -10, 25})]
0	itemsets left after V operation 	: [frozenset({2, 4, 5, 6, 7, 8, 10, 11, 12, 17, 18, 19, 24, 26, 27, -36, 31, 32, 33, 34, -28, 37, -25, -15, -13, -9, -3}), frozenset({35, -20, 14, 16, 21, 22, 23, 25, 29, 30})]
# of frequent itemsets	: 0
Time of DCI Closed		: 0.296489953994751
Initial DL				: 109019.69407604229
Final DL				: 11241.947078094383
Compression (wrt me)	: 0.8968815022517581
Operator Counters		: {'D': 0, 'W': 0, 'V': 1, 'S': 0, 'R': 0, 'T': 3}
Misle Learning Runtime	: 24.19223403930664


[4, 5, 6, 7]
[0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[6, 7]
[0.1111111111111111, 0.1111111111111111, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([32])
Tie Breaking Levels	: [3]; Predicted Values	: {30: False, 19: False, 32: False}

[2, 3, 6, 7]
[0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[3, 7]
[0.14285714285714285, 0.25396825396825395, 0.14285714285714285, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([5])
Tie Breaking Levels	: [3]; Predicted Values	: {17: False, 8: False, 5: False}

[1, 3, 5, 7]
[0.16203703703703703, 0.037037037037037035, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 6])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {12: False, 15: True, 6: True}

[6, 7]
[0.26203703703703707, 0.26203703703703707, 0.16203703703703703, 0.16203703703703703, 0.26203703703703707, 0.26203703703703707, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[6, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking Levels	: [3]; Predicted Values	: {25: False, 13: False, 24: True}

[6, 7]
[0.26203703703703707, 0.26203703703703707, 0.13703703703703704, 0.13703703703703704, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[7]
[0.14285714285714285, 0.25396825396825395]
Tie Breaking: Level 1

[2, 3, 6, 7]
[0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.037037037037037035, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[3, 7]
[0.1111111111111111, 0.25396825396825395, 0.1111111111111111, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([6])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 19: False, 6: True}

[4, 5, 6, 7]
[0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([34, 18])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {14: False, 34: False, 18: False}

[0, 2, 4, 6]
[0.037037037037037035, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[0, 2, 4, 6]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 31])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {20: True, 6: True, 31: False}

[4, 5, 6, 7]
[0.16203703703703703, 0.16203703703703703, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 32])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {36: False, 3: False, 32: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111]
Max Score = 0.1111111111111111 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 27, 37])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {6: True, 27: False, 37: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[2, 3, 6, 7]
[0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 18])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {11: False, 15: True, 18: False}

[3, 7]
[0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.16203703703703703, 0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.16203703703703703]
Min Score = 0.16203703703703703 tied among 2/8 candidates.
[3, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([18])
Tie Breaking Levels	: [3]; Predicted Values	: {25: False, 16: False, 18: False}

[6, 7]
[0.26203703703703707, 0.26203703703703707, 0.13703703703703704, 0.13703703703703704, 0.26203703703703707, 0.26203703703703707, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[6, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([18])
Tie Breaking Levels	: [3]; Predicted Values	: {30: False, 14: False, 18: False}

[5, 7]
[0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.037037037037037035, 0.26203703703703707, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[5, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking Levels	: [3]; Predicted Values	: {25: False, 22: False, 2: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 33, 26])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 33: True, 26: False}

[0, 2, 4, 6]
[0.037037037037037035, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[0, 2, 4, 6]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 31])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {10: True, 4: False, 31: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 18, 34])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 18: False, 34: False}

[1, 3, 5, 7]
[0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.13703703703703704]
Min Score = 0.13703703703703704 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 18])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {25: False, 21: False, 18: False}

[4, 5, 6, 7]
[0.16203703703703703, 0.16203703703703703, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([34, 26])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {11: False, 34: False, 26: False}

[2, 3, 6, 7]
[0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.037037037037037035, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 2])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {35: False, 4: False, 2: True}

[6, 7]
[0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[6, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([32])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 14: False, 32: False}

[4, 5, 6, 7]
[0.16203703703703703, 0.16203703703703703, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([34, 26])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {12: False, 34: False, 26: False}

[4, 5, 6, 7]
[0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[5, 7]
[0.1111111111111111, 0.25396825396825395, 0.1111111111111111, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([5])
Tie Breaking Levels	: [3]; Predicted Values	: {19: False, 14: False, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.14285714285714285, 0.25396825396825395, 0.14285714285714285, 0.25396825396825395, 0.14285714285714285, 0.25396825396825395, 0.14285714285714285, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 7])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {8: False, 9: False, 7: False}

[2, 3, 6, 7]
[0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 18])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {12: False, 28: True, 18: False}

[1, 3, 5, 7]
[0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([37, 5])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {16: False, 37: False, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.14285714285714285, 0.25396825396825395, 0.14285714285714285, 0.25396825396825395, 0.14285714285714285, 0.25396825396825395, 0.14285714285714285, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 28])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {8: False, 9: False, 28: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111]
Max Score = 0.1111111111111111 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 31, 3])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 31: False, 3: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[1, 3, 5, 7]
[0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[3, 7]
[0.1111111111111111, 0.25396825396825395, 0.1111111111111111, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([37])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 27: False, 37: False}

[5]
[0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.13703703703703704]

[1, 3, 5, 7]
[0.26203703703703707, 0.16203703703703703, 0.26203703703703707, 0.16203703703703703, 0.26203703703703707, 0.16203703703703703, 0.26203703703703707, 0.16203703703703703]
Min Score = 0.16203703703703703 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 5])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {25: False, 19: False, 5: False}

[1, 3, 5, 7]
[0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 32])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {16: False, 3: False, 32: False}

[4, 5, 6, 7]
[0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.16203703703703703, 0.16203703703703703, 0.16203703703703703, 0.16203703703703703]
Min Score = 0.16203703703703703 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([10, 9])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {22: False, 10: True, 9: False}
INCORRECT Prediction at tie levels: [3, 3]

[2, 3, 6, 7]
[0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 5])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {12: False, 28: True, 5: False}

[2, 3, 6, 7]
[0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 4])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {11: False, 24: True, 4: False}

[0, 1, 2, 3]
[0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[0, 1, 2, 3]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([34, 32])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {20: True, 34: False, 32: False}

[5, 7]
[0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.13703703703703704, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[5, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([34])
Tie Breaking Levels	: [3]; Predicted Values	: {21: False, 17: False, 34: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.1111111111111111, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([32, 26])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {27: False, 32: False, 26: False}

[3, 7]
[0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[3, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([6])
Tie Breaking Levels	: [3]; Predicted Values	: {35: False, 22: False, 6: True}

[0, 2, 4, 6]
[0.037037037037037035, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[0, 2, 4, 6]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 28])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {10: True, 15: True, 28: True}

[6, 7]
[0.26203703703703707, 0.26203703703703707, 0.13703703703703704, 0.13703703703703704, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[7]
[0.1111111111111111, 0.25396825396825395]
Tie Breaking: Level 1

[7]
[0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.13703703703703704, 0.16203703703703703, 0.037037037037037035]

[7]
[0.26203703703703707, 0.26203703703703707, 0.13703703703703704, 0.13703703703703704, 0.26203703703703707, 0.16203703703703703, 0.13703703703703704, 0.037037037037037035]

[5, 7]
[0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.037037037037037035, 0.26203703703703707, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[5, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking Levels	: [3]; Predicted Values	: {25: False, 22: False, 2: True}

[6, 7]
[0.26203703703703707, 0.26203703703703707, 0.13703703703703704, 0.13703703703703704, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[6, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([32])
Tie Breaking Levels	: [3]; Predicted Values	: {36: False, 29: False, 32: False}

[3, 7]
[0.26203703703703707, 0.26203703703703707, 0.16203703703703703, 0.037037037037037035, 0.26203703703703707, 0.26203703703703707, 0.16203703703703703, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[3, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([7])
Tie Breaking Levels	: [3]; Predicted Values	: {14: False, 12: False, 7: False}

[4, 5, 6, 7]
[0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.16203703703703703, 0.16203703703703703, 0.16203703703703703, 0.16203703703703703]
Min Score = 0.16203703703703703 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 5])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {21: False, 26: False, 5: False}

[5, 7]
[0.26203703703703707, 0.16203703703703703, 0.26203703703703707, 0.16203703703703703, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[7]
[0.1111111111111111, 0.25396825396825395]
Tie Breaking: Level 1

[0, 1, 2, 3, 4, 5, 6, 7]
[0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704]
Min Score = 0.13703703703703704 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 22, 8])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {28: True, 22: False, 8: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[5, 7]
[0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.037037037037037035, 0.26203703703703707, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[5, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([34])
Tie Breaking Levels	: [3]; Predicted Values	: {25: False, 14: False, 34: False}

[6]
[0.13703703703703704, 0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.037037037037037035, 0.16203703703703703]

[4, 5, 6, 7]
[0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[5, 7]
[0.1111111111111111, 0.25396825396825395, 0.1111111111111111, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([4])
Tie Breaking Levels	: [3]; Predicted Values	: {30: False, 19: False, 4: False}

[3, 7]
[0.16203703703703703, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[3, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([6])
Tie Breaking Levels	: [3]; Predicted Values	: {13: False, 12: False, 6: True}

[1, 3]
[0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[1, 3]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([3])
Tie Breaking Levels	: [3]; Predicted Values	: {20: True, 16: False, 3: False}

[5]
[0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.13703703703703704, 0.16203703703703703, 0.037037037037037035, 0.26203703703703707, 0.13703703703703704]

[6, 7]
[0.26203703703703707, 0.26203703703703707, 0.13703703703703704, 0.13703703703703704, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[7]
[0.14285714285714285, 0.25396825396825395]
Tie Breaking: Level 1

[6, 7]
[0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[6, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([7])
Tie Breaking Levels	: [3]; Predicted Values	: {23: False, 22: False, 7: False}

[2, 6]
[0.16203703703703703, 0.26203703703703707, 0.037037037037037035, 0.13703703703703704, 0.16203703703703703, 0.26203703703703707, 0.037037037037037035, 0.13703703703703704]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[2, 6]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([5])
Tie Breaking Levels	: [3]; Predicted Values	: {20: True, 12: False, 5: False}

[4, 5, 6, 7]
[0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 7])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {23: False, 6: True, 7: False}

[5, 7]
[0.16203703703703703, 0.16203703703703703, 0.16203703703703703, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[5, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([34])
Tie Breaking Levels	: [3]; Predicted Values	: {36: False, 17: False, 34: False}

[4, 5, 6, 7]
[0.16203703703703703, 0.16203703703703703, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 34])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {13: False, 5: False, 34: False}

[4, 5, 6, 7]
[0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 37])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {23: False, 28: True, 37: False}

[4, 5, 6, 7]
[0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[5, 7]
[0.14285714285714285, 0.25396825396825395, 0.14285714285714285, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([4])
Tie Breaking Levels	: [3]; Predicted Values	: {21: False, 8: False, 4: False}

[2, 3, 6, 7]
[0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([37, 26])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {13: False, 37: False, 26: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704]
Min Score = 0.13703703703703704 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 21, 9])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {26: False, 21: False, 9: False}

[3]
[0.26203703703703707, 0.16203703703703703, 0.13703703703703704, 0.037037037037037035, 0.26203703703703707, 0.26203703703703707, 0.13703703703703704, 0.13703703703703704]

[7]
[0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.13703703703703704, 0.16203703703703703, 0.037037037037037035]

[2, 3, 6, 7]
[0.26203703703703707, 0.26203703703703707, 0.13703703703703704, 0.13703703703703704, 0.26203703703703707, 0.26203703703703707, 0.13703703703703704, 0.13703703703703704]
Min Score = 0.13703703703703704 tied among 4/8 candidates.
[2, 3]
[0.1111111111111111, 0.1111111111111111, 0.0, 0.0]
Max Score = 0.1111111111111111 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([26])
Tie Breaking Levels	: [3]; Predicted Values	: {20: True, 36: False, 26: False}

[4, 5, 6, 7]
[0.16203703703703703, 0.16203703703703703, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 26])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {36: False, 3: False, 26: False}

[1, 3, 5, 7]
[0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 32])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {16: False, 31: False, 32: False}

[2, 3, 6, 7]
[0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 3])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {36: False, 5: False, 3: False}

[3, 7]
[0.26203703703703707, 0.26203703703703707, 0.13703703703703704, 0.037037037037037035, 0.26203703703703707, 0.26203703703703707, 0.13703703703703704, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[3, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking Levels	: [3]; Predicted Values	: {21: False, 14: False, 31: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.1111111111111111, 0.1111111111111111, 0.25396825396825395, 0.25396825396825395, 0.1111111111111111, 0.1111111111111111, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 5])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {19: False, 2: True, 5: False}

[4, 5, 6, 7]
[0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 32])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {30: False, 3: False, 32: False}

[2, 3, 6, 7]
[0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 18])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {12: False, 6: True, 18: False}

[6, 7]
[0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[6, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 14: False, 2: True}

[6, 7]
[0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[7]
[0.14285714285714285, 0.25396825396825395]
Tie Breaking: Level 1

[5, 7]
[0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[5, 7]
[0.14285714285714285, 0.14285714285714285]
Max Score = 0.14285714285714285 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([5])
Tie Breaking Levels	: [3]; Predicted Values	: {29: False, 21: False, 5: False}

[4, 5, 6, 7]
[0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[5, 7]
[0.14285714285714285, 0.25396825396825395, 0.14285714285714285, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([9])
Tie Breaking Levels	: [3]; Predicted Values	: {23: False, 8: False, 9: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704]
Min Score = 0.13703703703703704 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 33, 24])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {9: False, 33: True, 24: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[7]
[0.26203703703703707, 0.26203703703703707, 0.13703703703703704, 0.13703703703703704, 0.26203703703703707, 0.16203703703703703, 0.13703703703703704, 0.037037037037037035]

[2, 6]
[0.26203703703703707, 0.26203703703703707, 0.037037037037037035, 0.16203703703703703, 0.26203703703703707, 0.26203703703703707, 0.037037037037037035, 0.16203703703703703]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[2, 6]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([31])
Tie Breaking Levels	: [3]; Predicted Values	: {10: True, 14: False, 31: False}

[5, 7]
[0.26203703703703707, 0.16203703703703703, 0.26203703703703707, 0.16203703703703703, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[5, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([33])
Tie Breaking Levels	: [3]; Predicted Values	: {16: False, 13: False, 33: True}

[4, 5]
[0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.037037037037037035, 0.037037037037037035, 0.13703703703703704, 0.13703703703703704]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[4, 5]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([34])
Tie Breaking Levels	: [3]; Predicted Values	: {20: True, 14: False, 34: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.26203703703703707]
Min Score = 0.26203703703703707 tied among 8/8 candidates.
[6, 7]
[0.0, 0.0, 0.1111111111111111, 0.1111111111111111, 0.0, 0.0, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([18])
Tie Breaking Levels	: [3]; Predicted Values	: {35: False, 30: False, 18: False}

[1, 5]
[0.16203703703703703, 0.037037037037037035, 0.26203703703703707, 0.13703703703703704, 0.16203703703703703, 0.037037037037037035, 0.26203703703703707, 0.13703703703703704]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[1, 5]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([7])
Tie Breaking Levels	: [3]; Predicted Values	: {20: True, 17: False, 7: False}

[0, 2, 4, 6]
[0.037037037037037035, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[0, 2, 4, 6]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([37, 26])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {10: True, 37: False, 26: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.1111111111111111, 0.25396825396825395, 0.1111111111111111, 0.25396825396825395, 0.1111111111111111, 0.25396825396825395, 0.1111111111111111, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 7])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {19: False, 6: True, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 26, 15])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {7: False, 26: False, 15: True}

[0, 2, 4, 6]
[0.037037037037037035, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[0, 2, 4, 6]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 5])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {10: True, 6: True, 5: False}

[2, 3, 6, 7]
[0.26203703703703707, 0.26203703703703707, 0.037037037037037035, 0.037037037037037035, 0.26203703703703707, 0.26203703703703707, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([6, 9])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {14: False, 6: True, 9: False}

[5, 7]
[0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.037037037037037035, 0.26203703703703707, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[5, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([34])
Tie Breaking Levels	: [3]; Predicted Values	: {30: False, 25: False, 34: False}

[2, 3, 6, 7]
[0.26203703703703707, 0.26203703703703707, 0.037037037037037035, 0.037037037037037035, 0.26203703703703707, 0.26203703703703707, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[3, 7]
[0.14285714285714285, 0.25396825396825395, 0.14285714285714285, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([15])
Tie Breaking Levels	: [3]; Predicted Values	: {25: False, 8: False, 15: True}

[7]
[0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.13703703703703704, 0.16203703703703703, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035]

[4, 5, 6, 7]
[0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[5, 7]
[0.1111111111111111, 0.25396825396825395, 0.1111111111111111, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([34])
Tie Breaking Levels	: [3]; Predicted Values	: {35: False, 27: False, 34: False}

[6, 7]
[0.26203703703703707, 0.26203703703703707, 0.13703703703703704, 0.13703703703703704, 0.26203703703703707, 0.26203703703703707, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[6, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([5])
Tie Breaking Levels	: [3]; Predicted Values	: {23: False, 14: False, 5: False}

[5, 7]
[0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.13703703703703704, 0.26203703703703707, 0.037037037037037035, 0.26203703703703707, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[5, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking Levels	: [3]; Predicted Values	: {25: False, 22: False, 2: True}

[0, 2, 4, 6]
[0.037037037037037035, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[0, 2, 4, 6]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 34])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {10: True, 31: False, 34: False}

[4, 5, 6, 7]
[0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[5, 7]
[0.14285714285714285, 0.25396825396825395, 0.14285714285714285, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([6])
Tie Breaking Levels	: [3]; Predicted Values	: {23: False, 8: False, 6: True}

[7]
[0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.16203703703703703, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035]

[2, 3, 6, 7]
[0.26203703703703707, 0.26203703703703707, 0.037037037037037035, 0.037037037037037035, 0.26203703703703707, 0.26203703703703707, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 28])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {25: False, 24: True, 28: True}

[6, 7]
[0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 2/8 candidates.
[6, 7]
[0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([5])
Tie Breaking Levels	: [3]; Predicted Values	: {21: False, 14: False, 5: False}

[6]
[0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.26203703703703707, 0.16203703703703703, 0.16203703703703703, 0.037037037037037035, 0.16203703703703703]

[1, 3, 5, 7]
[0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035, 0.13703703703703704, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 34])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {16: False, 5: False, 34: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([5, 28, 3])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {5: False, 28: True, 3: False}

[4, 5, 6, 7]
[0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.13703703703703704, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035, 0.037037037037037035]
Min Score = 0.037037037037037035 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.25396825396825395, 0.25396825396825395, 0.25396825396825395, 0.25396825396825395]
Max Score = 0.25396825396825395 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 5])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {21: False, 4: False, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.225, 0.225, 0.225, 0.225, 0.225, 0.225, 0.225, 0.225]
Max Score = 0.225 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 32, 5])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {28: True, 32: False, 5: False}

[4, 5, 6, 7]
[0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[5, 7]
[0.125, 0.225, 0.125, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([24])
Tie Breaking Levels	: [3]; Predicted Values	: {22: False, 16: False, 24: True}

[1, 5]
[0.28968253968253965, 0.03571428571428571, 0.28968253968253965, 0.1468253968253968, 0.28968253968253965, 0.03571428571428571, 0.28968253968253965, 0.1468253968253968]
Min Score = 0.03571428571428571 tied among 2/8 candidates.
[1, 5]
[0.225, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([7])
Tie Breaking Levels	: [3]; Predicted Values	: {20: True, 36: False, 7: False}

[7]
[0.28968253968253965, 0.28968253968253965, 0.1468253968253968, 0.1468253968253968, 0.28968253968253965, 0.17857142857142855, 0.1468253968253968, 0.03571428571428571]

[4, 5]
[0.17857142857142855, 0.17857142857142855, 0.28968253968253965, 0.28968253968253965, 0.03571428571428571, 0.03571428571428571, 0.1468253968253968, 0.1468253968253968]
Min Score = 0.03571428571428571 tied among 2/8 candidates.
[4, 5]
[0.225, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking Levels	: [3]; Predicted Values	: {20: True, 12: False, 2: True}

[6, 7]
[0.17857142857142855, 0.17857142857142855, 0.17857142857142855, 0.17857142857142855, 0.17857142857142855, 0.17857142857142855, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 2/8 candidates.
[6]
[0.225, 0.1]
Tie Breaking: Level 1

[4, 5, 6, 7]
[0.17857142857142855, 0.17857142857142855, 0.17857142857142855, 0.17857142857142855, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.225, 0.225, 0.225, 0.225]
Max Score = 0.225 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([3, 32])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {12: False, 3: False, 32: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 8/8 candidates.
[0, 2, 4, 6]
[0.225, 0.1, 0.225, 0.1, 0.225, 0.1, 0.225, 0.1]
Max Score = 0.225 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 34])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {10: True, 26: False, 34: False}

[2, 3, 6, 7]
[0.1468253968253968, 0.1468253968253968, 0.03571428571428571, 0.03571428571428571, 0.1468253968253968, 0.1468253968253968, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[3, 7]
[0.125, 0.225, 0.125, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([7])
Tie Breaking Levels	: [3]; Predicted Values	: {23: False, 16: False, 7: False}

[4, 5, 6, 7]
[0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[4, 6]
[0.225, 0.1, 0.225, 0.1]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([4])
Tie Breaking Levels	: [3]; Predicted Values	: {10: True, 21: False, 4: False}

[2, 3, 6, 7]
[0.1468253968253968, 0.1468253968253968, 0.03571428571428571, 0.03571428571428571, 0.1468253968253968, 0.1468253968253968, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.225, 0.225, 0.225, 0.225]
Max Score = 0.225 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([31, 24])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {21: False, 31: False, 24: True}

[1, 3, 5, 7]
[0.1468253968253968, 0.03571428571428571, 0.1468253968253968, 0.03571428571428571, 0.1468253968253968, 0.03571428571428571, 0.1468253968253968, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.225, 0.225, 0.225, 0.225]
Max Score = 0.225 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 5])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {29: False, 28: True, 5: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968]
Min Score = 0.1468253968253968 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125]
Max Score = 0.125 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([22, 23, 9])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {22: False, 23: False, 9: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[4, 5, 6, 7]
[0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.225, 0.225, 0.225, 0.225]
Max Score = 0.225 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 24])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {23: False, 9: False, 24: True}
INCORRECT Prediction at tie levels: [3, 3]

[6, 7]
[0.17857142857142855, 0.17857142857142855, 0.17857142857142855, 0.17857142857142855, 0.17857142857142855, 0.17857142857142855, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 2/8 candidates.
[6, 7]
[0.225, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([3])
Tie Breaking Levels	: [3]; Predicted Values	: {19: False, 13: False, 3: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 8/8 candidates.
[3, 7]
[0.0, 0.1, 0.125, 0.225, 0.0, 0.1, 0.125, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([6])
Tie Breaking Levels	: [3]; Predicted Values	: {16: False, 11: False, 6: True}

[2, 3, 6, 7]
[0.17857142857142855, 0.17857142857142855, 0.03571428571428571, 0.03571428571428571, 0.17857142857142855, 0.17857142857142855, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.225, 0.225, 0.225, 0.225]
Max Score = 0.225 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 31])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {19: False, 24: True, 31: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.28968253968253965]
Min Score = 0.28968253968253965 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.125, 0.0, 0.125, 0.0, 0.125, 0.0, 0.125]
Max Score = 0.125 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([21, 19])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {17: False, 21: False, 19: False}

[1, 3, 5, 7]
[0.17857142857142855, 0.03571428571428571, 0.17857142857142855, 0.03571428571428571, 0.17857142857142855, 0.03571428571428571, 0.17857142857142855, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.225, 0.225, 0.225, 0.225]
Max Score = 0.225 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 28])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {19: False, 7: False, 28: True}
INCORRECT Prediction at tie levels: [3, 3]

[3, 7]
[0.17857142857142855, 0.17857142857142855, 0.17857142857142855, 0.03571428571428571, 0.17857142857142855, 0.17857142857142855, 0.17857142857142855, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 2/8 candidates.
[3, 7]
[0.225, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([37])
Tie Breaking Levels	: [3]; Predicted Values	: {19: False, 12: False, 37: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.225, 0.225, 0.225, 0.225, 0.225, 0.225, 0.225, 0.225]
Max Score = 0.225 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([15, 37, 28])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {15: True, 37: False, 28: True}

[4, 5, 6, 7]
[0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[4, 5]
[0.225, 0.225, 0.1, 0.1]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([26])
Tie Breaking Levels	: [3]; Predicted Values	: {10: True, 35: False, 26: False}

[5, 7]
[0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.03571428571428571, 0.1468253968253968, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 2/8 candidates.
[5, 7]
[0.225, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking Levels	: [3]; Predicted Values	: {21: False, 8: False, 2: True}
INCORRECT Prediction at tie levels: [3]

[2, 3, 6, 7]
[0.17857142857142855, 0.17857142857142855, 0.03571428571428571, 0.03571428571428571, 0.17857142857142855, 0.17857142857142855, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.225, 0.225, 0.225, 0.225]
Max Score = 0.225 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 7])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {13: False, 24: True, 7: False}

[4, 5, 6, 7]
[0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.225, 0.225, 0.225, 0.225]
Max Score = 0.225 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([18, 9])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {14: False, 18: False, 9: False}
INCORRECT Prediction at tie levels: [3, 3]

[4, 5, 6, 7]
[0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.225, 0.225, 0.225, 0.225]
Max Score = 0.225 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([32, 4])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {22: False, 32: False, 4: False}

[7]
[0.28968253968253965, 0.17857142857142855, 0.28968253968253965, 0.17857142857142855, 0.28968253968253965, 0.17857142857142855, 0.28968253968253965, 0.03571428571428571]

[3, 7]
[0.28968253968253965, 0.17857142857142855, 0.28968253968253965, 0.03571428571428571, 0.28968253968253965, 0.17857142857142855, 0.28968253968253965, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 2/8 candidates.
[3, 7]
[0.225, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([7])
Tie Breaking Levels	: [3]; Predicted Values	: {35: False, 13: False, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.1, 0.225, 0.1, 0.225, 0.1, 0.225, 0.1, 0.225]
Max Score = 0.225 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([37, 6])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {17: False, 37: False, 6: True}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968]
Min Score = 0.1468253968253968 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.125, 0.0, 0.125, 0.0, 0.125, 0.0, 0.125]
Max Score = 0.125 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([9, 22])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {17: False, 9: False, 22: False}

[6, 7]
[0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.17857142857142855, 0.17857142857142855, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 2/8 candidates.
[6, 7]
[0.225, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([26])
Tie Breaking Levels	: [3]; Predicted Values	: {36: False, 27: False, 26: False}

[7]
[0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.17857142857142855, 0.17857142857142855, 0.17857142857142855, 0.03571428571428571]

[6, 7]
[0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 2/8 candidates.
[7]
[0.0, 0.225]
Tie Breaking: Level 1

[5, 7]
[0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.03571428571428571, 0.28968253968253965, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 2/8 candidates.
[7]
[0.0, 0.125]
Tie Breaking: Level 1

[3, 7]
[0.28968253968253965, 0.1468253968253968, 0.17857142857142855, 0.03571428571428571, 0.28968253968253965, 0.1468253968253968, 0.17857142857142855, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 2/8 candidates.
[3, 7]
[0.225, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([15])
Tie Breaking Levels	: [3]; Predicted Values	: {27: False, 14: False, 15: True}

[4, 5, 6, 7]
[0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968]
Min Score = 0.1468253968253968 tied among 4/8 candidates.
[5, 7]
[0.0, 0.125, 0.0, 0.125]
Max Score = 0.125 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([18])
Tie Breaking Levels	: [3]; Predicted Values	: {19: False, 17: False, 18: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 8/8 candidates.
[0, 1, 4, 5]
[0.225, 0.225, 0.1, 0.1, 0.225, 0.225, 0.1, 0.1]
Max Score = 0.225 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([2, 7])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {10: True, 2: True, 7: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968]
Min Score = 0.1468253968253968 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125]
Max Score = 0.125 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 22, 32])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {8: False, 22: False, 32: False}

[2, 3, 6, 7]
[0.1468253968253968, 0.1468253968253968, 0.03571428571428571, 0.03571428571428571, 0.1468253968253968, 0.1468253968253968, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[7]
[0.0, 0.1, 0.0, 0.225]
Tie Breaking: Level 1

[4, 5, 6, 7]
[0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[5, 7]
[0.1, 0.225, 0.1, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking Levels	: [3]; Predicted Values	: {17: False, 14: False, 2: True}
INCORRECT Prediction at tie levels: [3]

[2, 3, 6, 7]
[0.17857142857142855, 0.17857142857142855, 0.03571428571428571, 0.03571428571428571, 0.17857142857142855, 0.17857142857142855, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.225, 0.225, 0.225, 0.225]
Max Score = 0.225 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([26, 5])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {12: False, 26: False, 5: False}

[6, 7]
[0.28968253968253965, 0.28968253968253965, 0.1468253968253968, 0.1468253968253968, 0.17857142857142855, 0.17857142857142855, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 2/8 candidates.
[6, 7]
[0.225, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([18])
Tie Breaking Levels	: [3]; Predicted Values	: {27: False, 21: False, 18: False}
INCORRECT Prediction at tie levels: [3]

[4, 5, 6, 7]
[0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.225, 0.225, 0.225, 0.225]
Max Score = 0.225 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([28, 32])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {22: False, 28: True, 32: False}

[4, 5, 6, 7]
[0.17857142857142855, 0.17857142857142855, 0.17857142857142855, 0.17857142857142855, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[5, 7]
[0.125, 0.225, 0.125, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([18])
Tie Breaking Levels	: [3]; Predicted Values	: {16: False, 13: False, 18: False}

[4, 5, 6, 7]
[0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.17857142857142855, 0.17857142857142855, 0.17857142857142855, 0.17857142857142855]
Min Score = 0.17857142857142855 tied among 4/8 candidates.
[4, 5, 6, 7]
[0.1, 0.1, 0.1, 0.1]
Max Score = 0.1 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([17, 24])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {14: False, 17: False, 24: True}
INCORRECT Prediction at tie levels: [3, 3]

[5, 7]
[0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.28968253968253965, 0.17857142857142855, 0.03571428571428571, 0.17857142857142855, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 2/8 candidates.
[7]
[0.0, 0.225]
Tie Breaking: Level 1

[4, 5, 6, 7]
[0.17857142857142855, 0.17857142857142855, 0.17857142857142855, 0.17857142857142855, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 4/8 candidates.
[6, 7]
[0.1, 0.1, 0.225, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([32])
Tie Breaking Levels	: [3]; Predicted Values	: {19: False, 11: False, 32: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.225, 0.225, 0.225, 0.225, 0.225, 0.225, 0.225, 0.225]
Max Score = 0.225 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([33, 15, 6])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {33: True, 15: True, 6: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 8/8 candidates.
[3, 7]
[0.1, 0.1, 0.1, 0.225, 0.1, 0.1, 0.1, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([37])
Tie Breaking Levels	: [3]; Predicted Values	: {17: False, 11: False, 37: False}

[6, 7]
[0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.1468253968253968, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 2/8 candidates.
[7]
[0.1, 0.225]
Tie Breaking: Level 1

[6, 7]
[0.28968253968253965, 0.28968253968253965, 0.1468253968253968, 0.1468253968253968, 0.17857142857142855, 0.17857142857142855, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 2/8 candidates.
[6, 7]
[0.225, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([18])
Tie Breaking Levels	: [3]; Predicted Values	: {27: False, 14: False, 18: False}

[6, 7]
[0.28968253968253965, 0.28968253968253965, 0.1468253968253968, 0.1468253968253968, 0.17857142857142855, 0.17857142857142855, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 2/8 candidates.
[6, 7]
[0.1, 0.1]
Max Score = 0.1 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([3])
Tie Breaking Levels	: [3]; Predicted Values	: {30: False, 22: False, 3: False}

[6, 7]
[0.28968253968253965, 0.28968253968253965, 0.1468253968253968, 0.1468253968253968, 0.17857142857142855, 0.17857142857142855, 0.03571428571428571, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 2/8 candidates.
[6, 7]
[0.225, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([33])
Tie Breaking Levels	: [3]; Predicted Values	: {22: False, 12: False, 33: True}

[3, 7]
[0.28968253968253965, 0.28968253968253965, 0.17857142857142855, 0.03571428571428571, 0.28968253968253965, 0.28968253968253965, 0.17857142857142855, 0.03571428571428571]
Min Score = 0.03571428571428571 tied among 2/8 candidates.
[3, 7]
[0.225, 0.225]
Max Score = 0.225 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([3])
Tie Breaking Levels	: [3]; Predicted Values	: {35: False, 27: False, 3: False}

Dataset				: pima.dat
Metric				: length
Minsups				: [3]
MF Accuracy			: [(0.89375, 0.63125, 160, 160)]
Mistle Accuracy		: [0.89375]
CNFAlgo Accuracy	: []
Randomized Accuracy	: [0.125]

# Test Examples		: 160
Mistle # Ties		: [(0, 0)]
CNFAlgo # Ties		: []
