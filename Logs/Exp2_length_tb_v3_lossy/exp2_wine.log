>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 58
 Number of frequent closed itemsets: 33071
 Total time ~: 418 ms
>/Users/arcchit/Docs/Mistle/Resources/spmf.jar
Running the DCI-Closed algorithm
========== DCI_CLOSED - STATS ============
 Number of transactions: 86
 Number of frequent closed itemsets: 25865
 Total time ~: 448 ms
Timeout of 20 seconds reached while mining patterns with minsup = 0.5
Current Minsup[0.75] yields 52392 itemsets.
Current Minsup[0.875] yields 1249 itemsets.
Current Minsup[0.7822174714475466] yields 20457 itemsets.
Top-k minsup for at least 10000 paterns = 0.7822174714475466 or 45
DL of initial theory	: 54616.93128080831
9999	itemsets left after T operation 	: [frozenset({3, 4, 5, 6, 10, 15, 18, 23, 29, 30, 35, 45, 48, 49, 50, 51, 64, -47, -2})]
2601	itemsets left after T operation 	: [frozenset({32, 66, 35, 4, 5, 3, 48, 49, 51, 24, 26, 29, 30})]
0	itemsets left after T operation 	: [frozenset({64, 4, 6, 14, 15, 16, 49, 50, 51, 21, 23, 26, 29, 30})]
# of frequent itemsets	: 0
Time of DCI Closed		: 0.3445758819580078
Initial DL				: 53743.33344022854
Final DL				: 2231.0763413475993
Compression (wrt me)	: 0.9584864540672952
Operator Counters		: {'D': 0, 'W': 0, 'V': 0, 'S': 0, 'R': 0, 'T': 3}
Misle Learning Runtime	: 26.50652575492859

Timeout of 20 seconds reached while mining patterns with minsup = 0.5
Current Minsup[0.75] yields 71095 itemsets.
Current Minsup[0.875] yields 1142 itemsets.
Current Minsup[0.7883748582782664] yields 25865 itemsets.
Top-k minsup for at least 10000 paterns = 0.7883748582782664 or 68
DL of initial theory	: 54616.93128080831
9987	itemsets left after T operation 	: [frozenset({64, 3, 5, 40, 10, 49, 21, 26, 29, 30, 63})]
4851	itemsets left after T operation 	: [frozenset({35, 5, 10, 45, 49, 23, 26, 30})]
0	itemsets left after T operation 	: [frozenset({64, 40, 10, 45, 16, 21, 29, 63})]
# of frequent itemsets	: 0
Time of DCI Closed		: 0.3023202419281006
Initial DL				: 53743.33344022854
Final DL				: 20388.482725664337
Compression (wrt me)	: 0.6206323385515398
Operator Counters		: {'D': 0, 'W': 0, 'V': 0, 'S': 0, 'R': 0, 'T': 3}
Misle Learning Runtime	: 27.06074094772339


[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Min Score = 0.0 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.07692307692307693, 0.07692307692307693, 0.07692307692307693, 0.07692307692307693, 0.07692307692307693, 0.07692307692307693, 0.07692307692307693, 0.07692307692307693]
Max Score = 0.07692307692307693 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([43, 47, 15])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {43: False, 47: True, 15: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909]
Min Score = 0.1534090909090909 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.05263157894736842, 0.05263157894736842, 0.0, 0.0, 0.05263157894736842, 0.05263157894736842]
Max Score = 0.05263157894736842 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 66])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {51: False, 20: False, 66: False}
INCORRECT Prediction at tie levels: [3, 3]

[3, 7]
[0.2159090909090909, 0.09090909090909091, 0.2159090909090909, 0.0, 0.2159090909090909, 0.09090909090909091, 0.2159090909090909, 0.0]
Min Score = 0.0 tied among 2/8 candidates.
[3, 7]
[0.20098322729901677, 0.20098322729901677]
Max Score = 0.20098322729901677 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([52])
Tie Breaking Levels	: [3]; Predicted Values	: {10: False, 3: False, 52: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909]
Min Score = 0.1534090909090909 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([25, 44, 50])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {25: False, 44: False, 50: False}

[1, 3, 5, 7]
[0.0625, 0.0, 0.0625, 0.0, 0.0625, 0.0, 0.0625, 0.0]
Min Score = 0.0 tied among 4/8 candidates.
[3, 7]
[0.07692307692307693, 0.20098322729901677, 0.07692307692307693, 0.20098322729901677]
Max Score = 0.20098322729901677 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([54])
Tie Breaking Levels	: [3]; Predicted Values	: {50: False, 16: False, 54: False}

[3, 7]
[0.1534090909090909, 0.0625, 0.1534090909090909, 0.0, 0.1534090909090909, 0.0625, 0.1534090909090909, 0.0]
Min Score = 0.0 tied among 2/8 candidates.
[3, 7]
[0.20098322729901677, 0.20098322729901677]
Max Score = 0.20098322729901677 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([37])
Tie Breaking Levels	: [3]; Predicted Values	: {35: False, 26: False, 37: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Min Score = 0.0 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.20098322729901677, 0.20098322729901677, 0.0, 0.0, 0.20098322729901677, 0.20098322729901677]
Max Score = 0.20098322729901677 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 59])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {4: False, 7: False, 59: False}

[6, 7]
[0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.0, 0.0]
Min Score = 0.0 tied among 2/8 candidates.
[6, 7]
[0.14835164835164835, 0.14835164835164835]
Max Score = 0.14835164835164835 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([61])
Tie Breaking Levels	: [3]; Predicted Values	: {63: False, 29: False, 61: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Min Score = 0.0 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Max Score = 0.20098322729901677 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([60, 56, 33])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {60: False, 56: False, 33: True}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Min Score = 0.0 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.14835164835164835, 0.14835164835164835, 0.14835164835164835, 0.14835164835164835, 0.14835164835164835, 0.14835164835164835, 0.14835164835164835, 0.14835164835164835]
Max Score = 0.14835164835164835 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([56, 42, 31])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {56: False, 42: False, 31: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909]
Min Score = 0.2159090909090909 tied among 8/8 candidates.
[0, 2, 4, 6]
[0.05263157894736842, 0.0, 0.05263157894736842, 0.0, 0.05263157894736842, 0.0, 0.05263157894736842, 0.0]
Max Score = 0.05263157894736842 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([37, 61])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {2: True, 37: False, 61: False}
INCORRECT Prediction at tie levels: [3, 3]

[1, 3, 5, 7]
[0.1534090909090909, 0.0, 0.1534090909090909, 0.0, 0.1534090909090909, 0.0, 0.1534090909090909, 0.0]
Min Score = 0.0 tied among 4/8 candidates.
[1, 3, 5, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Max Score = 0.20098322729901677 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([27, 60])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {49: False, 27: False, 60: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909]
Min Score = 0.1534090909090909 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.07692307692307693, 0.07692307692307693, 0.07692307692307693, 0.07692307692307693, 0.07692307692307693, 0.07692307692307693, 0.07692307692307693, 0.07692307692307693]
Max Score = 0.07692307692307693 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([13, 31, 19])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {13: False, 31: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[5, 7]
[0.0625, 0.1534090909090909, 0.0625, 0.1534090909090909, 0.0625, 0.2159090909090909, 0.0625, 0.2159090909090909]
Max Score = 0.2159090909090909 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([39])
Tie Breaking Levels	: [3]; Predicted Values	: {49: False, 23: False, 39: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.0625, 0.0625, 0.0, 0.0, 0.0625, 0.0625]
Max Score = 0.0625 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([33, 15])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {35: False, 33: False, 15: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909]
Max Score = 0.1534090909090909 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([58, 61, 41])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {58: False, 61: False, 41: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
Max Score = 0.0 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([19, 39, 18])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {19: False, 39: False, 18: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0, 0.09090909090909091, 0.0, 0.09090909090909091, 0.0, 0.09090909090909091, 0.0, 0.09090909090909091]
Max Score = 0.09090909090909091 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([39, 22])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {64: False, 39: False, 22: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.09090909090909091, 0.09090909090909091, 0.09090909090909091, 0.09090909090909091, 0.09090909090909091, 0.09090909090909091, 0.09090909090909091, 0.09090909090909091]
Max Score = 0.09090909090909091 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([35, 48, 38])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {35: False, 48: False, 38: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909]
Max Score = 0.2159090909090909 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([27, 33, 20])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {27: False, 33: False, 20: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909]
Max Score = 0.2159090909090909 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([4, 46, 12])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {4: False, 46: False, 12: True}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909]
Max Score = 0.2159090909090909 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([22, 56, 33])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {22: False, 56: False, 33: False}

[5, 7]
[0.20098322729901677, 0.12406015037593984, 0.20098322729901677, 0.12406015037593984, 0.20098322729901677, 0.05263157894736842, 0.20098322729901677, 0.05263157894736842]
Min Score = 0.05263157894736842 tied among 2/8 candidates.
[5, 7]
[0.2159090909090909, 0.2159090909090909]
Max Score = 0.2159090909090909 tied among 2/8 candidates.
Still need to calculate most frequent values for dict_keys([2])
Tie Breaking Levels	: [3]; Predicted Values	: {49: False, 6: False, 2: False}
INCORRECT Prediction at tie levels: [3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909]
Max Score = 0.2159090909090909 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([20, 34, 15])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {20: False, 34: False, 15: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.0625, 0.0625, 0.0625, 0.0625, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909]
Max Score = 0.2159090909090909 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([53, 19])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {5: False, 53: False, 19: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.09090909090909091, 0.09090909090909091, 0.0, 0.0, 0.09090909090909091, 0.09090909090909091]
Max Score = 0.09090909090909091 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([57, 38])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {5: False, 57: False, 38: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625]
Max Score = 0.0625 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 28, 49])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {24: False, 28: False, 49: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[2, 3, 6, 7]
[0.0, 0.0, 0.2159090909090909, 0.2159090909090909, 0.0, 0.0, 0.2159090909090909, 0.2159090909090909]
Max Score = 0.2159090909090909 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([7, 56])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {10: False, 7: False, 56: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909]
Max Score = 0.1534090909090909 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([8, 65, 17])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {8: False, 65: False, 17: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[0, 1, 2, 3, 4, 5, 6, 7]
[0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909]
Max Score = 0.2159090909090909 tied among 8/8 candidates.
Still need to calculate most frequent values for dict_keys([24, 17, 7])
Tie Breaking Levels	: [3, 3, 3]; Predicted Values	: {24: False, 17: False, 7: False}
INCORRECT Prediction at tie levels: [3, 3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0625, 0.2159090909090909, 0.0625, 0.2159090909090909, 0.0625, 0.2159090909090909, 0.0625, 0.2159090909090909]
Max Score = 0.2159090909090909 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([61, 44])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {29: False, 61: False, 44: False}
INCORRECT Prediction at tie levels: [3, 3]

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[4, 5, 6, 7]
[0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909, 0.2159090909090909]
Max Score = 0.2159090909090909 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([27, 34])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {35: False, 27: False, 34: False}

[2, 3, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.14835164835164835, 0.14835164835164835, 0.20098322729901677, 0.20098322729901677, 0.14835164835164835, 0.14835164835164835]
Min Score = 0.14835164835164835 tied among 4/8 candidates.
[2, 3, 6, 7]
[0.1534090909090909, 0.1534090909090909, 0.1534090909090909, 0.1534090909090909]
Max Score = 0.1534090909090909 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([36, 52])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {29: False, 36: False, 52: False}

[0, 1, 2, 3, 4, 5, 6, 7]
[0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677, 0.20098322729901677]
Min Score = 0.20098322729901677 tied among 8/8 candidates.
[1, 3, 5, 7]
[0.0625, 0.2159090909090909, 0.0625, 0.2159090909090909, 0.0625, 0.2159090909090909, 0.0625, 0.2159090909090909]
Max Score = 0.2159090909090909 tied among 4/8 candidates.
Still need to calculate most frequent values for dict_keys([51, 38])
Tie Breaking Levels	: [3, 3]; Predicted Values	: {49: False, 51: False, 38: False}
INCORRECT Prediction at tie levels: [3, 3]

Dataset				: wine.dat
Metric				: length
Minsups				: [3]
MF Accuracy			: [(0.6176470588235294, 0.42424242424242425, 34, 33)]
Mistle Accuracy		: [0.6176470588235294]
CNFAlgo Accuracy	: []
Randomized Accuracy	: [0.125]

# Test Examples		: 34
Mistle # Ties		: [(0, 0)]
CNFAlgo # Ties		: []
