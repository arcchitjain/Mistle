### Compress for classification configuration file ###

taskClass = classify

# Command
command = classifycompress

# TakeItEasy(tm) -- ( 0 | 1 ) If enabled, process runs with low priority.
takeItEasy = 0

# Full data path; don't forget to end with a (back)slash. Read from datadir.conf if empty.
#dataDir = 

## Input frequent itemset collection to be used as candidates (also determines database)
# Name
iscName = chess-all-1d

## Seed for randomisation of partitioning (set to 0 to use current time as seed)
seed = 0

## Classification
# Class definition (define which items to regard as class labels; multi-class transactions not allowed!)
# (Only required when class definition is not given in the original database; option overrides any definition given there)
#classDefinition = 9 14 22

## Preferred datatype ( uint16 | bai32 | bm128 (default) )
# Refer to compress.conf for more info on this
#datatype = bm128

## Parallel or not
# Set the number of threads that Slimmer may use
numThreads = 1 

## ---------- 'Expert' settings :) --------- ##

## Compression settings
# Algorithm name
###############################################################################
# Krimp
#algo = krimp-coverpartial
###############################################################################
###############################################################################
# Slimmer
algo = slimMJ-cccoverpartial-usg

# estimation strategy ( usg | gain ) (usg = estimate candidate quality based on usage count, gain = estimate candidate quality based on actual gain)
estStrategy = gain

## Threshold bits for early stopping compression ( 0 = ignore)
thresholdBits = 0

# max time in hours, 0=ignore
maxTime = 0
##############################################################################

# Report after every [reportsup] support change in the candidate list
reportSup = 10
# Report at least every reportcnd number of candidates (0 = ignore)
reportCnd = 0

## Pruning
# On-the-fly / online  (nop = no pruning, pop = post-pruning, pep = post estimation pruning, prunes only if estimated gain > 0 bits)
pruneStrategy = pep

## Cross-validation (usually 10-fold CV)
# Number of folds ([2,*] or 1 for training = test)
numFolds = 10

# Perform all code table matching schemes (currently meaning: both absolute && relative CT matching)
allMatchings = 1

## CT matching (only relevant if allMatchings == 0)
# Try to match codetables relative to max.sup (set to 0 to use absolute matching by reportSup)
classifyPercentage = 0

## Storage settings
## What to do when the ISCfile had to be mined? ( zap | store )
# Store means it'll be written /data/candidates and be reused if the same experiment is started
iscIfMined = zap

# The file format to store the ISCFile in ( isc | bisc )
iscStoreType = isc
# The file format to store the temporary ISCFiles in ( isc | bisc )
iscChunkType = isc

# write log file?
writeLogFile = no

# write CTLog file?
writeCTLogFile = no

# write report file?
writeReportFile = no

# write progress to disk? (write code tables and/or stats)
writeProgressToDisk = yes

EndConfig

Your comments here.