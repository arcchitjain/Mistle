### (Regular) compression configuration file ###

# Class : the task you want to perform : compress_ng
taskclass = compress_ng

# Command compress
command = compress

# TakeItEasy(tm) -- ( 0 | 1 ) If enabled, process runs with low priority.
takeItEasy = 0

## Parallel or not
# Set the number of threads that Slimmer may use
numThreads = 1 

# Full data path; don't forget to end with a (back)slash. Read from datadir.conf if empty.
#dataDir = 

# Preferred datatype ( uint16 | bai32 | bm128 (default) )
# Always keep to default value (bm128) when the number of different items is <= 128.
# If the number of different items ('alphabet size') is > 128:
#	Dense data --> choose bai32
#	Sparse data --> choose uint16
#	(You may do some small tests to find out what gives the best result for you
#	with respect to both the required computational power and memory space.)
datatype = bm128

#Input database/frequent itemset collection to be used as candidates
# iscName = (database Name - candidate type - minimum support + candidate set order)
#iscName = connect-all-2500d
#iscName = ionosphere-all-100d
iscName = iris-all-1d
#iris -> database name
#all -> Candidate type determined by ( all | cls | closed )
#1d -> 1 = minimum support, d =  Candidate set order determined by [ a (supp desc, length asc, lex) | d (like a, but length desc) | z | aq | as ... see the code ]

## Compression settings 
## Pruning
# On-the-fly / online  (nop = no pruning, pop = post-pruning, pep = post estimation pruning, prunes only if estimated gain > 0 bits)
pruneStrategy = pep

### You probably don't want to change anything of the following (possibly except for reportSup)

## Compression settings
# Algorithm name
###############################################################################
# Krimp
#algo = krimp-coverpartial
###############################################################################
###############################################################################
# Slimmer
algo = slimMJ-cccoverpartial-usg

# estimation strategy ( usg | gain ) (usg = estimate candidate quality based on usage count, gain = estimate candidate quality based on actual gain)
estStrategy = gain

## Threshold bits for early stopping compression ( 0 = ignore)
thresholdBits = 0

## maximum time you want algorithm to run (in hours), 0=ignore
maxTime = 0
##############################################################################

# Report every reportsup support difference (0 = ignore, only on start and end)
reportSup = 50

# Report at least every reportcnd number of candidates (0 = ignore)
reportCnd = 0

# Report at least on every accepted candidate ( bool, 0/1 )
reportAcc = 0

## Storage settings
## What to do when the ISCfile had to be mined? ( zap | store )
# Store means it'll be written /data/candidates and be reused if the same experiment is started
iscIfMined = zap

# The file format to store the ISCFile in ( isc | bisc )
iscStoreType = isc
# The file format to store the temporary ISCFiles in ( isc | bisc )
iscChunkType = isc

# write log file?
writeLogFile = no

# write CTLog file?
writeCTLogFile = no

# write report file?
writeReportFile = no

# write progress to disk? (write code tables and/or stats)
writeProgressToDisk = yes

EndConfig

Your comments here.
